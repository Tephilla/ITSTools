typedef Philo = 0 .. 4 ;
GAL Philosophers {
	array [5] think = (1, 1, 1, 1, 1) ;
	array [5] fork = (1, 1, 1, 1, 1) ;
	array [5] catch1 = (0, 0, 0, 0, 0) ;
	array [5] catch2 = (0, 0, 0, 0, 0) ;
	array [5] eat = (0, 0, 0, 0, 0) ;

	transition ff1a (Philo $x) [think [$x] >= 1 && fork [(($x - 1) % 5 + 5) % 5] >= 1] {
		think [$x] = think [$x] - 1 ;
		fork [(($x - 1) % 5 + 5) % 5] = fork [(($x - 1) % 5 + 5) % 5] - 1 ;
		catch1 [$x] = catch1 [$x] + 1 ;
	}

	transition ff1b (Philo $x) [think [$x] >= 1 && fork [$x] >= 1] {
		think [$x] = think [$x] - 1 ;
		fork [$x] = fork [$x] - 1 ;
		catch2 [$x] = catch2 [$x] + 1 ;
	}

	transition ff2a (Philo $x) [catch1 [$x] >= 1 && fork [$x] >= 1] {
		catch1 [$x] = catch1 [$x] - 1 ;
		fork [$x] = fork [$x] - 1 ;
		eat [$x] = eat [$x] + 1 ;
	}

	transition ff2b (Philo $x) [catch2 [$x] >= 1 && fork [(($x - 1) % 5 + 5) % 5] >= 1] {
		catch2 [$x] = catch2 [$x] - 1 ;
		fork [(($x - 1) % 5 + 5) % 5] = fork [(($x - 1) % 5 + 5) % 5] - 1 ;
		eat [$x] = eat [$x] + 1 ;
	}

	transition end (Philo $x) [eat [$x] >= 1] {
		eat [$x] = eat [$x] - 1 ;
		fork [$x] = fork [$x] + 1 ;
		fork [(($x - 1) % 5 + 5) % 5] = fork [(($x - 1) % 5 + 5) % 5] + 1 ;
		think [$x] = think [$x] + 1 ;
	}
	TRANSIENT = False ;
}