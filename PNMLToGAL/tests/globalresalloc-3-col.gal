typedef Proc = 0 .. 2 ;
typedef Res = 0 .. 5 ;
GAL Global_Allocation_Resource_Management {
	array [3] processes = (1, 1, 1) ;
	array [6] resources = (1, 1, 1, 1, 1, 1) ;
	array [3] prin = (0, 0, 0) ;
	array [18] incriticals = (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0) ;
	array [3] prreleased = (0, 0, 0) ;

	transition enter1 (Proc $p, Res $r1) [resources [$r1] >= 1 && processes [$p] >= 1] {
		resources [$r1] = resources [$r1] - 1 ;
		processes [$p] = processes [$p] - 1 ;
		incriticals [$p * 6 + $r1] = incriticals [$p * 6 + $r1] + 1 ;
		prreleased [$p] = prreleased [$p] + 3 ;
		prin [$p] = prin [$p] + 1 ;
	}

	transition enter2 (Proc $p, Res $r1, Res $r2) [processes [$p] >= 1 && resources [$r1] >= 1 && resources [$r2] >= 1] {
		processes [$p] = processes [$p] - 1 ;
		resources [$r1] = resources [$r1] - 1 ;
		resources [$r2] = resources [$r2] - 1 ;
		incriticals [$p * 6 + $r2] = incriticals [$p * 6 + $r2] + 1 ;
		incriticals [$p * 6 + $r1] = incriticals [$p * 6 + $r1] + 1 ;
		prin [$p] = prin [$p] + 2 ;
		prreleased [$p] = prreleased [$p] + 2 ;
	}

	transition enter3 (Proc $p, Res $r3, Res $r1, Res $r2) [processes [$p] >= 1 && resources [$r2] >= 1 && resources
	[$r1] >= 1 && resources [$r3] >= 1] {
		processes [$p] = processes [$p] - 1 ;
		resources [$r2] = resources [$r2] - 1 ;
		resources [$r3] = resources [$r3] - 1 ;
		resources [$r1] = resources [$r1] - 1 ;
		prin [$p] = prin [$p] + 3 ;
		prreleased [$p] = prreleased [$p] + 1 ;
		incriticals [$p * 6 + $r3] = incriticals [$p * 6 + $r3] + 1 ;
		incriticals [$p * 6 + $r2] = incriticals [$p * 6 + $r2] + 1 ;
		incriticals [$p * 6 + $r1] = incriticals [$p * 6 + $r1] + 1 ;
	}

	transition enter4 (Proc $p, Res $r4, Res $r3, Res $r1, Res $r2) [processes [$p] >= 1 && resources [$r3] >= 1 &&
	resources [$r4] >= 1 && resources [$r1] >= 1 && resources [$r2] >= 1] {
		processes [$p] = processes [$p] - 1 ;
		resources [$r1] = resources [$r1] - 1 ;
		resources [$r2] = resources [$r2] - 1 ;
		resources [$r4] = resources [$r4] - 1 ;
		resources [$r3] = resources [$r3] - 1 ;
		prin [$p] = prin [$p] + 4 ;
		incriticals [$p * 6 + $r3] = incriticals [$p * 6 + $r3] + 1 ;
		incriticals [$p * 6 + $r1] = incriticals [$p * 6 + $r1] + 1 ;
		incriticals [$p * 6 + $r4] = incriticals [$p * 6 + $r4] + 1 ;
		incriticals [$p * 6 + $r2] = incriticals [$p * 6 + $r2] + 1 ;
	}

	transition exit (Proc $p) [prreleased [$p] >= 4] {
		prreleased [$p] = prreleased [$p] - 4 ;
		processes [$p] = processes [$p] + 1 ;
	}

	transition release1 (Proc $p, Res $r1) [incriticals [$p * 6 + $r1] >= 1 && prin [$p] >= 1] {
		incriticals [$p * 6 + $r1] = incriticals [$p * 6 + $r1] - 1 ;
		prin [$p] = prin [$p] - 1 ;
		prreleased [$p] = prreleased [$p] + 1 ;
		resources [$r1] = resources [$r1] + 1 ;
	}

	transition release2 (Proc $p, Res $r1, Res $r2) [incriticals [$p * 6 + $r2] >= 1 && incriticals [$p * 6 + $r1] >= 1
	&& prin [$p] >= 2] {
		incriticals [$p * 6 + $r1] = incriticals [$p * 6 + $r1] - 1 ;
		incriticals [$p * 6 + $r2] = incriticals [$p * 6 + $r2] - 1 ;
		prin [$p] = prin [$p] - 2 ;
		prreleased [$p] = prreleased [$p] + 2 ;
		resources [$r2] = resources [$r2] + 1 ;
		resources [$r1] = resources [$r1] + 1 ;
	}
	TRANSIENT = False ;
}