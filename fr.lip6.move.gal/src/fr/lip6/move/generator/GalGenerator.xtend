/*
 * generated by Xtext
 */
package fr.lip6.move.generator

import fr.lip6.move.gal.Assignment
import fr.lip6.move.gal.System
import fr.lip6.move.gal.Transition
import fr.lip6.move.gal.VariableRef
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IFileSystemAccess
import org.eclipse.xtext.generator.IGenerator

class GalGenerator implements IGenerator {
	
	static String name_package = "systems"
	static String name_transitions_package = "transitions"
	
	private Resource resource
	private IFileSystemAccess fsa 
	
	override void doGenerate(Resource resource, IFileSystemAccess fsa) {
		this.resource 	= resource 
		this.fsa		= fsa
		
		// Interfaces
		GalInterfacesGenerator::doGenerate(resource,fsa)
		
		// Environment		
		GalEnvGenerator::doGenerate(resource,fsa)
		
		// Gal Systems
		for (system : resource.allContents.toIterable.filter(typeof(System))){
			fsa.generateFile("./"+name_package+"/"+system.name+".java",
				compileSystem(system)
			)
		}
	}
	
	def compileSystem(System s) '''
		package «name_package»;
		
		import java.util.List;
		import java.util.ArrayList;
		import «GalInterfacesGenerator::name_package».IState;
		import «GalInterfacesGenerator::name_package».ITransition;
		import «GalInterfacesGenerator::name_package».IGAL;
		import «GalEnvGenerator::name_package».State;
		import «name_package».«name_transitions_package».«s.name».*;
		
		public class «s.name» implements IGAL{
			private final String name = "«s.name»";
			private List<ITransition> transitions;
			private IState initState;
			
			public «s.name»(){
				transitions = new ArrayList<ITransition>();
				setInitState();
			}
			
			private void setInitState(){
				initState = new State();
				«FOR v:s.variables»
				initState.addVariable("«v.name»", «v.value»);
				«ENDFOR»
				
				«FOR t:s.transitions»
				«fsa.generateFile(
					name_package+"/"+name_transitions_package+"/"+s.name+"/"+t.name+".java",
					t.compile(s.name))»
				transitions.add(new «t.name»());
				«ENDFOR»
			}
			
			@Override
			public String getName(){
				return name;
			}
			
			@Override
			public IState getInitState(){
				return initState;
			}
			
			@Override
			public List<ITransition> getTransitions(){
				return transitions;
			}
		}
	'''
	
	def compile(Transition t, String sysName) '''
		package «name_package+"."+name_transitions_package+"."+sysName»;
		
		import interfaces.ITransition;
		import interfaces.IState;
		
		public class «t.name» implements ITransition {
			private final String name = "«t.name»";
		
			public «t.name» () {}
			
			@Override
			public String getName(){
				return name;
			}
			
			@Override
			public boolean guard(final IState entryState){
				return
					«GalGeneratorUtils::parseBoolExpression(t.guard,"entryState")»;
			}
			
			@Override
			public IState successor(final IState entryState){
				IState stateRes = entryState.clone();
				
				«FOR a : t.actions»
				«IF a instanceof Assignment» 
				«(a as Assignment).compile»
				«ENDIF»
				«ENDFOR»
				
				return stateRes;
			}
		}
	'''
	
	def compile(Assignment a) {
		switch a.left {
			VariableRef :
				{val rf = (a.left as VariableRef).referencedVar;
				"stateRes.setVariable(\""+rf.name+"\","+
					GalGeneratorUtils::parseIntExpression(a.right,"stateRes")
					+")";
				}
			}
	}
}
