/*
 * generated by Xtext
 */
package fr.lip6.move.generator.workingOn

import fr.lip6.move.gal.Assignment
import fr.lip6.move.gal.System
import fr.lip6.move.gal.Transition
import fr.lip6.move.gal.VariableRef
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IFileSystemAccess
import org.eclipse.xtext.generator.IGenerator
import fr.lip6.move.gal.ArrayVarAccess
import fr.lip6.move.gal.Push
import fr.lip6.move.gal.Pop

class GalGenerator implements IGenerator {
	
	static String name_package = "systems"
	static String name_transitions_package = "transitions"
	
	private Resource resource
	private IFileSystemAccess fsa 
	
	override void doGenerate(Resource resource, IFileSystemAccess fsa) {
		this.resource 	= resource 
		this.fsa		= fsa
		
		// Interfaces
		GalInterfacesGenerator::doGenerate(resource,fsa)
		
		// Environment		
		GalEnvGenerator::doGenerate(resource,fsa)
		
		// Gal Systems
		for (system : resource.allContents.toIterable.filter(typeof(System))){
			val sname = system.name.replace('.', '_')
			fsa.generateFile("./"+name_package+"/"+sname+".java",
				compileSystem(system, sname)
			)
		}
	}
	
	def compileSystem(System s, String sname) '''
		package «name_package»;
		
		import java.util.List;
		import java.util.ArrayList;
		import «GalInterfacesGenerator::name_package».IState;
		import «GalInterfacesGenerator::name_package».ITransition;
		import «GalInterfacesGenerator::name_package».IGAL;
		import «GalEnvGenerator::name_package».State;
		import «name_package».«name_transitions_package».«sname».*;
		
		public class «sname» implements IGAL{
			private final String name = "«s.name»";
			private List<ITransition> transitions;
			private IState initState;
			
			public «sname»(){
				transitions = new ArrayList<ITransition>();
				setInitState();
			}
			
			private void setInitState(){
				initState = new State();
				
				«FOR v:s.variables»
				initState.addVariable("«v.name»", «v.value»);
				«ENDFOR»
				
				«if ((s.arrays.size > 0) || (s.lists.size > 0 )){
				"List<Integer> initValues;"	
				}»
				
				«FOR a:s.arrays»
				initValues = new ArrayList<Integer>();
				«IF a.values != null»
				«FOR i:a.values.values»
				initValues.add(«i»);
				«ENDFOR»
				«ENDIF»
				initState.createArray("«a.name»", initValues);
				
				«ENDFOR»
				
				«FOR l:s.lists»
				initValues = new ArrayList<Integer>();
				«IF l.values != null»
				«FOR i:l.values.values»
				initValues.add(«i»);
				«ENDFOR»
				«ENDIF»
				initState.createList("«l.name»", initValues);
				
				«ENDFOR»
				
				«FOR t:s.transitions»
				«fsa.generateFile(
					name_package+"/"+name_transitions_package+"/"+sname+"/"+t.name+".java",
					t.compile(sname))»
				transitions.add(new «t.name»());
				«ENDFOR»
			}
			
			@Override
			public String getName(){
				return name;
			}
			
			@Override
			public IState getInitState(){
				return initState;
			}
			
			@Override
			public List<ITransition> getTransitions(){
				return transitions;
			}
			
			@Override
			public boolean getTransient(IState entryState){
				return «
					if(s.transient != null){
						GalGeneratorUtils::parseBoolExpression(s.transient.value,"entryState");
					}else
						"false"
					»;
			}
		}
	'''
	
	def compile(Transition t, String sysName) '''
		package «name_package+"."+name_transitions_package+"."+sysName»;
		
		import interfaces.ITransition;
		import interfaces.IState;
		
		public class «t.name» implements ITransition {
			private final String name = "«t.name»";
		
			public «t.name» () {}
			
			@Override
			public String getName(){
				return name;
			}
			
			@Override
			public boolean guard(final IState entryState){
				try {
					return «GalGeneratorUtils::parseBoolExpression(t.guard,"entryState")»;
				}catch(IndexOutOfBoundsException e){
					return false;
				}
			}
			
			@Override
			public IState successor(final IState entryState){
				IState stateRes = (IState) entryState.clone();
				
				«FOR a : t.actions»
				«switch a {
					Assignment	: a.compile
					Push		: a.compile	
					Pop			: a.compile
				}»
				«ENDFOR»
				
				return stateRes;
			}
		}
	'''
	
	def compile(Assignment a) {
		switch a.left {
			VariableRef :
				{val rf = (a.left as VariableRef).referencedVar;
				"stateRes.setVariable(\""+rf.name+"\", "
					+GalGeneratorUtils::parseIntExpression(a.right,"stateRes")
					+");";}
			ArrayVarAccess :
				{val ap = (a.left as ArrayVarAccess);
				"stateRes.setValueInArray(\""
					+ap.prefix.name+"\", "
					+GalGeneratorUtils::parseIntExpression(ap.index, "stateRes")+", "
					+GalGeneratorUtils::parseIntExpression(a.right,"stateRes")
					+");"}
		}
	}
	
	def compile(Push a){
		"stateRes.pushInList(\""+a.list.name+"\","+GalGeneratorUtils::parseIntExpression(a.value, "stateRes")+");"
	}
	
	def compile(Pop a){
		"stateRes.popInList(\""+a.list.name+"\");"
	}
}
