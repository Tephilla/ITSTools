/*
 * generated by Xtext
 */
package fr.lip6.move.scoping;

import java.util.ArrayList;
import java.util.List;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;
import org.eclipse.xtext.xbase.scoping.XbaseScopeProvider;

import fr.lip6.move.gal.Call;
import fr.lip6.move.gal.Label;
import fr.lip6.move.gal.System;
import fr.lip6.move.gal.Transition;

/**
 * This class contains custom scoping description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation/latest/xtext.html#scoping
 * on how and when to use it 
 *
 */
public class GalScopeProvider extends XbaseScopeProvider {


	public IScope getScope(EObject context, EReference reference) {
		String clazz = reference.getEContainingClass().getName() ;
		String prop = reference.getName();
		if ("Call".equals(clazz) && "label".equals(prop)) {
			if (context instanceof Call) {
				Call call = (Call) context;

				EObject parent = call.eContainer();
				Transition p = null;
				while (parent != null && !(parent instanceof fr.lip6.move.gal.System)) {
					if (parent instanceof Transition) {
						p = (Transition) parent;
					}
					parent = parent.eContainer();
				}
				if (parent==null||p==null) {
					// should not happen
					return null;
				}
				System s = (System) parent;
				List<Label> labs= new ArrayList<Label>();
				for (Transition t  : s.getTransitions()) {
					if (t!=p && t.getLabel() != null) {
						labs.add(t.getLabel());
					}
				}
				return Scopes.scopeFor(labs) ;
			}
		}
		return super.getScope(context, reference);
	}
}
