grammar fr.lip6.move.Gal with org.eclipse.xtext.common.Terminals

generate gal "http://www.lip6.fr/move/Gal"



System :
    ('GAL' name=QualifiedName '{'
        (variables+=VariableDeclaration)*
        transitions+=Transition+
       '}'
    )?
;

VariableDeclaration returns Variable:
    name=QualifiedName '=' initVal=INT ';'|
    aname=QualifiedName'['index=Addition']' '=' initVal=INT ';'
;

Transition:
    'transition' name=ID '[' guard=Or ']' ('label' label=STRING)? '{'
        (assignments+=Assignment )+
    '}' 
;



Assignment :
    var=VariableRef '=' expr=Addition';' |
    aVar+=VariableRef'['index=Addition']' '=' expr=Addition ';' //array variable
;

// Moins prioritaire --> + prioritaire
// addition {ou soustraction} --> multiplication
Addition returns IntExpression:
    Multiplication (
        ({Addition.left=current} '+' | {Subtraction.left=current} '-' )
        right=Multiplication
    )*
;

Multiplication returns IntExpression :
    UnitaryMinus
    (
        ({Multiplication.left=current} '*' | {Division.left=current} '/' | {Modulo.left=current} '%') 
        right=UnitaryMinus
    )*
;

UnitaryMinus returns IntExpression :
    ('-'? Power {UnitaryMinus.val=current})
;


Power returns IntExpression:
    Primary ({Power.left=current} '**' right=Primary)*
;

Primary returns IntExpression :
    VariableRef | Constante | '(' Addition ')'
;

Constante:
    val=INT
;

VariableRef  :
    var=[Variable]
;

/////////////////////////////////////////////////////////////////////
// moins prioritaire --> plus prioritaire
// Or --> And --> Not

Or returns BooleanExpression :
    And ({Or.left=current} '||' right=And)*
;


And returns BooleanExpression:
    Not ({And.left=current} '&&' right=Not)*
;


Not returns BooleanExpression :
    ('!' ? (PrimaryBool | Comparison) {Not.val=current})
;


PrimaryBool returns BooleanExpression:
    True | False
;



True:
    value='True'
;

False:
    value='False'
;



Comparison returns BooleanExpression:
    (left=Addition
    operator=CompOperators
    right=Addition)
;

CompOperators:
    '<' | '>' | '>=' | '<=' | '==' | '!='
;


//BooleanOperation returns BooleanExpression:
//    '(' Or ')'
//;

//les imports

QualifiedName:
    ID('.' ID)*
;

QualifiedNameWithWildCard:
    QualifiedName '.*'?
;

Import:
    'import' QualifiedNameWithWildCard
;