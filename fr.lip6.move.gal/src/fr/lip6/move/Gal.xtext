grammar fr.lip6.move.Gal with org.eclipse.xtext.xbase.Xbase

generate gal "http://www.lip6.fr/move/Gal"

import "http://www.eclipse.org/emf/2002/Ecore" as ecore


/**
 * System
 */
System:
	'GAL' name=FullyQualifiedName 
	('('
	params += ConstParameter
	( ',' params+= ConstParameter)* 
	')')?
	'{'
	(
	(types+=TypeDeclaration)
	|(variables+=VariableDeclaration) 
	|(arrays+=ArrayDeclaration) 
	|(lists+=ListDeclaration)
	)*
	transitions+=Transition+
	(transient=Transient)?
	'}';

TypeDeclaration: 'typedef' name=ID '=' min=BitOr '..' max=BitOr ';';


Transient:
	'TRANSIENT' '=' value=Or ';';

/* ============ System Content ================== */

VarDecl :
	VariableDeclaration | ArrayDeclaration
;

//Ex: int abc = 10 ; 
VariableDeclaration returns Variable:
	'int' name=FullyQualifiedName '=' value=BitOr ';';

	//Ex: array[1] tab = (2) ;
ArrayDeclaration returns ArrayPrefix:
	'array' '[' size=INT ']' name=FullyQualifiedName '=' '(' (values=InitValues)? ')' ';';

ListDeclaration returns List:
	'list' name=FullyQualifiedName ('=' '(' (values=InitValues)? ')')? ';';

InitValues:
	(values+=BitOr) (',' values+=BitOr)*;

Transition:
	'transition' name=FullyQualifiedName params=ParameterList '[' guard=Or ']' ('label' label=Label)? '{'
	(actions+=Actions)*
	'}';

ParameterList:
	{ParameterList} 
	('('
	paramList+=Parameter
	( ',' paramList+=Parameter)* 
	')')?
;

AbstractParameter :
	Parameter | ConstParameter
;

Parameter :
	type=[TypeDeclaration] name=PARAMNAME
;

ConstParameter : 
	name=PARAMNAME '=' value=INT
;


/*  ========= Transition Content ============ */
Actions:
	Assignment | Push | Pop | Ite | Call | Abort | While;

Push:
	'push' '(' list=[List|FullyQualifiedName] ',' value=BitOr ')' ';';

Pop:
	'pop' '(' list=[List|FullyQualifiedName] ')' ';';

Assignment:
	left=VarAccess '=' right=BitOr ';';

Ite:
	'if' '(' cond=Or ')' '{' (ifTrue+=Actions)+ '}'
	('else'  '{' (ifFalse+=Actions)+  '}')?	
;

While:
	'while' '(' cond=Or ')' '{' (actions+=Actions)+ '}'
;


Call:
	'self' '.' label=[Label] ';';

Abort:
	{Abort} 'abort' ';'
;


VarAccess:
	ArrayVarAccess | VariableRef ;

VariableRef:
	referencedVar=[Variable|FullyQualifiedName];

ArrayVarAccess:
	prefix=[ArrayPrefix|FullyQualifiedName] '[' index=BitOr ']';

ParamRef:
	refParam=[AbstractParameter|PARAMNAME]
;



/* =====   Arithmetic expressions ===== */

/* ====== Bitwise operators ======= */
BitOr returns IntExpression:
	BitXor ({BinaryIntExpression.left=current} op='|' right=BitXor)*;

BitXor returns IntExpression:
	BitAnd ({BinaryIntExpression.left=current} op='^' right=BitAnd)*;

BitAnd returns IntExpression:
	BitShift ({BinaryIntExpression.left=current} op='&' right=BitShift)*;

BitShift returns IntExpression:
	Addition ({BinaryIntExpression.left=current} op=('<<' | '>>') right=Addition)*;

Addition returns IntExpression:
	Multiplication ({BinaryIntExpression.left=current} op=('+' | '-') right=Multiplication)*;

Multiplication returns IntExpression:
	BitComplement ({BinaryIntExpression.left=current} op=('/' | '*' | '%') right=BitComplement)*;

BitComplement returns IntExpression:
	('~' Power ({BitComplement.value=current})) |
	('-' Power ({UnaryMinus.value=current})) |
	(Power);

Power returns IntExpression:
	Primary ({BinaryIntExpression.left=current} op=('**') right=Primary)*;

Primary returns IntExpression:
	Peek |
	VarAccess |
	ConstRef |
	(=> ('(' BitOr ')') | ('(' WrapBoolExpr ')'));

ConstRef returns IntExpression:
	Constant |
	ParamRef ;
	

WrapBoolExpr:
	value=Or;

Constant:
	value=INT;

Peek:
	'peek' '(' list=[List|FullyQualifiedName] ')';

/* =====   Boolean expressions ===== */
enum ComparisonOperators:
	GT='>' | // Greater Thean
	LT='<' | // Lower Than
	GE='>=' | // Greater or Equal
	LE='<=' | // Lower or Equal
	EQ='==' | // Equal
	NE='!='; // Not Equal
	
Or returns BooleanExpression:
	(And ({Or.left=current} '||' right=And)*);

And returns BooleanExpression:
	Not ({And.left=current} '&&' right=Not)*;

Not returns BooleanExpression:
	('!' {Not} value=PrimaryBool) | PrimaryBool;

PrimaryBool returns BooleanExpression:
	True | False | => Comparison | ('(' Or ')');

Comparison:
	(left=BitOr
	operator=ComparisonOperators
	right=BitOr);

True:
	{True}
	'true';

False:
	{False}
	'false';


/* =====   Basic types ===== */


Label :
	name=STRING
;

// Our qualified name may have integer at any position except first one
FullyQualifiedName:
	ID ( '.' (ID|INT))*
;

terminal PARAMNAME:
	'$'  ('^')?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

Integer returns ecore::EInt:
	('-')? INT;
