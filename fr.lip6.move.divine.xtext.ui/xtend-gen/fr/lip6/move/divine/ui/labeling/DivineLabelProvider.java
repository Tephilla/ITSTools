/**
 * generated by Xtext
 */
package fr.lip6.move.divine.ui.labeling;

import com.google.inject.Inject;
import fr.lip6.move.divine.divine.Array;
import fr.lip6.move.divine.divine.ArrayReference;
import fr.lip6.move.divine.divine.ArrayVarAccess;
import fr.lip6.move.divine.divine.Assign;
import fr.lip6.move.divine.divine.BooleanLiteral;
import fr.lip6.move.divine.divine.BooleanNegation;
import fr.lip6.move.divine.divine.Channel;
import fr.lip6.move.divine.divine.ChannelDeclaration;
import fr.lip6.move.divine.divine.Comparison;
import fr.lip6.move.divine.divine.Constant;
import fr.lip6.move.divine.divine.ConstantDeclaration;
import fr.lip6.move.divine.divine.Effect;
import fr.lip6.move.divine.divine.Expression;
import fr.lip6.move.divine.divine.Guard;
import fr.lip6.move.divine.divine.MultiDivMod;
import fr.lip6.move.divine.divine.NumberLiteral;
import fr.lip6.move.divine.divine.OrAndXor;
import fr.lip6.move.divine.divine.Plus;
import fr.lip6.move.divine.divine.Recv;
import fr.lip6.move.divine.divine.Reference;
import fr.lip6.move.divine.divine.Send;
import fr.lip6.move.divine.divine.Shift;
import fr.lip6.move.divine.divine.State;
import fr.lip6.move.divine.divine.StateDeclaration;
import fr.lip6.move.divine.divine.StringLiteral;
import fr.lip6.move.divine.divine.SystemType;
import fr.lip6.move.divine.divine.Transition;
import fr.lip6.move.divine.divine.Variable;
import fr.lip6.move.divine.divine.VariableDeclaration;
import fr.lip6.move.divine.divine.VariableOrConstantReference;
import fr.lip6.move.divine.divine.VariableRef;
import fr.lip6.move.divine.divine.impl.MinusImpl;
import org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider;
import org.eclipse.xtext.ui.label.DefaultEObjectLabelProvider;

/**
 * Provides labels for a EObjects.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#labelProvider
 */
@SuppressWarnings("all")
public class DivineLabelProvider extends DefaultEObjectLabelProvider {
  @Inject
  public DivineLabelProvider(final AdapterFactoryLabelProvider delegate) {
    super(delegate);
  }
  
  public String text(final ChannelDeclaration ele) {
    return "Channels :";
  }
  
  public String text(final Array ele) {
    String _name = ele.getName();
    String _plus = (_name + ": Array");
    return _plus;
  }
  
  public String text(final Send e) {
    Channel _channel = e.getChannel();
    String _name = _channel.getName();
    String _plus = (_name + " : Sending-channel");
    return _plus;
  }
  
  public String text(final Recv e) {
    Channel _channel = e.getChannel();
    String _name = _channel.getName();
    String _plus = (_name + " : Receiving-channel");
    return _plus;
  }
  
  public String text(final ConstantDeclaration ele) {
    String _type = ele.getType();
    String _plus = ("Constant(s) : " + _type);
    return _plus;
  }
  
  public String text(final Constant ele) {
    String _name = ele.getName();
    String _plus = (_name + ":");
    Expression _initValue = ele.getInitValue();
    String _plus_1 = (_plus + _initValue);
    return _plus_1;
  }
  
  public String text(final Variable ele) {
    String _name = ele.getName();
    String _plus = (_name + " = ");
    Expression _initValue = ele.getInitValue();
    String _plus_1 = (_plus + _initValue);
    String _plus_2 = (_plus_1 + " (initial value)");
    return _plus_2;
  }
  
  public String text(final VariableDeclaration ele) {
    String _type = ele.getType();
    String _plus = ("Variable(s) :" + _type);
    return _plus;
  }
  
  public String text(final Transition ele) {
    State _src = ele.getSrc();
    String _name = _src.getName();
    String _plus = (_name + "->");
    State _dest = ele.getDest();
    String _name_1 = _dest.getName();
    String _plus_1 = (_plus + _name_1);
    String _plus_2 = (_plus_1 + " : Transition ");
    return _plus_2;
  }
  
  public String text(final fr.lip6.move.divine.divine.Process ele) {
    String _name = ele.getName();
    String _plus = (_name + ": Process  ");
    return _plus;
  }
  
  public String text(final Effect ele) {
    return "Effect(s) :";
  }
  
  public String text(final ArrayReference ele) {
    ArrayVarAccess _ref = ele.getRef();
    Array _prefix = _ref.getPrefix();
    String _name = _prefix.getName();
    String _plus = (_name + " array item");
    return _plus;
  }
  
  public String text(final Assign ele) {
    return "Assignement(s) : ";
  }
  
  public String text(final Guard ele) {
    return "Guard :";
  }
  
  public String text(final Channel ele) {
    String _name = ele.getName();
    return _name;
  }
  
  public String text(final SystemType ele) {
    String _systemType = ele.getSystemType();
    String _plus = (_systemType + ": Divine System ");
    return _plus;
  }
  
  public String text(final StateDeclaration ele) {
    return "States :";
  }
  
  public String text(final State ele) {
    String _name = ele.getName();
    return _name;
  }
  
  public String text(final MultiDivMod e) {
    String _xblockexpression = null;
    {
      String op = e.getOp();
      boolean _equals = "*".equals(op);
      if (_equals) {
        return "MULT";
      }
      boolean _equals_1 = "/".equals(op);
      if (_equals_1) {
        return "DIV";
      }
      String _xifexpression = null;
      boolean _equals_2 = "%".equals(op);
      if (_equals_2) {
        return "MOD";
      }
      _xblockexpression = (_xifexpression);
    }
    return _xblockexpression;
  }
  
  public int text(final NumberLiteral e) {
    int _value = e.getValue();
    return _value;
  }
  
  public String text(final OrAndXor e) {
    String _xblockexpression = null;
    {
      String op = e.getOp();
      boolean _or = false;
      boolean _equals = "|".equals(op);
      if (_equals) {
        _or = true;
      } else {
        boolean _equals_1 = "||".equals(op);
        _or = (_equals || _equals_1);
      }
      if (_or) {
        return "BIT OR";
      }
      boolean _equals_2 = "^".equals(op);
      if (_equals_2) {
        return "BIT XOR";
      }
      String _xifexpression = null;
      boolean _or_1 = false;
      boolean _equals_3 = "&".equals(op);
      if (_equals_3) {
        _or_1 = true;
      } else {
        boolean _equals_4 = "&".equals(op);
        _or_1 = (_equals_3 || _equals_4);
      }
      if (_or_1) {
        return "BIT AND";
      }
      _xblockexpression = (_xifexpression);
    }
    return _xblockexpression;
  }
  
  public String text(final Shift e) {
    String _op = e.getOp();
    String _plus = ("shift : " + _op);
    return _plus;
  }
  
  public String text(final Comparison e) {
    String _op = e.getOp();
    return ("Comparison : " + _op);
  }
  
  public String text(final Plus e) {
    String _op = e.getOp();
    String _plus = (_op + ": ADD");
    return _plus;
  }
  
  public String text(final MinusImpl e) {
    String _op = e.getOp();
    String _plus = (_op + " : MINUS");
    return _plus;
  }
  
  public String text(final ArrayVarAccess e) {
    Array _prefix = e.getPrefix();
    String _name = _prefix.getName();
    String _plus = (_name + " : Array item");
    return _plus;
  }
  
  public String text(final StringLiteral e) {
    String _value = e.getValue();
    return _value;
  }
  
  public String text(final VariableRef e) {
    Variable _referencedVar = e.getReferencedVar();
    String _name = _referencedVar.getName();
    String _plus = (_name + " : Variable");
    return _plus;
  }
  
  public String text(final VariableOrConstantReference e) {
    Reference _ref = e.getRef();
    String _name = _ref.getName();
    String _plus = (_name + " : Variable");
    return _plus;
  }
  
  public String text(final BooleanLiteral e) {
    String _value = e.getValue();
    return _value;
  }
  
  public String text(final BooleanNegation e) {
    return "NOT";
  }
}
