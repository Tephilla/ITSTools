/**
 * generated by Xtext
 */
package fr.lip6.move.divine.ui.quickfix;

import com.google.common.base.Objects;
import fr.lip6.move.divine.divine.Array;
import fr.lip6.move.divine.divine.Channel;
import fr.lip6.move.divine.divine.Constant;
import fr.lip6.move.divine.divine.Expression;
import fr.lip6.move.divine.divine.Variable;
import fr.lip6.move.divine.validation.DivineValidator;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.ui.editor.model.edit.IModificationContext;
import org.eclipse.xtext.ui.editor.model.edit.ISemanticModification;
import org.eclipse.xtext.ui.editor.quickfix.DefaultQuickfixProvider;
import org.eclipse.xtext.ui.editor.quickfix.Fix;
import org.eclipse.xtext.ui.editor.quickfix.IssueResolutionAcceptor;
import org.eclipse.xtext.validation.Issue;
import org.eclipse.xtext.xbase.lib.IntegerRange;

/**
 * Custom quickfixes.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#quickfixes
 */
@SuppressWarnings("all")
public class DivineQuickfixProvider extends DefaultQuickfixProvider {
  /**
   * this method suggest to rename the variable , constant or array if their name is duplicated
   * change Var name from X to X_1
   */
  @Fix(DivineValidator.DUPLICATED_NAME)
  public void ChangeVariableName(final Issue issue, final IssueResolutionAcceptor acceptor) {
    final ISemanticModification _function = new ISemanticModification() {
      public void apply(final EObject element, final IModificationContext context) throws Exception {
        String SEP = "_1";
        if ((element instanceof Variable)) {
          Variable v = ((Variable) element);
          String _name = v.getName();
          String _plus = (_name + SEP);
          v.setName(_plus);
        } else {
          if ((element instanceof Array)) {
            Array array = ((Array) element);
            String _name_1 = array.getName();
            String _plus_1 = (_name_1 + SEP);
            array.setName(_plus_1);
          } else {
            if ((element instanceof Channel)) {
              Channel ch = ((Channel) element);
              String _name_2 = ch.getName();
              String _plus_2 = (_name_2 + SEP);
              ch.setName(_plus_2);
            } else {
              if ((element instanceof Constant)) {
                Constant t = ((Constant) element);
                String _name_3 = t.getName();
                String _plus_3 = (_name_3 + SEP);
                t.setName(_plus_3);
              } else {
                System.err.println("Not yet implemented");
                Class<? extends EObject> _class = element.getClass();
                String _name_4 = _class.getName();
                String _plus_4 = ("error source : " + _name_4);
                System.out.println(_plus_4);
              }
            }
          }
        }
      }
    };
    acceptor.accept(issue, "Change the Qualifier name ", "Choose other name", null, _function);
  }
  
  /**
   * Adapt the array size to match the array declared content size
   */
  @Fix(DivineValidator.INVALID_ARRAY_INIT_ARG)
  public void adapt_ArraySize_ToContent(final Issue issue, final IssueResolutionAcceptor acceptor) {
    final ISemanticModification _function = new ISemanticModification() {
      public void apply(final EObject element, final IModificationContext context) throws Exception {
        if ((element instanceof Array)) {
          Array array = ((Array) element);
          EList<Expression> _initValue = array.getInitValue();
          boolean _equals = Objects.equal(_initValue, null);
          if (_equals) {
            array.setSize(0);
          } else {
            EList<Expression> _initValue_1 = array.getInitValue();
            int _size = _initValue_1.size();
            array.setSize(_size);
          }
        } else {
          System.err.println("Not yet implemented");
          Class<? extends EObject> _class = element.getClass();
          String _name = _class.getName();
          String _plus = ("Class source error :" + _name);
          System.out.println(_plus);
        }
      }
    };
    acceptor.accept(issue, "Change array size to match content size ", "Change array size", null, _function);
  }
  
  @Fix(DivineValidator.INVALID_ARRAY_INIT_ARG)
  public void adapt_arrayContent_ToSize_(final Issue issue, final IssueResolutionAcceptor acceptor) {
    final ISemanticModification _function = new ISemanticModification() {
      public void apply(final EObject element, final IModificationContext context) throws Exception {
        if ((element instanceof Array)) {
          Array array = ((Array) element);
          int _size = array.getSize();
          EList<Expression> _initValue = array.getInitValue();
          int _size_1 = _initValue.size();
          int nbElementsToAdd = (_size - _size_1);
          String _plus = (Integer.valueOf(nbElementsToAdd) + "manquant");
          System.err.println(_plus);
          System.err.println("je suis la ");
          IntegerRange _upTo = new IntegerRange(0, nbElementsToAdd);
          for (final Integer i : _upTo) {
            {
              String _plus_1 = ("val" + i);
              String _plus_2 = (_plus_1 + "je suis la ");
              System.err.println(_plus_2);
              EList<Expression> _initValue_1 = array.getInitValue();
              Expression _get = _initValue_1.get(0);
              String _plus_3 = ("val" + _get);
              System.err.println(_plus_3);
              EList<Expression> _initValue_2 = array.getInitValue();
              EList<Expression> _initValue_3 = array.getInitValue();
              Expression _get_1 = _initValue_3.get(0);
              _initValue_2.add(_get_1);
            }
          }
          EList<Expression> _initValue_1 = array.getInitValue();
          EList<Expression> _initValue_2 = array.getInitValue();
          Expression _get = _initValue_2.get(0);
          _initValue_1.add(_get);
        } else {
          System.err.println("Not yet implemented");
          Class<? extends EObject> _class = element.getClass();
          String _name = _class.getName();
          String _plus_1 = ("class error : " + _name);
          System.out.println(_plus_1);
        }
      }
    };
    acceptor.accept(issue, "Add element to initial array values ", "Change array Content", null, _function);
  }
  
  /**
   * Adapt the array content and make it match the declared size
   */
  @Fix(DivineValidator.INVALID_ARRAY_SIZE)
  public void adapt_arrayContent_ToSize(final Issue issue, final IssueResolutionAcceptor acceptor) {
    final ISemanticModification _function = new ISemanticModification() {
      public void apply(final EObject element, final IModificationContext context) throws Exception {
        if ((element instanceof Array)) {
          Array array = ((Array) element);
          int _size = array.getSize();
          EList<Expression> _initValue = array.getInitValue();
          int _size_1 = _initValue.size();
          int nbElementsToAdd = (_size - _size_1);
          String _plus = (Integer.valueOf(nbElementsToAdd) + "manquant");
          System.err.println(_plus);
          System.err.println("je suis la ");
          IntegerRange _upTo = new IntegerRange(0, nbElementsToAdd);
          for (final Integer i : _upTo) {
            {
              String _plus_1 = ("val" + i);
              String _plus_2 = (_plus_1 + "je suis la ");
              System.err.println(_plus_2);
              EList<Expression> _initValue_1 = array.getInitValue();
              Expression _get = _initValue_1.get(0);
              String _plus_3 = ("val" + _get);
              System.err.println(_plus_3);
              EList<Expression> _initValue_2 = array.getInitValue();
              EList<Expression> _initValue_3 = array.getInitValue();
              Expression _get_1 = _initValue_3.get(0);
              _initValue_2.add(_get_1);
            }
          }
        } else {
          System.err.println("Not yet implemented");
          Class<? extends EObject> _class = element.getClass();
          String _name = _class.getName();
          String _plus_1 = ("class error : " + _name);
          System.out.println(_plus_1);
        }
      }
    };
    acceptor.accept(issue, "Add element to initial array values ", "Change array Content", null, _function);
  }
  
  @Fix(DivineValidator.INVALID_ARRAY_SIZE)
  public void adapt_ArraySize_ToContent_(final Issue issue, final IssueResolutionAcceptor acceptor) {
    final ISemanticModification _function = new ISemanticModification() {
      public void apply(final EObject element, final IModificationContext context) throws Exception {
        if ((element instanceof Array)) {
          Array array = ((Array) element);
          EList<Expression> _initValue = array.getInitValue();
          boolean _equals = Objects.equal(_initValue, null);
          if (_equals) {
            array.setSize(0);
          } else {
            EList<Expression> _initValue_1 = array.getInitValue();
            int _size = _initValue_1.size();
            array.setSize(_size);
          }
        } else {
          System.err.println("Not yet implemented");
          Class<? extends EObject> _class = element.getClass();
          String _name = _class.getName();
          String _plus = ("Class source error :" + _name);
          System.out.println(_plus);
        }
      }
    };
    acceptor.accept(issue, "Change array size to match content size ", "Change array size", null, _function);
  }
}
