/*
* generated by Xtext
*/
package fr.lip6.move.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import fr.lip6.move.services.TimedAutomataGrammarAccess;

public class TimedAutomataParser extends AbstractContentAssistParser {
	
	@Inject
	private TimedAutomataGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected fr.lip6.move.ui.contentassist.antlr.internal.InternalTimedAutomataParser createParser() {
		fr.lip6.move.ui.contentassist.antlr.internal.InternalTimedAutomataParser result = new fr.lip6.move.ui.contentassist.antlr.internal.InternalTimedAutomataParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getXTAAccess().getAlternatives_0(), "rule__XTA__Alternatives_0");
					put(grammarAccess.getInstantiableInSystemAccess().getAlternatives(), "rule__InstantiableInSystem__Alternatives");
					put(grammarAccess.getFormalDeclarationAccess().getAlternatives(), "rule__FormalDeclaration__Alternatives");
					put(grammarAccess.getTypeAccess().getAlternatives(), "rule__Type__Alternatives");
					put(grammarAccess.getBasicTypeAccess().getAlternatives(), "rule__BasicType__Alternatives");
					put(grammarAccess.getProcBodyAccess().getAlternatives_0(), "rule__ProcBody__Alternatives_0");
					put(grammarAccess.getSyncAccess().getAlternatives(), "rule__Sync__Alternatives");
					put(grammarAccess.getBitShiftAccess().getOpAlternatives_1_1_0(), "rule__BitShift__OpAlternatives_1_1_0");
					put(grammarAccess.getAdditionAccess().getOpAlternatives_1_1_0(), "rule__Addition__OpAlternatives_1_1_0");
					put(grammarAccess.getMultiplicationAccess().getOpAlternatives_1_1_0(), "rule__Multiplication__OpAlternatives_1_1_0");
					put(grammarAccess.getBitComplementAccess().getAlternatives(), "rule__BitComplement__Alternatives");
					put(grammarAccess.getPrimaryAccess().getAlternatives(), "rule__Primary__Alternatives");
					put(grammarAccess.getPrimaryAccess().getAlternatives_2(), "rule__Primary__Alternatives_2");
					put(grammarAccess.getNotAccess().getAlternatives(), "rule__Not__Alternatives");
					put(grammarAccess.getPrimaryBoolAccess().getAlternatives(), "rule__PrimaryBool__Alternatives");
					put(grammarAccess.getASSIGNMENTAccess().getAlternatives(), "rule__ASSIGNMENT__Alternatives");
					put(grammarAccess.getComparisonOperatorsAccess().getAlternatives(), "rule__ComparisonOperators__Alternatives");
					put(grammarAccess.getXTAAccess().getGroup(), "rule__XTA__Group__0");
					put(grammarAccess.getInstanceAccess().getGroup(), "rule__Instance__Group__0");
					put(grammarAccess.getInstanceAccess().getGroup_4(), "rule__Instance__Group_4__0");
					put(grammarAccess.getInstanceAccess().getGroup_4_1(), "rule__Instance__Group_4_1__0");
					put(grammarAccess.getSystemAccess().getGroup(), "rule__System__Group__0");
					put(grammarAccess.getSystemAccess().getGroup_2(), "rule__System__Group_2__0");
					put(grammarAccess.getProcDeclAccess().getGroup(), "rule__ProcDecl__Group__0");
					put(grammarAccess.getProcDeclAccess().getGroup_3(), "rule__ProcDecl__Group_3__0");
					put(grammarAccess.getProcDeclAccess().getGroup_3_1(), "rule__ProcDecl__Group_3_1__0");
					put(grammarAccess.getParameterAccess().getGroup(), "rule__Parameter__Group__0");
					put(grammarAccess.getTypeDeclAccess().getGroup(), "rule__TypeDecl__Group__0");
					put(grammarAccess.getChannelDeclAccess().getGroup(), "rule__ChannelDecl__Group__0");
					put(grammarAccess.getChannelDeclAccess().getGroup_2(), "rule__ChannelDecl__Group_2__0");
					put(grammarAccess.getChannelTypeAccess().getGroup(), "rule__ChannelType__Group__0");
					put(grammarAccess.getIntegerTypeAccess().getGroup(), "rule__IntegerType__Group__0");
					put(grammarAccess.getBoolTypeAccess().getGroup(), "rule__BoolType__Group__0");
					put(grammarAccess.getRangeTypeAccess().getGroup(), "rule__RangeType__Group__0");
					put(grammarAccess.getClockTypeAccess().getGroup(), "rule__ClockType__Group__0");
					put(grammarAccess.getProcBodyAccess().getGroup(), "rule__ProcBody__Group__0");
					put(grammarAccess.getProcBodyAccess().getGroup_3(), "rule__ProcBody__Group_3__0");
					put(grammarAccess.getProcBodyAccess().getGroup_5(), "rule__ProcBody__Group_5__0");
					put(grammarAccess.getProcBodyAccess().getGroup_5_2(), "rule__ProcBody__Group_5_2__0");
					put(grammarAccess.getProcBodyAccess().getGroup_6(), "rule__ProcBody__Group_6__0");
					put(grammarAccess.getProcBodyAccess().getGroup_6_2(), "rule__ProcBody__Group_6_2__0");
					put(grammarAccess.getProcBodyAccess().getGroup_10(), "rule__ProcBody__Group_10__0");
					put(grammarAccess.getProcBodyAccess().getGroup_10_2(), "rule__ProcBody__Group_10_2__0");
					put(grammarAccess.getStateDeclAccess().getGroup(), "rule__StateDecl__Group__0");
					put(grammarAccess.getStateDeclAccess().getGroup_1(), "rule__StateDecl__Group_1__0");
					put(grammarAccess.getTransitionAccess().getGroup(), "rule__Transition__Group__0");
					put(grammarAccess.getTransitionAccess().getGroup_4(), "rule__Transition__Group_4__0");
					put(grammarAccess.getSendAccess().getGroup(), "rule__Send__Group__0");
					put(grammarAccess.getRecvAccess().getGroup(), "rule__Recv__Group__0");
					put(grammarAccess.getAssignmentsAccess().getGroup(), "rule__Assignments__Group__0");
					put(grammarAccess.getAssignmentsAccess().getGroup_2(), "rule__Assignments__Group_2__0");
					put(grammarAccess.getAssignAccess().getGroup(), "rule__Assign__Group__0");
					put(grammarAccess.getVariableDeclAccess().getGroup(), "rule__VariableDecl__Group__0");
					put(grammarAccess.getVariableDeclAccess().getGroup_2(), "rule__VariableDecl__Group_2__0");
					put(grammarAccess.getDeclIdAccess().getGroup(), "rule__DeclId__Group__0");
					put(grammarAccess.getDeclIdAccess().getGroup_2(), "rule__DeclId__Group_2__0");
					put(grammarAccess.getArrayDeclAccess().getGroup(), "rule__ArrayDecl__Group__0");
					put(grammarAccess.getBitOrAccess().getGroup(), "rule__BitOr__Group__0");
					put(grammarAccess.getBitOrAccess().getGroup_1(), "rule__BitOr__Group_1__0");
					put(grammarAccess.getBitXorAccess().getGroup(), "rule__BitXor__Group__0");
					put(grammarAccess.getBitXorAccess().getGroup_1(), "rule__BitXor__Group_1__0");
					put(grammarAccess.getBitAndAccess().getGroup(), "rule__BitAnd__Group__0");
					put(grammarAccess.getBitAndAccess().getGroup_1(), "rule__BitAnd__Group_1__0");
					put(grammarAccess.getBitShiftAccess().getGroup(), "rule__BitShift__Group__0");
					put(grammarAccess.getBitShiftAccess().getGroup_1(), "rule__BitShift__Group_1__0");
					put(grammarAccess.getAdditionAccess().getGroup(), "rule__Addition__Group__0");
					put(grammarAccess.getAdditionAccess().getGroup_1(), "rule__Addition__Group_1__0");
					put(grammarAccess.getMultiplicationAccess().getGroup(), "rule__Multiplication__Group__0");
					put(grammarAccess.getMultiplicationAccess().getGroup_1(), "rule__Multiplication__Group_1__0");
					put(grammarAccess.getBitComplementAccess().getGroup_0(), "rule__BitComplement__Group_0__0");
					put(grammarAccess.getBitComplementAccess().getGroup_1(), "rule__BitComplement__Group_1__0");
					put(grammarAccess.getPowerAccess().getGroup(), "rule__Power__Group__0");
					put(grammarAccess.getPowerAccess().getGroup_1(), "rule__Power__Group_1__0");
					put(grammarAccess.getPrimaryAccess().getGroup_2_0(), "rule__Primary__Group_2_0__0");
					put(grammarAccess.getPrimaryAccess().getGroup_2_0_0(), "rule__Primary__Group_2_0_0__0");
					put(grammarAccess.getPrimaryAccess().getGroup_2_1(), "rule__Primary__Group_2_1__0");
					put(grammarAccess.getOrAccess().getGroup(), "rule__Or__Group__0");
					put(grammarAccess.getOrAccess().getGroup_1(), "rule__Or__Group_1__0");
					put(grammarAccess.getAndAccess().getGroup(), "rule__And__Group__0");
					put(grammarAccess.getAndAccess().getGroup_1(), "rule__And__Group_1__0");
					put(grammarAccess.getNotAccess().getGroup_0(), "rule__Not__Group_0__0");
					put(grammarAccess.getPrimaryBoolAccess().getGroup_3(), "rule__PrimaryBool__Group_3__0");
					put(grammarAccess.getComparisonAccess().getGroup(), "rule__Comparison__Group__0");
					put(grammarAccess.getTrueAccess().getGroup(), "rule__True__Group__0");
					put(grammarAccess.getFalseAccess().getGroup(), "rule__False__Group__0");
					put(grammarAccess.getXTAAccess().getVariablesAssignment_0_0(), "rule__XTA__VariablesAssignment_0_0");
					put(grammarAccess.getXTAAccess().getChannelsAssignment_0_1(), "rule__XTA__ChannelsAssignment_0_1");
					put(grammarAccess.getXTAAccess().getTypesAssignment_0_2(), "rule__XTA__TypesAssignment_0_2");
					put(grammarAccess.getXTAAccess().getTemplatesAssignment_0_3(), "rule__XTA__TemplatesAssignment_0_3");
					put(grammarAccess.getXTAAccess().getInstancesAssignment_1(), "rule__XTA__InstancesAssignment_1");
					put(grammarAccess.getXTAAccess().getSystemAssignment_2(), "rule__XTA__SystemAssignment_2");
					put(grammarAccess.getInstanceAccess().getNameAssignment_0(), "rule__Instance__NameAssignment_0");
					put(grammarAccess.getInstanceAccess().getTypeAssignment_2(), "rule__Instance__TypeAssignment_2");
					put(grammarAccess.getInstanceAccess().getArgsAssignment_4_0(), "rule__Instance__ArgsAssignment_4_0");
					put(grammarAccess.getInstanceAccess().getArgsAssignment_4_1_1(), "rule__Instance__ArgsAssignment_4_1_1");
					put(grammarAccess.getSystemAccess().getInstancesAssignment_1(), "rule__System__InstancesAssignment_1");
					put(grammarAccess.getSystemAccess().getInstancesAssignment_2_1(), "rule__System__InstancesAssignment_2_1");
					put(grammarAccess.getProcDeclAccess().getNameAssignment_1(), "rule__ProcDecl__NameAssignment_1");
					put(grammarAccess.getProcDeclAccess().getParamsAssignment_3_0(), "rule__ProcDecl__ParamsAssignment_3_0");
					put(grammarAccess.getProcDeclAccess().getParamsAssignment_3_1_1(), "rule__ProcDecl__ParamsAssignment_3_1_1");
					put(grammarAccess.getProcDeclAccess().getBodyAssignment_6(), "rule__ProcDecl__BodyAssignment_6");
					put(grammarAccess.getParameterAccess().getTypeAssignment_0(), "rule__Parameter__TypeAssignment_0");
					put(grammarAccess.getParameterAccess().getNameAssignment_1(), "rule__Parameter__NameAssignment_1");
					put(grammarAccess.getTypeDeclAccess().getTypeAssignment_1(), "rule__TypeDecl__TypeAssignment_1");
					put(grammarAccess.getTypeDeclAccess().getNameAssignment_2(), "rule__TypeDecl__NameAssignment_2");
					put(grammarAccess.getTypedefRefAccess().getRefAssignment(), "rule__TypedefRef__RefAssignment");
					put(grammarAccess.getChannelDeclAccess().getChansAssignment_1(), "rule__ChannelDecl__ChansAssignment_1");
					put(grammarAccess.getChannelDeclAccess().getChansAssignment_2_1(), "rule__ChannelDecl__ChansAssignment_2_1");
					put(grammarAccess.getChanIdAccess().getNameAssignment(), "rule__ChanId__NameAssignment");
					put(grammarAccess.getChannelTypeAccess().getUrgentAssignment_2(), "rule__ChannelType__UrgentAssignment_2");
					put(grammarAccess.getChannelTypeAccess().getBroadcastAssignment_3(), "rule__ChannelType__BroadcastAssignment_3");
					put(grammarAccess.getIntegerTypeAccess().getConstAssignment_1(), "rule__IntegerType__ConstAssignment_1");
					put(grammarAccess.getBoolTypeAccess().getConstAssignment_1(), "rule__BoolType__ConstAssignment_1");
					put(grammarAccess.getRangeTypeAccess().getConstAssignment_0(), "rule__RangeType__ConstAssignment_0");
					put(grammarAccess.getRangeTypeAccess().getMinAssignment_3(), "rule__RangeType__MinAssignment_3");
					put(grammarAccess.getRangeTypeAccess().getMaxAssignment_5(), "rule__RangeType__MaxAssignment_5");
					put(grammarAccess.getProcBodyAccess().getVariablesAssignment_0_0(), "rule__ProcBody__VariablesAssignment_0_0");
					put(grammarAccess.getProcBodyAccess().getTypesAssignment_0_1(), "rule__ProcBody__TypesAssignment_0_1");
					put(grammarAccess.getProcBodyAccess().getStatesAssignment_2(), "rule__ProcBody__StatesAssignment_2");
					put(grammarAccess.getProcBodyAccess().getStatesAssignment_3_1(), "rule__ProcBody__StatesAssignment_3_1");
					put(grammarAccess.getProcBodyAccess().getCommitStatesAssignment_5_1(), "rule__ProcBody__CommitStatesAssignment_5_1");
					put(grammarAccess.getProcBodyAccess().getCommitStatesAssignment_5_2_1(), "rule__ProcBody__CommitStatesAssignment_5_2_1");
					put(grammarAccess.getProcBodyAccess().getUrgentStatesAssignment_6_1(), "rule__ProcBody__UrgentStatesAssignment_6_1");
					put(grammarAccess.getProcBodyAccess().getUrgentStatesAssignment_6_2_1(), "rule__ProcBody__UrgentStatesAssignment_6_2_1");
					put(grammarAccess.getProcBodyAccess().getInitStateAssignment_8(), "rule__ProcBody__InitStateAssignment_8");
					put(grammarAccess.getProcBodyAccess().getTransitionsAssignment_10_1(), "rule__ProcBody__TransitionsAssignment_10_1");
					put(grammarAccess.getProcBodyAccess().getTransitionsAssignment_10_2_1(), "rule__ProcBody__TransitionsAssignment_10_2_1");
					put(grammarAccess.getStateDeclAccess().getNameAssignment_0(), "rule__StateDecl__NameAssignment_0");
					put(grammarAccess.getStateDeclAccess().getInvariantAssignment_1_1(), "rule__StateDecl__InvariantAssignment_1_1");
					put(grammarAccess.getTransitionAccess().getSrcAssignment_0(), "rule__Transition__SrcAssignment_0");
					put(grammarAccess.getTransitionAccess().getDestAssignment_2(), "rule__Transition__DestAssignment_2");
					put(grammarAccess.getTransitionAccess().getGuardAssignment_4_1(), "rule__Transition__GuardAssignment_4_1");
					put(grammarAccess.getTransitionAccess().getSyncAssignment_5(), "rule__Transition__SyncAssignment_5");
					put(grammarAccess.getTransitionAccess().getAssignAssignment_6(), "rule__Transition__AssignAssignment_6");
					put(grammarAccess.getSendAccess().getChannelAssignment_1(), "rule__Send__ChannelAssignment_1");
					put(grammarAccess.getRecvAccess().getChannelAssignment_1(), "rule__Recv__ChannelAssignment_1");
					put(grammarAccess.getAssignmentsAccess().getAssignsAssignment_1(), "rule__Assignments__AssignsAssignment_1");
					put(grammarAccess.getAssignmentsAccess().getAssignsAssignment_2_1(), "rule__Assignments__AssignsAssignment_2_1");
					put(grammarAccess.getAssignAccess().getLhsAssignment_0(), "rule__Assign__LhsAssignment_0");
					put(grammarAccess.getAssignAccess().getRhsAssignment_2(), "rule__Assign__RhsAssignment_2");
					put(grammarAccess.getVariableDeclAccess().getTypeAssignment_0(), "rule__VariableDecl__TypeAssignment_0");
					put(grammarAccess.getVariableDeclAccess().getDeclidAssignment_1(), "rule__VariableDecl__DeclidAssignment_1");
					put(grammarAccess.getVariableDeclAccess().getDeclidAssignment_2_1(), "rule__VariableDecl__DeclidAssignment_2_1");
					put(grammarAccess.getDeclIdAccess().getNameAssignment_0(), "rule__DeclId__NameAssignment_0");
					put(grammarAccess.getDeclIdAccess().getArraysAssignment_1(), "rule__DeclId__ArraysAssignment_1");
					put(grammarAccess.getDeclIdAccess().getInitAssignment_2_1(), "rule__DeclId__InitAssignment_2_1");
					put(grammarAccess.getInitialiserAccess().getExprAssignment(), "rule__Initialiser__ExprAssignment");
					put(grammarAccess.getArrayDeclAccess().getSizeAssignment_1(), "rule__ArrayDecl__SizeAssignment_1");
					put(grammarAccess.getBitOrAccess().getOpAssignment_1_1(), "rule__BitOr__OpAssignment_1_1");
					put(grammarAccess.getBitOrAccess().getRightAssignment_1_2(), "rule__BitOr__RightAssignment_1_2");
					put(grammarAccess.getBitXorAccess().getOpAssignment_1_1(), "rule__BitXor__OpAssignment_1_1");
					put(grammarAccess.getBitXorAccess().getRightAssignment_1_2(), "rule__BitXor__RightAssignment_1_2");
					put(grammarAccess.getBitAndAccess().getOpAssignment_1_1(), "rule__BitAnd__OpAssignment_1_1");
					put(grammarAccess.getBitAndAccess().getRightAssignment_1_2(), "rule__BitAnd__RightAssignment_1_2");
					put(grammarAccess.getBitShiftAccess().getOpAssignment_1_1(), "rule__BitShift__OpAssignment_1_1");
					put(grammarAccess.getBitShiftAccess().getRightAssignment_1_2(), "rule__BitShift__RightAssignment_1_2");
					put(grammarAccess.getAdditionAccess().getOpAssignment_1_1(), "rule__Addition__OpAssignment_1_1");
					put(grammarAccess.getAdditionAccess().getRightAssignment_1_2(), "rule__Addition__RightAssignment_1_2");
					put(grammarAccess.getMultiplicationAccess().getOpAssignment_1_1(), "rule__Multiplication__OpAssignment_1_1");
					put(grammarAccess.getMultiplicationAccess().getRightAssignment_1_2(), "rule__Multiplication__RightAssignment_1_2");
					put(grammarAccess.getPowerAccess().getOpAssignment_1_1(), "rule__Power__OpAssignment_1_1");
					put(grammarAccess.getPowerAccess().getRightAssignment_1_2(), "rule__Power__RightAssignment_1_2");
					put(grammarAccess.getVarAccessAccess().getRefAssignment(), "rule__VarAccess__RefAssignment");
					put(grammarAccess.getWrapBoolExprAccess().getValueAssignment(), "rule__WrapBoolExpr__ValueAssignment");
					put(grammarAccess.getConstantAccess().getValueAssignment(), "rule__Constant__ValueAssignment");
					put(grammarAccess.getOrAccess().getRightAssignment_1_2(), "rule__Or__RightAssignment_1_2");
					put(grammarAccess.getAndAccess().getRightAssignment_1_2(), "rule__And__RightAssignment_1_2");
					put(grammarAccess.getNotAccess().getValueAssignment_0_2(), "rule__Not__ValueAssignment_0_2");
					put(grammarAccess.getComparisonAccess().getLeftAssignment_0(), "rule__Comparison__LeftAssignment_0");
					put(grammarAccess.getComparisonAccess().getOperatorAssignment_1(), "rule__Comparison__OperatorAssignment_1");
					put(grammarAccess.getComparisonAccess().getRightAssignment_2(), "rule__Comparison__RightAssignment_2");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			fr.lip6.move.ui.contentassist.antlr.internal.InternalTimedAutomataParser typedParser = (fr.lip6.move.ui.contentassist.antlr.internal.InternalTimedAutomataParser) parser;
			typedParser.entryRuleXTA();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public TimedAutomataGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(TimedAutomataGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
