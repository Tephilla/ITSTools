/*
* generated by Xtext
*/
grammar InternalTimedAutomata;

options {
	superClass=AbstractInternalContentAssistParser;
	backtrack=true;
	
}

@lexer::header {
package fr.lip6.move.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package fr.lip6.move.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import fr.lip6.move.services.TimedAutomataGrammarAccess;

}

@parser::members {
 
 	private TimedAutomataGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(TimedAutomataGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleXTA
entryRuleXTA 
:
{ before(grammarAccess.getXTARule()); }
	 ruleXTA
{ after(grammarAccess.getXTARule()); } 
	 EOF 
;

// Rule XTA
ruleXTA
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getXTAAccess().getGroup()); }
(rule__XTA__Group__0)
{ after(grammarAccess.getXTAAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}





// Entry rule entryRuleInstance
entryRuleInstance 
:
{ before(grammarAccess.getInstanceRule()); }
	 ruleInstance
{ after(grammarAccess.getInstanceRule()); } 
	 EOF 
;

// Rule Instance
ruleInstance
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getInstanceAccess().getGroup()); }
(rule__Instance__Group__0)
{ after(grammarAccess.getInstanceAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSystem
entryRuleSystem 
:
{ before(grammarAccess.getSystemRule()); }
	 ruleSystem
{ after(grammarAccess.getSystemRule()); } 
	 EOF 
;

// Rule System
ruleSystem
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSystemAccess().getGroup()); }
(rule__System__Group__0)
{ after(grammarAccess.getSystemAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleProcDecl
entryRuleProcDecl 
:
{ before(grammarAccess.getProcDeclRule()); }
	 ruleProcDecl
{ after(grammarAccess.getProcDeclRule()); } 
	 EOF 
;

// Rule ProcDecl
ruleProcDecl
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getProcDeclAccess().getGroup()); }
(rule__ProcDecl__Group__0)
{ after(grammarAccess.getProcDeclAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}





// Entry rule entryRuleParameter
entryRuleParameter 
:
{ before(grammarAccess.getParameterRule()); }
	 ruleParameter
{ after(grammarAccess.getParameterRule()); } 
	 EOF 
;

// Rule Parameter
ruleParameter
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getParameterAccess().getGroup()); }
(rule__Parameter__Group__0)
{ after(grammarAccess.getParameterAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTypeDecl
entryRuleTypeDecl 
:
{ before(grammarAccess.getTypeDeclRule()); }
	 ruleTypeDecl
{ after(grammarAccess.getTypeDeclRule()); } 
	 EOF 
;

// Rule TypeDecl
ruleTypeDecl
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTypeDeclAccess().getGroup()); }
(rule__TypeDecl__Group__0)
{ after(grammarAccess.getTypeDeclAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleType
entryRuleType 
:
{ before(grammarAccess.getTypeRule()); }
	 ruleType
{ after(grammarAccess.getTypeRule()); } 
	 EOF 
;

// Rule Type
ruleType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTypeAccess().getAlternatives()); }
(rule__Type__Alternatives)
{ after(grammarAccess.getTypeAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBasicType
entryRuleBasicType 
:
{ before(grammarAccess.getBasicTypeRule()); }
	 ruleBasicType
{ after(grammarAccess.getBasicTypeRule()); } 
	 EOF 
;

// Rule BasicType
ruleBasicType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBasicTypeAccess().getAlternatives()); }
(rule__BasicType__Alternatives)
{ after(grammarAccess.getBasicTypeAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTypedefRef
entryRuleTypedefRef 
:
{ before(grammarAccess.getTypedefRefRule()); }
	 ruleTypedefRef
{ after(grammarAccess.getTypedefRefRule()); } 
	 EOF 
;

// Rule TypedefRef
ruleTypedefRef
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTypedefRefAccess().getRefAssignment()); }
(rule__TypedefRef__RefAssignment)
{ after(grammarAccess.getTypedefRefAccess().getRefAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleChannelDecl
entryRuleChannelDecl 
:
{ before(grammarAccess.getChannelDeclRule()); }
	 ruleChannelDecl
{ after(grammarAccess.getChannelDeclRule()); } 
	 EOF 
;

// Rule ChannelDecl
ruleChannelDecl
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getChannelDeclAccess().getGroup()); }
(rule__ChannelDecl__Group__0)
{ after(grammarAccess.getChannelDeclAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleChanId
entryRuleChanId 
:
{ before(grammarAccess.getChanIdRule()); }
	 ruleChanId
{ after(grammarAccess.getChanIdRule()); } 
	 EOF 
;

// Rule ChanId
ruleChanId
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getChanIdAccess().getNameAssignment()); }
(rule__ChanId__NameAssignment)
{ after(grammarAccess.getChanIdAccess().getNameAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleChannelType
entryRuleChannelType 
:
{ before(grammarAccess.getChannelTypeRule()); }
	 ruleChannelType
{ after(grammarAccess.getChannelTypeRule()); } 
	 EOF 
;

// Rule ChannelType
ruleChannelType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getChannelTypeAccess().getGroup()); }
(rule__ChannelType__Group__0)
{ after(grammarAccess.getChannelTypeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIntegerType
entryRuleIntegerType 
:
{ before(grammarAccess.getIntegerTypeRule()); }
	 ruleIntegerType
{ after(grammarAccess.getIntegerTypeRule()); } 
	 EOF 
;

// Rule IntegerType
ruleIntegerType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIntegerTypeAccess().getGroup()); }
(rule__IntegerType__Group__0)
{ after(grammarAccess.getIntegerTypeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBoolType
entryRuleBoolType 
:
{ before(grammarAccess.getBoolTypeRule()); }
	 ruleBoolType
{ after(grammarAccess.getBoolTypeRule()); } 
	 EOF 
;

// Rule BoolType
ruleBoolType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBoolTypeAccess().getGroup()); }
(rule__BoolType__Group__0)
{ after(grammarAccess.getBoolTypeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRangeType
entryRuleRangeType 
:
{ before(grammarAccess.getRangeTypeRule()); }
	 ruleRangeType
{ after(grammarAccess.getRangeTypeRule()); } 
	 EOF 
;

// Rule RangeType
ruleRangeType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRangeTypeAccess().getGroup()); }
(rule__RangeType__Group__0)
{ after(grammarAccess.getRangeTypeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleClockType
entryRuleClockType 
:
{ before(grammarAccess.getClockTypeRule()); }
	 ruleClockType
{ after(grammarAccess.getClockTypeRule()); } 
	 EOF 
;

// Rule ClockType
ruleClockType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getClockTypeAccess().getGroup()); }
(rule__ClockType__Group__0)
{ after(grammarAccess.getClockTypeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleProcBody
entryRuleProcBody 
:
{ before(grammarAccess.getProcBodyRule()); }
	 ruleProcBody
{ after(grammarAccess.getProcBodyRule()); } 
	 EOF 
;

// Rule ProcBody
ruleProcBody
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getProcBodyAccess().getGroup()); }
(rule__ProcBody__Group__0)
{ after(grammarAccess.getProcBodyAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStateDecl
entryRuleStateDecl 
:
{ before(grammarAccess.getStateDeclRule()); }
	 ruleStateDecl
{ after(grammarAccess.getStateDeclRule()); } 
	 EOF 
;

// Rule StateDecl
ruleStateDecl
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStateDeclAccess().getGroup()); }
(rule__StateDecl__Group__0)
{ after(grammarAccess.getStateDeclAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTransition
entryRuleTransition 
:
{ before(grammarAccess.getTransitionRule()); }
	 ruleTransition
{ after(grammarAccess.getTransitionRule()); } 
	 EOF 
;

// Rule Transition
ruleTransition
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTransitionAccess().getGroup()); }
(rule__Transition__Group__0)
{ after(grammarAccess.getTransitionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSync
entryRuleSync 
:
{ before(grammarAccess.getSyncRule()); }
	 ruleSync
{ after(grammarAccess.getSyncRule()); } 
	 EOF 
;

// Rule Sync
ruleSync
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSyncAccess().getAlternatives()); }
(rule__Sync__Alternatives)
{ after(grammarAccess.getSyncAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSend
entryRuleSend 
:
{ before(grammarAccess.getSendRule()); }
	 ruleSend
{ after(grammarAccess.getSendRule()); } 
	 EOF 
;

// Rule Send
ruleSend
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSendAccess().getGroup()); }
(rule__Send__Group__0)
{ after(grammarAccess.getSendAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRecv
entryRuleRecv 
:
{ before(grammarAccess.getRecvRule()); }
	 ruleRecv
{ after(grammarAccess.getRecvRule()); } 
	 EOF 
;

// Rule Recv
ruleRecv
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRecvAccess().getGroup()); }
(rule__Recv__Group__0)
{ after(grammarAccess.getRecvAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAssignments
entryRuleAssignments 
:
{ before(grammarAccess.getAssignmentsRule()); }
	 ruleAssignments
{ after(grammarAccess.getAssignmentsRule()); } 
	 EOF 
;

// Rule Assignments
ruleAssignments
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAssignmentsAccess().getGroup()); }
(rule__Assignments__Group__0)
{ after(grammarAccess.getAssignmentsAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAssign
entryRuleAssign 
:
{ before(grammarAccess.getAssignRule()); }
	 ruleAssign
{ after(grammarAccess.getAssignRule()); } 
	 EOF 
;

// Rule Assign
ruleAssign
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAssignAccess().getGroup()); }
(rule__Assign__Group__0)
{ after(grammarAccess.getAssignAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVariableDecl
entryRuleVariableDecl 
:
{ before(grammarAccess.getVariableDeclRule()); }
	 ruleVariableDecl
{ after(grammarAccess.getVariableDeclRule()); } 
	 EOF 
;

// Rule VariableDecl
ruleVariableDecl
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVariableDeclAccess().getGroup()); }
(rule__VariableDecl__Group__0)
{ after(grammarAccess.getVariableDeclAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDeclId
entryRuleDeclId 
:
{ before(grammarAccess.getDeclIdRule()); }
	 ruleDeclId
{ after(grammarAccess.getDeclIdRule()); } 
	 EOF 
;

// Rule DeclId
ruleDeclId
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDeclIdAccess().getGroup()); }
(rule__DeclId__Group__0)
{ after(grammarAccess.getDeclIdAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleInitialiser
entryRuleInitialiser 
:
{ before(grammarAccess.getInitialiserRule()); }
	 ruleInitialiser
{ after(grammarAccess.getInitialiserRule()); } 
	 EOF 
;

// Rule Initialiser
ruleInitialiser
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getInitialiserAccess().getExprAssignment()); }
(rule__Initialiser__ExprAssignment)
{ after(grammarAccess.getInitialiserAccess().getExprAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleArrayDecl
entryRuleArrayDecl 
:
{ before(grammarAccess.getArrayDeclRule()); }
	 ruleArrayDecl
{ after(grammarAccess.getArrayDeclRule()); } 
	 EOF 
;

// Rule ArrayDecl
ruleArrayDecl
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getArrayDeclAccess().getGroup()); }
(rule__ArrayDecl__Group__0)
{ after(grammarAccess.getArrayDeclAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBitOr
entryRuleBitOr 
:
{ before(grammarAccess.getBitOrRule()); }
	 ruleBitOr
{ after(grammarAccess.getBitOrRule()); } 
	 EOF 
;

// Rule BitOr
ruleBitOr
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBitOrAccess().getGroup()); }
(rule__BitOr__Group__0)
{ after(grammarAccess.getBitOrAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBitXor
entryRuleBitXor 
:
{ before(grammarAccess.getBitXorRule()); }
	 ruleBitXor
{ after(grammarAccess.getBitXorRule()); } 
	 EOF 
;

// Rule BitXor
ruleBitXor
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBitXorAccess().getGroup()); }
(rule__BitXor__Group__0)
{ after(grammarAccess.getBitXorAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBitAnd
entryRuleBitAnd 
:
{ before(grammarAccess.getBitAndRule()); }
	 ruleBitAnd
{ after(grammarAccess.getBitAndRule()); } 
	 EOF 
;

// Rule BitAnd
ruleBitAnd
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBitAndAccess().getGroup()); }
(rule__BitAnd__Group__0)
{ after(grammarAccess.getBitAndAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBitShift
entryRuleBitShift 
:
{ before(grammarAccess.getBitShiftRule()); }
	 ruleBitShift
{ after(grammarAccess.getBitShiftRule()); } 
	 EOF 
;

// Rule BitShift
ruleBitShift
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBitShiftAccess().getGroup()); }
(rule__BitShift__Group__0)
{ after(grammarAccess.getBitShiftAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAddition
entryRuleAddition 
:
{ before(grammarAccess.getAdditionRule()); }
	 ruleAddition
{ after(grammarAccess.getAdditionRule()); } 
	 EOF 
;

// Rule Addition
ruleAddition
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAdditionAccess().getGroup()); }
(rule__Addition__Group__0)
{ after(grammarAccess.getAdditionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMultiplication
entryRuleMultiplication 
:
{ before(grammarAccess.getMultiplicationRule()); }
	 ruleMultiplication
{ after(grammarAccess.getMultiplicationRule()); } 
	 EOF 
;

// Rule Multiplication
ruleMultiplication
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMultiplicationAccess().getGroup()); }
(rule__Multiplication__Group__0)
{ after(grammarAccess.getMultiplicationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBitComplement
entryRuleBitComplement 
:
{ before(grammarAccess.getBitComplementRule()); }
	 ruleBitComplement
{ after(grammarAccess.getBitComplementRule()); } 
	 EOF 
;

// Rule BitComplement
ruleBitComplement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBitComplementAccess().getAlternatives()); }
(rule__BitComplement__Alternatives)
{ after(grammarAccess.getBitComplementAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePower
entryRulePower 
:
{ before(grammarAccess.getPowerRule()); }
	 rulePower
{ after(grammarAccess.getPowerRule()); } 
	 EOF 
;

// Rule Power
rulePower
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPowerAccess().getGroup()); }
(rule__Power__Group__0)
{ after(grammarAccess.getPowerAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePrimary
entryRulePrimary 
:
{ before(grammarAccess.getPrimaryRule()); }
	 rulePrimary
{ after(grammarAccess.getPrimaryRule()); } 
	 EOF 
;

// Rule Primary
rulePrimary
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPrimaryAccess().getAlternatives()); }
(rule__Primary__Alternatives)
{ after(grammarAccess.getPrimaryAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleConstRef
entryRuleConstRef 
:
{ before(grammarAccess.getConstRefRule()); }
	 ruleConstRef
{ after(grammarAccess.getConstRefRule()); } 
	 EOF 
;

// Rule ConstRef
ruleConstRef
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getConstRefAccess().getConstantParserRuleCall()); }
	ruleConstant
{ after(grammarAccess.getConstRefAccess().getConstantParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVarAccess
entryRuleVarAccess 
:
{ before(grammarAccess.getVarAccessRule()); }
	 ruleVarAccess
{ after(grammarAccess.getVarAccessRule()); } 
	 EOF 
;

// Rule VarAccess
ruleVarAccess
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVarAccessAccess().getRefAssignment()); }
(rule__VarAccess__RefAssignment)
{ after(grammarAccess.getVarAccessAccess().getRefAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleWrapBoolExpr
entryRuleWrapBoolExpr 
:
{ before(grammarAccess.getWrapBoolExprRule()); }
	 ruleWrapBoolExpr
{ after(grammarAccess.getWrapBoolExprRule()); } 
	 EOF 
;

// Rule WrapBoolExpr
ruleWrapBoolExpr
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getWrapBoolExprAccess().getValueAssignment()); }
(rule__WrapBoolExpr__ValueAssignment)
{ after(grammarAccess.getWrapBoolExprAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleConstant
entryRuleConstant 
:
{ before(grammarAccess.getConstantRule()); }
	 ruleConstant
{ after(grammarAccess.getConstantRule()); } 
	 EOF 
;

// Rule Constant
ruleConstant
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getConstantAccess().getValueAssignment()); }
(rule__Constant__ValueAssignment)
{ after(grammarAccess.getConstantAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOr
entryRuleOr 
:
{ before(grammarAccess.getOrRule()); }
	 ruleOr
{ after(grammarAccess.getOrRule()); } 
	 EOF 
;

// Rule Or
ruleOr
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getOrAccess().getGroup()); }
(rule__Or__Group__0)
{ after(grammarAccess.getOrAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAnd
entryRuleAnd 
:
{ before(grammarAccess.getAndRule()); }
	 ruleAnd
{ after(grammarAccess.getAndRule()); } 
	 EOF 
;

// Rule And
ruleAnd
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAndAccess().getGroup()); }
(rule__And__Group__0)
{ after(grammarAccess.getAndAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNot
entryRuleNot 
:
{ before(grammarAccess.getNotRule()); }
	 ruleNot
{ after(grammarAccess.getNotRule()); } 
	 EOF 
;

// Rule Not
ruleNot
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNotAccess().getAlternatives()); }
(rule__Not__Alternatives)
{ after(grammarAccess.getNotAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePrimaryBool
entryRulePrimaryBool 
:
{ before(grammarAccess.getPrimaryBoolRule()); }
	 rulePrimaryBool
{ after(grammarAccess.getPrimaryBoolRule()); } 
	 EOF 
;

// Rule PrimaryBool
rulePrimaryBool
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPrimaryBoolAccess().getAlternatives()); }
(rule__PrimaryBool__Alternatives)
{ after(grammarAccess.getPrimaryBoolAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleComparison
entryRuleComparison 
:
{ before(grammarAccess.getComparisonRule()); }
	 ruleComparison
{ after(grammarAccess.getComparisonRule()); } 
	 EOF 
;

// Rule Comparison
ruleComparison
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getComparisonAccess().getGroup()); }
(rule__Comparison__Group__0)
{ after(grammarAccess.getComparisonAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTrue
entryRuleTrue 
:
{ before(grammarAccess.getTrueRule()); }
	 ruleTrue
{ after(grammarAccess.getTrueRule()); } 
	 EOF 
;

// Rule True
ruleTrue
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTrueAccess().getGroup()); }
(rule__True__Group__0)
{ after(grammarAccess.getTrueAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFalse
entryRuleFalse 
:
{ before(grammarAccess.getFalseRule()); }
	 ruleFalse
{ after(grammarAccess.getFalseRule()); } 
	 EOF 
;

// Rule False
ruleFalse
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFalseAccess().getGroup()); }
(rule__False__Group__0)
{ after(grammarAccess.getFalseAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleASSIGNMENT
entryRuleASSIGNMENT 
:
{ before(grammarAccess.getASSIGNMENTRule()); }
	 ruleASSIGNMENT
{ after(grammarAccess.getASSIGNMENTRule()); } 
	 EOF 
;

// Rule ASSIGNMENT
ruleASSIGNMENT
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getASSIGNMENTAccess().getAlternatives()); }
(rule__ASSIGNMENT__Alternatives)
{ after(grammarAccess.getASSIGNMENTAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}




// Rule ComparisonOperators
ruleComparisonOperators
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonOperatorsAccess().getAlternatives()); }
(rule__ComparisonOperators__Alternatives)
{ after(grammarAccess.getComparisonOperatorsAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__XTA__Alternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXTAAccess().getVariablesAssignment_0_0()); }
(rule__XTA__VariablesAssignment_0_0)
{ after(grammarAccess.getXTAAccess().getVariablesAssignment_0_0()); }
)

    |(
{ before(grammarAccess.getXTAAccess().getChannelsAssignment_0_1()); }
(rule__XTA__ChannelsAssignment_0_1)
{ after(grammarAccess.getXTAAccess().getChannelsAssignment_0_1()); }
)

    |(
{ before(grammarAccess.getXTAAccess().getTypesAssignment_0_2()); }
(rule__XTA__TypesAssignment_0_2)
{ after(grammarAccess.getXTAAccess().getTypesAssignment_0_2()); }
)

    |(
{ before(grammarAccess.getXTAAccess().getTemplatesAssignment_0_3()); }
(rule__XTA__TemplatesAssignment_0_3)
{ after(grammarAccess.getXTAAccess().getTemplatesAssignment_0_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Type__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAccess().getBasicTypeParserRuleCall_0()); }
	ruleBasicType
{ after(grammarAccess.getTypeAccess().getBasicTypeParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getTypeAccess().getTypedefRefParserRuleCall_1()); }
	ruleTypedefRef
{ after(grammarAccess.getTypeAccess().getTypedefRefParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BasicType__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBasicTypeAccess().getIntegerTypeParserRuleCall_0()); }
	ruleIntegerType
{ after(grammarAccess.getBasicTypeAccess().getIntegerTypeParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getBasicTypeAccess().getBoolTypeParserRuleCall_1()); }
	ruleBoolType
{ after(grammarAccess.getBasicTypeAccess().getBoolTypeParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getBasicTypeAccess().getClockTypeParserRuleCall_2()); }
	ruleClockType
{ after(grammarAccess.getBasicTypeAccess().getClockTypeParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getBasicTypeAccess().getRangeTypeParserRuleCall_3()); }
	ruleRangeType
{ after(grammarAccess.getBasicTypeAccess().getRangeTypeParserRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ProcBody__Alternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcBodyAccess().getVariablesAssignment_0_0()); }
(rule__ProcBody__VariablesAssignment_0_0)
{ after(grammarAccess.getProcBodyAccess().getVariablesAssignment_0_0()); }
)

    |(
{ before(grammarAccess.getProcBodyAccess().getTypesAssignment_0_1()); }
(rule__ProcBody__TypesAssignment_0_1)
{ after(grammarAccess.getProcBodyAccess().getTypesAssignment_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Sync__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSyncAccess().getSendParserRuleCall_0()); }
	ruleSend
{ after(grammarAccess.getSyncAccess().getSendParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getSyncAccess().getRecvParserRuleCall_1()); }
	ruleRecv
{ after(grammarAccess.getSyncAccess().getRecvParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BitShift__OpAlternatives_1_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBitShiftAccess().getOpLessThanSignLessThanSignKeyword_1_1_0_0()); }

	'<<' 

{ after(grammarAccess.getBitShiftAccess().getOpLessThanSignLessThanSignKeyword_1_1_0_0()); }
)

    |(
{ before(grammarAccess.getBitShiftAccess().getOpGreaterThanSignGreaterThanSignKeyword_1_1_0_1()); }

	'>>' 

{ after(grammarAccess.getBitShiftAccess().getOpGreaterThanSignGreaterThanSignKeyword_1_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__OpAlternatives_1_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionAccess().getOpPlusSignKeyword_1_1_0_0()); }

	'+' 

{ after(grammarAccess.getAdditionAccess().getOpPlusSignKeyword_1_1_0_0()); }
)

    |(
{ before(grammarAccess.getAdditionAccess().getOpHyphenMinusKeyword_1_1_0_1()); }

	'-' 

{ after(grammarAccess.getAdditionAccess().getOpHyphenMinusKeyword_1_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__OpAlternatives_1_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationAccess().getOpSolidusKeyword_1_1_0_0()); }

	'/' 

{ after(grammarAccess.getMultiplicationAccess().getOpSolidusKeyword_1_1_0_0()); }
)

    |(
{ before(grammarAccess.getMultiplicationAccess().getOpAsteriskKeyword_1_1_0_1()); }

	'*' 

{ after(grammarAccess.getMultiplicationAccess().getOpAsteriskKeyword_1_1_0_1()); }
)

    |(
{ before(grammarAccess.getMultiplicationAccess().getOpPercentSignKeyword_1_1_0_2()); }

	'%' 

{ after(grammarAccess.getMultiplicationAccess().getOpPercentSignKeyword_1_1_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BitComplement__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBitComplementAccess().getGroup_0()); }
(rule__BitComplement__Group_0__0)
{ after(grammarAccess.getBitComplementAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getBitComplementAccess().getGroup_1()); }
(rule__BitComplement__Group_1__0)
{ after(grammarAccess.getBitComplementAccess().getGroup_1()); }
)

    |(
{ before(grammarAccess.getBitComplementAccess().getPowerParserRuleCall_2()); }
	rulePower
{ after(grammarAccess.getBitComplementAccess().getPowerParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryAccess().getVarAccessParserRuleCall_0()); }
	ruleVarAccess
{ after(grammarAccess.getPrimaryAccess().getVarAccessParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getPrimaryAccess().getConstRefParserRuleCall_1()); }
	ruleConstRef
{ after(grammarAccess.getPrimaryAccess().getConstRefParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getPrimaryAccess().getAlternatives_2()); }
(rule__Primary__Alternatives_2)
{ after(grammarAccess.getPrimaryAccess().getAlternatives_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Alternatives_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryAccess().getGroup_2_0()); }
(rule__Primary__Group_2_0__0)
{ after(grammarAccess.getPrimaryAccess().getGroup_2_0()); }
)

    |(
{ before(grammarAccess.getPrimaryAccess().getGroup_2_1()); }
(rule__Primary__Group_2_1__0)
{ after(grammarAccess.getPrimaryAccess().getGroup_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Not__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNotAccess().getGroup_0()); }
(rule__Not__Group_0__0)
{ after(grammarAccess.getNotAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getNotAccess().getPrimaryBoolParserRuleCall_1()); }
	rulePrimaryBool
{ after(grammarAccess.getNotAccess().getPrimaryBoolParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryBool__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryBoolAccess().getTrueParserRuleCall_0()); }
	ruleTrue
{ after(grammarAccess.getPrimaryBoolAccess().getTrueParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getPrimaryBoolAccess().getFalseParserRuleCall_1()); }
	ruleFalse
{ after(grammarAccess.getPrimaryBoolAccess().getFalseParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getPrimaryBoolAccess().getComparisonParserRuleCall_2()); }
(	ruleComparison)
{ after(grammarAccess.getPrimaryBoolAccess().getComparisonParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getPrimaryBoolAccess().getGroup_3()); }
(rule__PrimaryBool__Group_3__0)
{ after(grammarAccess.getPrimaryBoolAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ASSIGNMENT__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getASSIGNMENTAccess().getEqualsSignKeyword_0()); }

	'=' 

{ after(grammarAccess.getASSIGNMENTAccess().getEqualsSignKeyword_0()); }
)

    |(
{ before(grammarAccess.getASSIGNMENTAccess().getColonEqualsSignKeyword_1()); }

	':=' 

{ after(grammarAccess.getASSIGNMENTAccess().getColonEqualsSignKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonOperators__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonOperatorsAccess().getGTEnumLiteralDeclaration_0()); }
(	'>' 
)
{ after(grammarAccess.getComparisonOperatorsAccess().getGTEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getComparisonOperatorsAccess().getLTEnumLiteralDeclaration_1()); }
(	'<' 
)
{ after(grammarAccess.getComparisonOperatorsAccess().getLTEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getComparisonOperatorsAccess().getGEEnumLiteralDeclaration_2()); }
(	'>=' 
)
{ after(grammarAccess.getComparisonOperatorsAccess().getGEEnumLiteralDeclaration_2()); }
)

    |(
{ before(grammarAccess.getComparisonOperatorsAccess().getLEEnumLiteralDeclaration_3()); }
(	'<=' 
)
{ after(grammarAccess.getComparisonOperatorsAccess().getLEEnumLiteralDeclaration_3()); }
)

    |(
{ before(grammarAccess.getComparisonOperatorsAccess().getEQEnumLiteralDeclaration_4()); }
(	'==' 
)
{ after(grammarAccess.getComparisonOperatorsAccess().getEQEnumLiteralDeclaration_4()); }
)

    |(
{ before(grammarAccess.getComparisonOperatorsAccess().getNEEnumLiteralDeclaration_5()); }
(	'!=' 
)
{ after(grammarAccess.getComparisonOperatorsAccess().getNEEnumLiteralDeclaration_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__XTA__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__XTA__Group__0__Impl
	rule__XTA__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__XTA__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXTAAccess().getAlternatives_0()); }
(rule__XTA__Alternatives_0)*
{ after(grammarAccess.getXTAAccess().getAlternatives_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__XTA__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__XTA__Group__1__Impl
	rule__XTA__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__XTA__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXTAAccess().getInstancesAssignment_1()); }
(rule__XTA__InstancesAssignment_1)*
{ after(grammarAccess.getXTAAccess().getInstancesAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__XTA__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__XTA__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__XTA__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXTAAccess().getSystemAssignment_2()); }
(rule__XTA__SystemAssignment_2)
{ after(grammarAccess.getXTAAccess().getSystemAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Instance__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Instance__Group__0__Impl
	rule__Instance__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Instance__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInstanceAccess().getNameAssignment_0()); }
(rule__Instance__NameAssignment_0)
{ after(grammarAccess.getInstanceAccess().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Instance__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Instance__Group__1__Impl
	rule__Instance__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Instance__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInstanceAccess().getASSIGNMENTParserRuleCall_1()); }
	ruleASSIGNMENT
{ after(grammarAccess.getInstanceAccess().getASSIGNMENTParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Instance__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Instance__Group__2__Impl
	rule__Instance__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Instance__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInstanceAccess().getTypeAssignment_2()); }
(rule__Instance__TypeAssignment_2)
{ after(grammarAccess.getInstanceAccess().getTypeAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Instance__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Instance__Group__3__Impl
	rule__Instance__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Instance__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInstanceAccess().getLeftParenthesisKeyword_3()); }

	'(' 

{ after(grammarAccess.getInstanceAccess().getLeftParenthesisKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Instance__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Instance__Group__4__Impl
	rule__Instance__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Instance__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInstanceAccess().getGroup_4()); }
(rule__Instance__Group_4__0)?
{ after(grammarAccess.getInstanceAccess().getGroup_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Instance__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Instance__Group__5__Impl
	rule__Instance__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Instance__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInstanceAccess().getRightParenthesisKeyword_5()); }

	')' 

{ after(grammarAccess.getInstanceAccess().getRightParenthesisKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Instance__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Instance__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Instance__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInstanceAccess().getSemicolonKeyword_6()); }

	';' 

{ after(grammarAccess.getInstanceAccess().getSemicolonKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}
















rule__Instance__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Instance__Group_4__0__Impl
	rule__Instance__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Instance__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInstanceAccess().getArgsAssignment_4_0()); }
(rule__Instance__ArgsAssignment_4_0)
{ after(grammarAccess.getInstanceAccess().getArgsAssignment_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Instance__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Instance__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Instance__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInstanceAccess().getGroup_4_1()); }
(rule__Instance__Group_4_1__0)*
{ after(grammarAccess.getInstanceAccess().getGroup_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Instance__Group_4_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Instance__Group_4_1__0__Impl
	rule__Instance__Group_4_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Instance__Group_4_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInstanceAccess().getCommaKeyword_4_1_0()); }

	',' 

{ after(grammarAccess.getInstanceAccess().getCommaKeyword_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Instance__Group_4_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Instance__Group_4_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Instance__Group_4_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInstanceAccess().getArgsAssignment_4_1_1()); }
(rule__Instance__ArgsAssignment_4_1_1)
{ after(grammarAccess.getInstanceAccess().getArgsAssignment_4_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__System__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__System__Group__0__Impl
	rule__System__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__System__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSystemAccess().getSystemKeyword_0()); }

	'system' 

{ after(grammarAccess.getSystemAccess().getSystemKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__System__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__System__Group__1__Impl
	rule__System__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__System__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSystemAccess().getInstancesAssignment_1()); }
(rule__System__InstancesAssignment_1)
{ after(grammarAccess.getSystemAccess().getInstancesAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__System__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__System__Group__2__Impl
	rule__System__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__System__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSystemAccess().getGroup_2()); }
(rule__System__Group_2__0)*
{ after(grammarAccess.getSystemAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__System__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__System__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__System__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSystemAccess().getSemicolonKeyword_3()); }

	';' 

{ after(grammarAccess.getSystemAccess().getSemicolonKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__System__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__System__Group_2__0__Impl
	rule__System__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__System__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSystemAccess().getCommaKeyword_2_0()); }

	',' 

{ after(grammarAccess.getSystemAccess().getCommaKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__System__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__System__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__System__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSystemAccess().getInstancesAssignment_2_1()); }
(rule__System__InstancesAssignment_2_1)
{ after(grammarAccess.getSystemAccess().getInstancesAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ProcDecl__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProcDecl__Group__0__Impl
	rule__ProcDecl__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcDecl__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcDeclAccess().getProcessKeyword_0()); }

	'process' 

{ after(grammarAccess.getProcDeclAccess().getProcessKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ProcDecl__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProcDecl__Group__1__Impl
	rule__ProcDecl__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcDecl__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcDeclAccess().getNameAssignment_1()); }
(rule__ProcDecl__NameAssignment_1)
{ after(grammarAccess.getProcDeclAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ProcDecl__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProcDecl__Group__2__Impl
	rule__ProcDecl__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcDecl__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcDeclAccess().getLeftParenthesisKeyword_2()); }

	'(' 

{ after(grammarAccess.getProcDeclAccess().getLeftParenthesisKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ProcDecl__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProcDecl__Group__3__Impl
	rule__ProcDecl__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcDecl__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcDeclAccess().getGroup_3()); }
(rule__ProcDecl__Group_3__0)?
{ after(grammarAccess.getProcDeclAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ProcDecl__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProcDecl__Group__4__Impl
	rule__ProcDecl__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcDecl__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcDeclAccess().getRightParenthesisKeyword_4()); }

	')' 

{ after(grammarAccess.getProcDeclAccess().getRightParenthesisKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ProcDecl__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProcDecl__Group__5__Impl
	rule__ProcDecl__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcDecl__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcDeclAccess().getLeftCurlyBracketKeyword_5()); }

	'{' 

{ after(grammarAccess.getProcDeclAccess().getLeftCurlyBracketKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ProcDecl__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProcDecl__Group__6__Impl
	rule__ProcDecl__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcDecl__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcDeclAccess().getBodyAssignment_6()); }
(rule__ProcDecl__BodyAssignment_6)
{ after(grammarAccess.getProcDeclAccess().getBodyAssignment_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ProcDecl__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProcDecl__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcDecl__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcDeclAccess().getRightCurlyBracketKeyword_7()); }

	'}' 

{ after(grammarAccess.getProcDeclAccess().getRightCurlyBracketKeyword_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


















rule__ProcDecl__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProcDecl__Group_3__0__Impl
	rule__ProcDecl__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcDecl__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcDeclAccess().getParamsAssignment_3_0()); }
(rule__ProcDecl__ParamsAssignment_3_0)
{ after(grammarAccess.getProcDeclAccess().getParamsAssignment_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ProcDecl__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProcDecl__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcDecl__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcDeclAccess().getGroup_3_1()); }
(rule__ProcDecl__Group_3_1__0)*
{ after(grammarAccess.getProcDeclAccess().getGroup_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ProcDecl__Group_3_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProcDecl__Group_3_1__0__Impl
	rule__ProcDecl__Group_3_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcDecl__Group_3_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcDeclAccess().getCommaKeyword_3_1_0()); }

	',' 

{ after(grammarAccess.getProcDeclAccess().getCommaKeyword_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ProcDecl__Group_3_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProcDecl__Group_3_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcDecl__Group_3_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcDeclAccess().getParamsAssignment_3_1_1()); }
(rule__ProcDecl__ParamsAssignment_3_1_1)
{ after(grammarAccess.getProcDeclAccess().getParamsAssignment_3_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Parameter__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Parameter__Group__0__Impl
	rule__Parameter__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterAccess().getTypeAssignment_0()); }
(rule__Parameter__TypeAssignment_0)
{ after(grammarAccess.getParameterAccess().getTypeAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Parameter__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Parameter__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterAccess().getNameAssignment_1()); }
(rule__Parameter__NameAssignment_1)
{ after(grammarAccess.getParameterAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__TypeDecl__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeDecl__Group__0__Impl
	rule__TypeDecl__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDecl__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeDeclAccess().getTypedefKeyword_0()); }

	'typedef' 

{ after(grammarAccess.getTypeDeclAccess().getTypedefKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TypeDecl__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeDecl__Group__1__Impl
	rule__TypeDecl__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDecl__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeDeclAccess().getTypeAssignment_1()); }
(rule__TypeDecl__TypeAssignment_1)
{ after(grammarAccess.getTypeDeclAccess().getTypeAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TypeDecl__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeDecl__Group__2__Impl
	rule__TypeDecl__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDecl__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeDeclAccess().getNameAssignment_2()); }
(rule__TypeDecl__NameAssignment_2)
{ after(grammarAccess.getTypeDeclAccess().getNameAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TypeDecl__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeDecl__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDecl__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeDeclAccess().getSemicolonKeyword_3()); }

	';' 

{ after(grammarAccess.getTypeDeclAccess().getSemicolonKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__ChannelDecl__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ChannelDecl__Group__0__Impl
	rule__ChannelDecl__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ChannelDecl__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getChannelDeclAccess().getChannelTypeParserRuleCall_0()); }
	ruleChannelType
{ after(grammarAccess.getChannelDeclAccess().getChannelTypeParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ChannelDecl__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ChannelDecl__Group__1__Impl
	rule__ChannelDecl__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ChannelDecl__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getChannelDeclAccess().getChansAssignment_1()); }
(rule__ChannelDecl__ChansAssignment_1)
{ after(grammarAccess.getChannelDeclAccess().getChansAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ChannelDecl__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ChannelDecl__Group__2__Impl
	rule__ChannelDecl__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ChannelDecl__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getChannelDeclAccess().getGroup_2()); }
(rule__ChannelDecl__Group_2__0)*
{ after(grammarAccess.getChannelDeclAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ChannelDecl__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ChannelDecl__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ChannelDecl__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getChannelDeclAccess().getSemicolonKeyword_3()); }

	';' 

{ after(grammarAccess.getChannelDeclAccess().getSemicolonKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__ChannelDecl__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ChannelDecl__Group_2__0__Impl
	rule__ChannelDecl__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ChannelDecl__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getChannelDeclAccess().getCommaKeyword_2_0()); }

	',' 

{ after(grammarAccess.getChannelDeclAccess().getCommaKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ChannelDecl__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ChannelDecl__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ChannelDecl__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getChannelDeclAccess().getChansAssignment_2_1()); }
(rule__ChannelDecl__ChansAssignment_2_1)
{ after(grammarAccess.getChannelDeclAccess().getChansAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ChannelType__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ChannelType__Group__0__Impl
	rule__ChannelType__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ChannelType__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getChannelTypeAccess().getChannelTypeAction_0()); }
(

)
{ after(grammarAccess.getChannelTypeAccess().getChannelTypeAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ChannelType__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ChannelType__Group__1__Impl
	rule__ChannelType__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ChannelType__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getChannelTypeAccess().getChanKeyword_1()); }

	'chan' 

{ after(grammarAccess.getChannelTypeAccess().getChanKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ChannelType__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ChannelType__Group__2__Impl
	rule__ChannelType__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ChannelType__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getChannelTypeAccess().getUrgentAssignment_2()); }
(rule__ChannelType__UrgentAssignment_2)?
{ after(grammarAccess.getChannelTypeAccess().getUrgentAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ChannelType__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ChannelType__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ChannelType__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getChannelTypeAccess().getBroadcastAssignment_3()); }
(rule__ChannelType__BroadcastAssignment_3)?
{ after(grammarAccess.getChannelTypeAccess().getBroadcastAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__IntegerType__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IntegerType__Group__0__Impl
	rule__IntegerType__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IntegerType__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntegerTypeAccess().getIntegerTypeAction_0()); }
(

)
{ after(grammarAccess.getIntegerTypeAccess().getIntegerTypeAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IntegerType__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IntegerType__Group__1__Impl
	rule__IntegerType__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IntegerType__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntegerTypeAccess().getConstAssignment_1()); }
(rule__IntegerType__ConstAssignment_1)?
{ after(grammarAccess.getIntegerTypeAccess().getConstAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IntegerType__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IntegerType__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IntegerType__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntegerTypeAccess().getIntKeyword_2()); }

	'int' 

{ after(grammarAccess.getIntegerTypeAccess().getIntKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__BoolType__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BoolType__Group__0__Impl
	rule__BoolType__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolType__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBoolTypeAccess().getBoolTypeAction_0()); }
(

)
{ after(grammarAccess.getBoolTypeAccess().getBoolTypeAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BoolType__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BoolType__Group__1__Impl
	rule__BoolType__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolType__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBoolTypeAccess().getConstAssignment_1()); }
(rule__BoolType__ConstAssignment_1)?
{ after(grammarAccess.getBoolTypeAccess().getConstAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BoolType__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BoolType__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolType__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBoolTypeAccess().getBoolKeyword_2()); }

	'bool' 

{ after(grammarAccess.getBoolTypeAccess().getBoolKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__RangeType__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RangeType__Group__0__Impl
	rule__RangeType__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RangeType__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeTypeAccess().getConstAssignment_0()); }
(rule__RangeType__ConstAssignment_0)?
{ after(grammarAccess.getRangeTypeAccess().getConstAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RangeType__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RangeType__Group__1__Impl
	rule__RangeType__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RangeType__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeTypeAccess().getIntKeyword_1()); }

	'int' 

{ after(grammarAccess.getRangeTypeAccess().getIntKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RangeType__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RangeType__Group__2__Impl
	rule__RangeType__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__RangeType__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeTypeAccess().getLeftSquareBracketKeyword_2()); }

	'[' 

{ after(grammarAccess.getRangeTypeAccess().getLeftSquareBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RangeType__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RangeType__Group__3__Impl
	rule__RangeType__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__RangeType__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeTypeAccess().getMinAssignment_3()); }
(rule__RangeType__MinAssignment_3)
{ after(grammarAccess.getRangeTypeAccess().getMinAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RangeType__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RangeType__Group__4__Impl
	rule__RangeType__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__RangeType__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeTypeAccess().getCommaKeyword_4()); }

	',' 

{ after(grammarAccess.getRangeTypeAccess().getCommaKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RangeType__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RangeType__Group__5__Impl
	rule__RangeType__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__RangeType__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeTypeAccess().getMaxAssignment_5()); }
(rule__RangeType__MaxAssignment_5)
{ after(grammarAccess.getRangeTypeAccess().getMaxAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RangeType__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RangeType__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RangeType__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeTypeAccess().getRightSquareBracketKeyword_6()); }

	']' 

{ after(grammarAccess.getRangeTypeAccess().getRightSquareBracketKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}
















rule__ClockType__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ClockType__Group__0__Impl
	rule__ClockType__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ClockType__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClockTypeAccess().getClockTypeAction_0()); }
(

)
{ after(grammarAccess.getClockTypeAccess().getClockTypeAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ClockType__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ClockType__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ClockType__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClockTypeAccess().getClockKeyword_1()); }

	'clock' 

{ after(grammarAccess.getClockTypeAccess().getClockKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ProcBody__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProcBody__Group__0__Impl
	rule__ProcBody__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcBody__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcBodyAccess().getAlternatives_0()); }
(rule__ProcBody__Alternatives_0)*
{ after(grammarAccess.getProcBodyAccess().getAlternatives_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ProcBody__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProcBody__Group__1__Impl
	rule__ProcBody__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcBody__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcBodyAccess().getStateKeyword_1()); }

	'state' 

{ after(grammarAccess.getProcBodyAccess().getStateKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ProcBody__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProcBody__Group__2__Impl
	rule__ProcBody__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcBody__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcBodyAccess().getStatesAssignment_2()); }
(rule__ProcBody__StatesAssignment_2)
{ after(grammarAccess.getProcBodyAccess().getStatesAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ProcBody__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProcBody__Group__3__Impl
	rule__ProcBody__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcBody__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcBodyAccess().getGroup_3()); }
(rule__ProcBody__Group_3__0)*
{ after(grammarAccess.getProcBodyAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ProcBody__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProcBody__Group__4__Impl
	rule__ProcBody__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcBody__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcBodyAccess().getSemicolonKeyword_4()); }

	';' 

{ after(grammarAccess.getProcBodyAccess().getSemicolonKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ProcBody__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProcBody__Group__5__Impl
	rule__ProcBody__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcBody__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcBodyAccess().getGroup_5()); }
(rule__ProcBody__Group_5__0)?
{ after(grammarAccess.getProcBodyAccess().getGroup_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ProcBody__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProcBody__Group__6__Impl
	rule__ProcBody__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcBody__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcBodyAccess().getGroup_6()); }
(rule__ProcBody__Group_6__0)?
{ after(grammarAccess.getProcBodyAccess().getGroup_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ProcBody__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProcBody__Group__7__Impl
	rule__ProcBody__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcBody__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcBodyAccess().getInitKeyword_7()); }

	'init' 

{ after(grammarAccess.getProcBodyAccess().getInitKeyword_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ProcBody__Group__8
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProcBody__Group__8__Impl
	rule__ProcBody__Group__9
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcBody__Group__8__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcBodyAccess().getInitStateAssignment_8()); }
(rule__ProcBody__InitStateAssignment_8)
{ after(grammarAccess.getProcBodyAccess().getInitStateAssignment_8()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ProcBody__Group__9
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProcBody__Group__9__Impl
	rule__ProcBody__Group__10
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcBody__Group__9__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcBodyAccess().getSemicolonKeyword_9()); }

	';' 

{ after(grammarAccess.getProcBodyAccess().getSemicolonKeyword_9()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ProcBody__Group__10
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProcBody__Group__10__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcBody__Group__10__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcBodyAccess().getGroup_10()); }
(rule__ProcBody__Group_10__0)
{ after(grammarAccess.getProcBodyAccess().getGroup_10()); }
)

;
finally {
	restoreStackSize(stackSize);
}
























rule__ProcBody__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProcBody__Group_3__0__Impl
	rule__ProcBody__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcBody__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcBodyAccess().getCommaKeyword_3_0()); }

	',' 

{ after(grammarAccess.getProcBodyAccess().getCommaKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ProcBody__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProcBody__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcBody__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcBodyAccess().getStatesAssignment_3_1()); }
(rule__ProcBody__StatesAssignment_3_1)
{ after(grammarAccess.getProcBodyAccess().getStatesAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ProcBody__Group_5__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProcBody__Group_5__0__Impl
	rule__ProcBody__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcBody__Group_5__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcBodyAccess().getCommitKeyword_5_0()); }

	'commit' 

{ after(grammarAccess.getProcBodyAccess().getCommitKeyword_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ProcBody__Group_5__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProcBody__Group_5__1__Impl
	rule__ProcBody__Group_5__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcBody__Group_5__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcBodyAccess().getCommitStatesAssignment_5_1()); }
(rule__ProcBody__CommitStatesAssignment_5_1)
{ after(grammarAccess.getProcBodyAccess().getCommitStatesAssignment_5_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ProcBody__Group_5__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProcBody__Group_5__2__Impl
	rule__ProcBody__Group_5__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcBody__Group_5__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcBodyAccess().getGroup_5_2()); }
(rule__ProcBody__Group_5_2__0)*
{ after(grammarAccess.getProcBodyAccess().getGroup_5_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ProcBody__Group_5__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProcBody__Group_5__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcBody__Group_5__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcBodyAccess().getSemicolonKeyword_5_3()); }

	';' 

{ after(grammarAccess.getProcBodyAccess().getSemicolonKeyword_5_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__ProcBody__Group_5_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProcBody__Group_5_2__0__Impl
	rule__ProcBody__Group_5_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcBody__Group_5_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcBodyAccess().getCommaKeyword_5_2_0()); }

	',' 

{ after(grammarAccess.getProcBodyAccess().getCommaKeyword_5_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ProcBody__Group_5_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProcBody__Group_5_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcBody__Group_5_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcBodyAccess().getCommitStatesAssignment_5_2_1()); }
(rule__ProcBody__CommitStatesAssignment_5_2_1)
{ after(grammarAccess.getProcBodyAccess().getCommitStatesAssignment_5_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ProcBody__Group_6__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProcBody__Group_6__0__Impl
	rule__ProcBody__Group_6__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcBody__Group_6__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcBodyAccess().getUrgentKeyword_6_0()); }

	'urgent' 

{ after(grammarAccess.getProcBodyAccess().getUrgentKeyword_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ProcBody__Group_6__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProcBody__Group_6__1__Impl
	rule__ProcBody__Group_6__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcBody__Group_6__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcBodyAccess().getUrgentStatesAssignment_6_1()); }
(rule__ProcBody__UrgentStatesAssignment_6_1)
{ after(grammarAccess.getProcBodyAccess().getUrgentStatesAssignment_6_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ProcBody__Group_6__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProcBody__Group_6__2__Impl
	rule__ProcBody__Group_6__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcBody__Group_6__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcBodyAccess().getGroup_6_2()); }
(rule__ProcBody__Group_6_2__0)*
{ after(grammarAccess.getProcBodyAccess().getGroup_6_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ProcBody__Group_6__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProcBody__Group_6__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcBody__Group_6__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcBodyAccess().getSemicolonKeyword_6_3()); }

	';' 

{ after(grammarAccess.getProcBodyAccess().getSemicolonKeyword_6_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__ProcBody__Group_6_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProcBody__Group_6_2__0__Impl
	rule__ProcBody__Group_6_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcBody__Group_6_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcBodyAccess().getCommaKeyword_6_2_0()); }

	',' 

{ after(grammarAccess.getProcBodyAccess().getCommaKeyword_6_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ProcBody__Group_6_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProcBody__Group_6_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcBody__Group_6_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcBodyAccess().getUrgentStatesAssignment_6_2_1()); }
(rule__ProcBody__UrgentStatesAssignment_6_2_1)
{ after(grammarAccess.getProcBodyAccess().getUrgentStatesAssignment_6_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ProcBody__Group_10__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProcBody__Group_10__0__Impl
	rule__ProcBody__Group_10__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcBody__Group_10__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcBodyAccess().getTransKeyword_10_0()); }

	'trans' 

{ after(grammarAccess.getProcBodyAccess().getTransKeyword_10_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ProcBody__Group_10__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProcBody__Group_10__1__Impl
	rule__ProcBody__Group_10__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcBody__Group_10__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcBodyAccess().getTransitionsAssignment_10_1()); }
(rule__ProcBody__TransitionsAssignment_10_1)
{ after(grammarAccess.getProcBodyAccess().getTransitionsAssignment_10_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ProcBody__Group_10__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProcBody__Group_10__2__Impl
	rule__ProcBody__Group_10__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcBody__Group_10__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcBodyAccess().getGroup_10_2()); }
(rule__ProcBody__Group_10_2__0)*
{ after(grammarAccess.getProcBodyAccess().getGroup_10_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ProcBody__Group_10__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProcBody__Group_10__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcBody__Group_10__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcBodyAccess().getSemicolonKeyword_10_3()); }

	';' 

{ after(grammarAccess.getProcBodyAccess().getSemicolonKeyword_10_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__ProcBody__Group_10_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProcBody__Group_10_2__0__Impl
	rule__ProcBody__Group_10_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcBody__Group_10_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcBodyAccess().getCommaKeyword_10_2_0()); }

	',' 

{ after(grammarAccess.getProcBodyAccess().getCommaKeyword_10_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ProcBody__Group_10_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProcBody__Group_10_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcBody__Group_10_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcBodyAccess().getTransitionsAssignment_10_2_1()); }
(rule__ProcBody__TransitionsAssignment_10_2_1)
{ after(grammarAccess.getProcBodyAccess().getTransitionsAssignment_10_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__StateDecl__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StateDecl__Group__0__Impl
	rule__StateDecl__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StateDecl__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateDeclAccess().getNameAssignment_0()); }
(rule__StateDecl__NameAssignment_0)
{ after(grammarAccess.getStateDeclAccess().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StateDecl__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StateDecl__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StateDecl__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateDeclAccess().getGroup_1()); }
(rule__StateDecl__Group_1__0)?
{ after(grammarAccess.getStateDeclAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__StateDecl__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StateDecl__Group_1__0__Impl
	rule__StateDecl__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StateDecl__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateDeclAccess().getLeftCurlyBracketKeyword_1_0()); }

	'{' 

{ after(grammarAccess.getStateDeclAccess().getLeftCurlyBracketKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StateDecl__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StateDecl__Group_1__1__Impl
	rule__StateDecl__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__StateDecl__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateDeclAccess().getInvariantAssignment_1_1()); }
(rule__StateDecl__InvariantAssignment_1_1)
{ after(grammarAccess.getStateDeclAccess().getInvariantAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StateDecl__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StateDecl__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StateDecl__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateDeclAccess().getRightCurlyBracketKeyword_1_2()); }

	'}' 

{ after(grammarAccess.getStateDeclAccess().getRightCurlyBracketKeyword_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Transition__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Transition__Group__0__Impl
	rule__Transition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionAccess().getSrcAssignment_0()); }
(rule__Transition__SrcAssignment_0)
{ after(grammarAccess.getTransitionAccess().getSrcAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Transition__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Transition__Group__1__Impl
	rule__Transition__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionAccess().getHyphenMinusGreaterThanSignKeyword_1()); }

	'->' 

{ after(grammarAccess.getTransitionAccess().getHyphenMinusGreaterThanSignKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Transition__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Transition__Group__2__Impl
	rule__Transition__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionAccess().getDestAssignment_2()); }
(rule__Transition__DestAssignment_2)
{ after(grammarAccess.getTransitionAccess().getDestAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Transition__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Transition__Group__3__Impl
	rule__Transition__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionAccess().getLeftCurlyBracketKeyword_3()); }

	'{' 

{ after(grammarAccess.getTransitionAccess().getLeftCurlyBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Transition__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Transition__Group__4__Impl
	rule__Transition__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionAccess().getGroup_4()); }
(rule__Transition__Group_4__0)?
{ after(grammarAccess.getTransitionAccess().getGroup_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Transition__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Transition__Group__5__Impl
	rule__Transition__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionAccess().getSyncAssignment_5()); }
(rule__Transition__SyncAssignment_5)?
{ after(grammarAccess.getTransitionAccess().getSyncAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Transition__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Transition__Group__6__Impl
	rule__Transition__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionAccess().getAssignAssignment_6()); }
(rule__Transition__AssignAssignment_6)?
{ after(grammarAccess.getTransitionAccess().getAssignAssignment_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Transition__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Transition__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionAccess().getRightCurlyBracketKeyword_7()); }

	'}' 

{ after(grammarAccess.getTransitionAccess().getRightCurlyBracketKeyword_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


















rule__Transition__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Transition__Group_4__0__Impl
	rule__Transition__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionAccess().getGuardKeyword_4_0()); }

	'guard' 

{ after(grammarAccess.getTransitionAccess().getGuardKeyword_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Transition__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Transition__Group_4__1__Impl
	rule__Transition__Group_4__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionAccess().getGuardAssignment_4_1()); }
(rule__Transition__GuardAssignment_4_1)
{ after(grammarAccess.getTransitionAccess().getGuardAssignment_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Transition__Group_4__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Transition__Group_4__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__Group_4__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionAccess().getSemicolonKeyword_4_2()); }

	';' 

{ after(grammarAccess.getTransitionAccess().getSemicolonKeyword_4_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Send__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Send__Group__0__Impl
	rule__Send__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Send__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSendAccess().getSyncKeyword_0()); }

	'sync' 

{ after(grammarAccess.getSendAccess().getSyncKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Send__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Send__Group__1__Impl
	rule__Send__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Send__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSendAccess().getChannelAssignment_1()); }
(rule__Send__ChannelAssignment_1)
{ after(grammarAccess.getSendAccess().getChannelAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Send__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Send__Group__2__Impl
	rule__Send__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Send__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSendAccess().getExclamationMarkKeyword_2()); }

	'!' 

{ after(grammarAccess.getSendAccess().getExclamationMarkKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Send__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Send__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Send__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSendAccess().getSemicolonKeyword_3()); }

	';' 

{ after(grammarAccess.getSendAccess().getSemicolonKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Recv__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Recv__Group__0__Impl
	rule__Recv__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Recv__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRecvAccess().getSyncKeyword_0()); }

	'sync' 

{ after(grammarAccess.getRecvAccess().getSyncKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Recv__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Recv__Group__1__Impl
	rule__Recv__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Recv__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRecvAccess().getChannelAssignment_1()); }
(rule__Recv__ChannelAssignment_1)
{ after(grammarAccess.getRecvAccess().getChannelAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Recv__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Recv__Group__2__Impl
	rule__Recv__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Recv__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRecvAccess().getQuestionMarkKeyword_2()); }

	'?' 

{ after(grammarAccess.getRecvAccess().getQuestionMarkKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Recv__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Recv__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Recv__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRecvAccess().getSemicolonKeyword_3()); }

	';' 

{ after(grammarAccess.getRecvAccess().getSemicolonKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Assignments__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Assignments__Group__0__Impl
	rule__Assignments__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignments__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentsAccess().getAssignKeyword_0()); }

	'assign' 

{ after(grammarAccess.getAssignmentsAccess().getAssignKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Assignments__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Assignments__Group__1__Impl
	rule__Assignments__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignments__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentsAccess().getAssignsAssignment_1()); }
(rule__Assignments__AssignsAssignment_1)
{ after(grammarAccess.getAssignmentsAccess().getAssignsAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Assignments__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Assignments__Group__2__Impl
	rule__Assignments__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignments__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentsAccess().getGroup_2()); }
(rule__Assignments__Group_2__0)*
{ after(grammarAccess.getAssignmentsAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Assignments__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Assignments__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignments__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentsAccess().getSemicolonKeyword_3()); }

	';' 

{ after(grammarAccess.getAssignmentsAccess().getSemicolonKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Assignments__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Assignments__Group_2__0__Impl
	rule__Assignments__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignments__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentsAccess().getCommaKeyword_2_0()); }

	',' 

{ after(grammarAccess.getAssignmentsAccess().getCommaKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Assignments__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Assignments__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignments__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentsAccess().getAssignsAssignment_2_1()); }
(rule__Assignments__AssignsAssignment_2_1)
{ after(grammarAccess.getAssignmentsAccess().getAssignsAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Assign__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Assign__Group__0__Impl
	rule__Assign__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Assign__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignAccess().getLhsAssignment_0()); }
(rule__Assign__LhsAssignment_0)
{ after(grammarAccess.getAssignAccess().getLhsAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Assign__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Assign__Group__1__Impl
	rule__Assign__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Assign__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignAccess().getASSIGNMENTParserRuleCall_1()); }
	ruleASSIGNMENT
{ after(grammarAccess.getAssignAccess().getASSIGNMENTParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Assign__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Assign__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Assign__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignAccess().getRhsAssignment_2()); }
(rule__Assign__RhsAssignment_2)
{ after(grammarAccess.getAssignAccess().getRhsAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__VariableDecl__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableDecl__Group__0__Impl
	rule__VariableDecl__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDecl__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclAccess().getTypeAssignment_0()); }
(rule__VariableDecl__TypeAssignment_0)
{ after(grammarAccess.getVariableDeclAccess().getTypeAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableDecl__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableDecl__Group__1__Impl
	rule__VariableDecl__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDecl__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclAccess().getDeclidAssignment_1()); }
(rule__VariableDecl__DeclidAssignment_1)
{ after(grammarAccess.getVariableDeclAccess().getDeclidAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableDecl__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableDecl__Group__2__Impl
	rule__VariableDecl__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDecl__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclAccess().getGroup_2()); }
(rule__VariableDecl__Group_2__0)*
{ after(grammarAccess.getVariableDeclAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableDecl__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableDecl__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDecl__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclAccess().getSemicolonKeyword_3()); }

	';' 

{ after(grammarAccess.getVariableDeclAccess().getSemicolonKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__VariableDecl__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableDecl__Group_2__0__Impl
	rule__VariableDecl__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDecl__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclAccess().getCommaKeyword_2_0()); }

	',' 

{ after(grammarAccess.getVariableDeclAccess().getCommaKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableDecl__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableDecl__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDecl__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclAccess().getDeclidAssignment_2_1()); }
(rule__VariableDecl__DeclidAssignment_2_1)
{ after(grammarAccess.getVariableDeclAccess().getDeclidAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__DeclId__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DeclId__Group__0__Impl
	rule__DeclId__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DeclId__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclIdAccess().getNameAssignment_0()); }
(rule__DeclId__NameAssignment_0)
{ after(grammarAccess.getDeclIdAccess().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DeclId__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DeclId__Group__1__Impl
	rule__DeclId__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DeclId__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclIdAccess().getArraysAssignment_1()); }
(rule__DeclId__ArraysAssignment_1)*
{ after(grammarAccess.getDeclIdAccess().getArraysAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DeclId__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DeclId__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DeclId__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclIdAccess().getGroup_2()); }
(rule__DeclId__Group_2__0)?
{ after(grammarAccess.getDeclIdAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__DeclId__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DeclId__Group_2__0__Impl
	rule__DeclId__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DeclId__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclIdAccess().getASSIGNMENTParserRuleCall_2_0()); }
	ruleASSIGNMENT
{ after(grammarAccess.getDeclIdAccess().getASSIGNMENTParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DeclId__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DeclId__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DeclId__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclIdAccess().getInitAssignment_2_1()); }
(rule__DeclId__InitAssignment_2_1)
{ after(grammarAccess.getDeclIdAccess().getInitAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ArrayDecl__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayDecl__Group__0__Impl
	rule__ArrayDecl__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayDecl__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayDeclAccess().getLeftSquareBracketKeyword_0()); }

	'[' 

{ after(grammarAccess.getArrayDeclAccess().getLeftSquareBracketKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArrayDecl__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayDecl__Group__1__Impl
	rule__ArrayDecl__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayDecl__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayDeclAccess().getSizeAssignment_1()); }
(rule__ArrayDecl__SizeAssignment_1)
{ after(grammarAccess.getArrayDeclAccess().getSizeAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArrayDecl__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayDecl__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayDecl__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayDeclAccess().getRightSquareBracketKeyword_2()); }

	']' 

{ after(grammarAccess.getArrayDeclAccess().getRightSquareBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__BitOr__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BitOr__Group__0__Impl
	rule__BitOr__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BitOr__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBitOrAccess().getBitXorParserRuleCall_0()); }
	ruleBitXor
{ after(grammarAccess.getBitOrAccess().getBitXorParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BitOr__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BitOr__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BitOr__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBitOrAccess().getGroup_1()); }
(rule__BitOr__Group_1__0)*
{ after(grammarAccess.getBitOrAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BitOr__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BitOr__Group_1__0__Impl
	rule__BitOr__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BitOr__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBitOrAccess().getBinaryIntExpressionLeftAction_1_0()); }
(

)
{ after(grammarAccess.getBitOrAccess().getBinaryIntExpressionLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BitOr__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BitOr__Group_1__1__Impl
	rule__BitOr__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BitOr__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBitOrAccess().getOpAssignment_1_1()); }
(rule__BitOr__OpAssignment_1_1)
{ after(grammarAccess.getBitOrAccess().getOpAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BitOr__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BitOr__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BitOr__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBitOrAccess().getRightAssignment_1_2()); }
(rule__BitOr__RightAssignment_1_2)
{ after(grammarAccess.getBitOrAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__BitXor__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BitXor__Group__0__Impl
	rule__BitXor__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BitXor__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBitXorAccess().getBitAndParserRuleCall_0()); }
	ruleBitAnd
{ after(grammarAccess.getBitXorAccess().getBitAndParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BitXor__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BitXor__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BitXor__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBitXorAccess().getGroup_1()); }
(rule__BitXor__Group_1__0)*
{ after(grammarAccess.getBitXorAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BitXor__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BitXor__Group_1__0__Impl
	rule__BitXor__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BitXor__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBitXorAccess().getBinaryIntExpressionLeftAction_1_0()); }
(

)
{ after(grammarAccess.getBitXorAccess().getBinaryIntExpressionLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BitXor__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BitXor__Group_1__1__Impl
	rule__BitXor__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BitXor__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBitXorAccess().getOpAssignment_1_1()); }
(rule__BitXor__OpAssignment_1_1)
{ after(grammarAccess.getBitXorAccess().getOpAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BitXor__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BitXor__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BitXor__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBitXorAccess().getRightAssignment_1_2()); }
(rule__BitXor__RightAssignment_1_2)
{ after(grammarAccess.getBitXorAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__BitAnd__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BitAnd__Group__0__Impl
	rule__BitAnd__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BitAnd__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBitAndAccess().getBitShiftParserRuleCall_0()); }
	ruleBitShift
{ after(grammarAccess.getBitAndAccess().getBitShiftParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BitAnd__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BitAnd__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BitAnd__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBitAndAccess().getGroup_1()); }
(rule__BitAnd__Group_1__0)*
{ after(grammarAccess.getBitAndAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BitAnd__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BitAnd__Group_1__0__Impl
	rule__BitAnd__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BitAnd__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBitAndAccess().getBinaryIntExpressionLeftAction_1_0()); }
(

)
{ after(grammarAccess.getBitAndAccess().getBinaryIntExpressionLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BitAnd__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BitAnd__Group_1__1__Impl
	rule__BitAnd__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BitAnd__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBitAndAccess().getOpAssignment_1_1()); }
(rule__BitAnd__OpAssignment_1_1)
{ after(grammarAccess.getBitAndAccess().getOpAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BitAnd__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BitAnd__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BitAnd__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBitAndAccess().getRightAssignment_1_2()); }
(rule__BitAnd__RightAssignment_1_2)
{ after(grammarAccess.getBitAndAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__BitShift__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BitShift__Group__0__Impl
	rule__BitShift__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BitShift__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBitShiftAccess().getAdditionParserRuleCall_0()); }
	ruleAddition
{ after(grammarAccess.getBitShiftAccess().getAdditionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BitShift__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BitShift__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BitShift__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBitShiftAccess().getGroup_1()); }
(rule__BitShift__Group_1__0)*
{ after(grammarAccess.getBitShiftAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BitShift__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BitShift__Group_1__0__Impl
	rule__BitShift__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BitShift__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBitShiftAccess().getBinaryIntExpressionLeftAction_1_0()); }
(

)
{ after(grammarAccess.getBitShiftAccess().getBinaryIntExpressionLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BitShift__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BitShift__Group_1__1__Impl
	rule__BitShift__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BitShift__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBitShiftAccess().getOpAssignment_1_1()); }
(rule__BitShift__OpAssignment_1_1)
{ after(grammarAccess.getBitShiftAccess().getOpAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BitShift__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BitShift__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BitShift__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBitShiftAccess().getRightAssignment_1_2()); }
(rule__BitShift__RightAssignment_1_2)
{ after(grammarAccess.getBitShiftAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Addition__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Addition__Group__0__Impl
	rule__Addition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionAccess().getMultiplicationParserRuleCall_0()); }
	ruleMultiplication
{ after(grammarAccess.getAdditionAccess().getMultiplicationParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Addition__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Addition__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionAccess().getGroup_1()); }
(rule__Addition__Group_1__0)*
{ after(grammarAccess.getAdditionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Addition__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Addition__Group_1__0__Impl
	rule__Addition__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionAccess().getBinaryIntExpressionLeftAction_1_0()); }
(

)
{ after(grammarAccess.getAdditionAccess().getBinaryIntExpressionLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Addition__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Addition__Group_1__1__Impl
	rule__Addition__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionAccess().getOpAssignment_1_1()); }
(rule__Addition__OpAssignment_1_1)
{ after(grammarAccess.getAdditionAccess().getOpAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Addition__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Addition__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionAccess().getRightAssignment_1_2()); }
(rule__Addition__RightAssignment_1_2)
{ after(grammarAccess.getAdditionAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Multiplication__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Multiplication__Group__0__Impl
	rule__Multiplication__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationAccess().getBitComplementParserRuleCall_0()); }
	ruleBitComplement
{ after(grammarAccess.getMultiplicationAccess().getBitComplementParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Multiplication__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Multiplication__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationAccess().getGroup_1()); }
(rule__Multiplication__Group_1__0)*
{ after(grammarAccess.getMultiplicationAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Multiplication__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Multiplication__Group_1__0__Impl
	rule__Multiplication__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationAccess().getBinaryIntExpressionLeftAction_1_0()); }
(

)
{ after(grammarAccess.getMultiplicationAccess().getBinaryIntExpressionLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Multiplication__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Multiplication__Group_1__1__Impl
	rule__Multiplication__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationAccess().getOpAssignment_1_1()); }
(rule__Multiplication__OpAssignment_1_1)
{ after(grammarAccess.getMultiplicationAccess().getOpAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Multiplication__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Multiplication__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationAccess().getRightAssignment_1_2()); }
(rule__Multiplication__RightAssignment_1_2)
{ after(grammarAccess.getMultiplicationAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__BitComplement__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BitComplement__Group_0__0__Impl
	rule__BitComplement__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BitComplement__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBitComplementAccess().getTildeKeyword_0_0()); }

	'~' 

{ after(grammarAccess.getBitComplementAccess().getTildeKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BitComplement__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BitComplement__Group_0__1__Impl
	rule__BitComplement__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BitComplement__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBitComplementAccess().getPowerParserRuleCall_0_1()); }
	rulePower
{ after(grammarAccess.getBitComplementAccess().getPowerParserRuleCall_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BitComplement__Group_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BitComplement__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BitComplement__Group_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBitComplementAccess().getBitComplementValueAction_0_2()); }
(

)
{ after(grammarAccess.getBitComplementAccess().getBitComplementValueAction_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__BitComplement__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BitComplement__Group_1__0__Impl
	rule__BitComplement__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BitComplement__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBitComplementAccess().getHyphenMinusKeyword_1_0()); }

	'-' 

{ after(grammarAccess.getBitComplementAccess().getHyphenMinusKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BitComplement__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BitComplement__Group_1__1__Impl
	rule__BitComplement__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BitComplement__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBitComplementAccess().getPowerParserRuleCall_1_1()); }
	rulePower
{ after(grammarAccess.getBitComplementAccess().getPowerParserRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BitComplement__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BitComplement__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BitComplement__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBitComplementAccess().getUnaryMinusValueAction_1_2()); }
(

)
{ after(grammarAccess.getBitComplementAccess().getUnaryMinusValueAction_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Power__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Power__Group__0__Impl
	rule__Power__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Power__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPowerAccess().getPrimaryParserRuleCall_0()); }
	rulePrimary
{ after(grammarAccess.getPowerAccess().getPrimaryParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Power__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Power__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Power__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPowerAccess().getGroup_1()); }
(rule__Power__Group_1__0)*
{ after(grammarAccess.getPowerAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Power__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Power__Group_1__0__Impl
	rule__Power__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Power__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPowerAccess().getBinaryIntExpressionLeftAction_1_0()); }
(

)
{ after(grammarAccess.getPowerAccess().getBinaryIntExpressionLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Power__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Power__Group_1__1__Impl
	rule__Power__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Power__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPowerAccess().getOpAssignment_1_1()); }
(rule__Power__OpAssignment_1_1)
{ after(grammarAccess.getPowerAccess().getOpAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Power__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Power__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Power__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPowerAccess().getRightAssignment_1_2()); }
(rule__Power__RightAssignment_1_2)
{ after(grammarAccess.getPowerAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Primary__Group_2_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Primary__Group_2_0__0__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_2_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryAccess().getGroup_2_0_0()); }
(rule__Primary__Group_2_0_0__0)
{ after(grammarAccess.getPrimaryAccess().getGroup_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__Primary__Group_2_0_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Primary__Group_2_0_0__0__Impl
	rule__Primary__Group_2_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_2_0_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_2_0_0_0()); }

	'(' 

{ after(grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_2_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Primary__Group_2_0_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Primary__Group_2_0_0__1__Impl
	rule__Primary__Group_2_0_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_2_0_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryAccess().getBitOrParserRuleCall_2_0_0_1()); }
	ruleBitOr
{ after(grammarAccess.getPrimaryAccess().getBitOrParserRuleCall_2_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Primary__Group_2_0_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Primary__Group_2_0_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_2_0_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryAccess().getRightParenthesisKeyword_2_0_0_2()); }

	')' 

{ after(grammarAccess.getPrimaryAccess().getRightParenthesisKeyword_2_0_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Primary__Group_2_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Primary__Group_2_1__0__Impl
	rule__Primary__Group_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_2_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_2_1_0()); }

	'(' 

{ after(grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Primary__Group_2_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Primary__Group_2_1__1__Impl
	rule__Primary__Group_2_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_2_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryAccess().getWrapBoolExprParserRuleCall_2_1_1()); }
	ruleWrapBoolExpr
{ after(grammarAccess.getPrimaryAccess().getWrapBoolExprParserRuleCall_2_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Primary__Group_2_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Primary__Group_2_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_2_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryAccess().getRightParenthesisKeyword_2_1_2()); }

	')' 

{ after(grammarAccess.getPrimaryAccess().getRightParenthesisKeyword_2_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Or__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Or__Group__0__Impl
	rule__Or__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrAccess().getAndParserRuleCall_0()); }
	ruleAnd
{ after(grammarAccess.getOrAccess().getAndParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Or__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Or__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrAccess().getGroup_1()); }
(rule__Or__Group_1__0)*
{ after(grammarAccess.getOrAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Or__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Or__Group_1__0__Impl
	rule__Or__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrAccess().getOrLeftAction_1_0()); }
(

)
{ after(grammarAccess.getOrAccess().getOrLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Or__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Or__Group_1__1__Impl
	rule__Or__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrAccess().getVerticalLineVerticalLineKeyword_1_1()); }

	'||' 

{ after(grammarAccess.getOrAccess().getVerticalLineVerticalLineKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Or__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Or__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrAccess().getRightAssignment_1_2()); }
(rule__Or__RightAssignment_1_2)
{ after(grammarAccess.getOrAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__And__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__And__Group__0__Impl
	rule__And__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndAccess().getNotParserRuleCall_0()); }
	ruleNot
{ after(grammarAccess.getAndAccess().getNotParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__And__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__And__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndAccess().getGroup_1()); }
(rule__And__Group_1__0)*
{ after(grammarAccess.getAndAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__And__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__And__Group_1__0__Impl
	rule__And__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndAccess().getAndLeftAction_1_0()); }
(

)
{ after(grammarAccess.getAndAccess().getAndLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__And__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__And__Group_1__1__Impl
	rule__And__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndAccess().getAmpersandAmpersandKeyword_1_1()); }

	'&&' 

{ after(grammarAccess.getAndAccess().getAmpersandAmpersandKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__And__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__And__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndAccess().getRightAssignment_1_2()); }
(rule__And__RightAssignment_1_2)
{ after(grammarAccess.getAndAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Not__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Not__Group_0__0__Impl
	rule__Not__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Not__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNotAccess().getExclamationMarkKeyword_0_0()); }

	'!' 

{ after(grammarAccess.getNotAccess().getExclamationMarkKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Not__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Not__Group_0__1__Impl
	rule__Not__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Not__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNotAccess().getNotAction_0_1()); }
(

)
{ after(grammarAccess.getNotAccess().getNotAction_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Not__Group_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Not__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Not__Group_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNotAccess().getValueAssignment_0_2()); }
(rule__Not__ValueAssignment_0_2)
{ after(grammarAccess.getNotAccess().getValueAssignment_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__PrimaryBool__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrimaryBool__Group_3__0__Impl
	rule__PrimaryBool__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryBool__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryBoolAccess().getLeftParenthesisKeyword_3_0()); }

	'(' 

{ after(grammarAccess.getPrimaryBoolAccess().getLeftParenthesisKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PrimaryBool__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrimaryBool__Group_3__1__Impl
	rule__PrimaryBool__Group_3__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryBool__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryBoolAccess().getOrParserRuleCall_3_1()); }
	ruleOr
{ after(grammarAccess.getPrimaryBoolAccess().getOrParserRuleCall_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PrimaryBool__Group_3__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrimaryBool__Group_3__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryBool__Group_3__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryBoolAccess().getRightParenthesisKeyword_3_2()); }

	')' 

{ after(grammarAccess.getPrimaryBoolAccess().getRightParenthesisKeyword_3_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Comparison__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Comparison__Group__0__Impl
	rule__Comparison__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonAccess().getLeftAssignment_0()); }
(rule__Comparison__LeftAssignment_0)
{ after(grammarAccess.getComparisonAccess().getLeftAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Comparison__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Comparison__Group__1__Impl
	rule__Comparison__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonAccess().getOperatorAssignment_1()); }
(rule__Comparison__OperatorAssignment_1)
{ after(grammarAccess.getComparisonAccess().getOperatorAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Comparison__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Comparison__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonAccess().getRightAssignment_2()); }
(rule__Comparison__RightAssignment_2)
{ after(grammarAccess.getComparisonAccess().getRightAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__True__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__True__Group__0__Impl
	rule__True__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__True__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTrueAccess().getTrueAction_0()); }
(

)
{ after(grammarAccess.getTrueAccess().getTrueAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__True__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__True__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__True__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTrueAccess().getTrueKeyword_1()); }

	'true' 

{ after(grammarAccess.getTrueAccess().getTrueKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__False__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__False__Group__0__Impl
	rule__False__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__False__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFalseAccess().getFalseAction_0()); }
(

)
{ after(grammarAccess.getFalseAccess().getFalseAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__False__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__False__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__False__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFalseAccess().getFalseKeyword_1()); }

	'false' 

{ after(grammarAccess.getFalseAccess().getFalseKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__XTA__VariablesAssignment_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXTAAccess().getVariablesVariableDeclParserRuleCall_0_0_0()); }
	ruleVariableDecl{ after(grammarAccess.getXTAAccess().getVariablesVariableDeclParserRuleCall_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__XTA__ChannelsAssignment_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXTAAccess().getChannelsChannelDeclParserRuleCall_0_1_0()); }
	ruleChannelDecl{ after(grammarAccess.getXTAAccess().getChannelsChannelDeclParserRuleCall_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__XTA__TypesAssignment_0_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXTAAccess().getTypesTypeDeclParserRuleCall_0_2_0()); }
	ruleTypeDecl{ after(grammarAccess.getXTAAccess().getTypesTypeDeclParserRuleCall_0_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__XTA__TemplatesAssignment_0_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXTAAccess().getTemplatesProcDeclParserRuleCall_0_3_0()); }
	ruleProcDecl{ after(grammarAccess.getXTAAccess().getTemplatesProcDeclParserRuleCall_0_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__XTA__InstancesAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXTAAccess().getInstancesInstanceParserRuleCall_1_0()); }
	ruleInstance{ after(grammarAccess.getXTAAccess().getInstancesInstanceParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__XTA__SystemAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXTAAccess().getSystemSystemParserRuleCall_2_0()); }
	ruleSystem{ after(grammarAccess.getXTAAccess().getSystemSystemParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Instance__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInstanceAccess().getNameIDTerminalRuleCall_0_0()); }
	RULE_ID{ after(grammarAccess.getInstanceAccess().getNameIDTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Instance__TypeAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInstanceAccess().getTypeProcDeclCrossReference_2_0()); }
(
{ before(grammarAccess.getInstanceAccess().getTypeProcDeclIDTerminalRuleCall_2_0_1()); }
	RULE_ID{ after(grammarAccess.getInstanceAccess().getTypeProcDeclIDTerminalRuleCall_2_0_1()); }
)
{ after(grammarAccess.getInstanceAccess().getTypeProcDeclCrossReference_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Instance__ArgsAssignment_4_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInstanceAccess().getArgsBitOrParserRuleCall_4_0_0()); }
	ruleBitOr{ after(grammarAccess.getInstanceAccess().getArgsBitOrParserRuleCall_4_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Instance__ArgsAssignment_4_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInstanceAccess().getArgsBitOrParserRuleCall_4_1_1_0()); }
	ruleBitOr{ after(grammarAccess.getInstanceAccess().getArgsBitOrParserRuleCall_4_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__System__InstancesAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSystemAccess().getInstancesInstantiableInSystemCrossReference_1_0()); }
(
{ before(grammarAccess.getSystemAccess().getInstancesInstantiableInSystemIDTerminalRuleCall_1_0_1()); }
	RULE_ID{ after(grammarAccess.getSystemAccess().getInstancesInstantiableInSystemIDTerminalRuleCall_1_0_1()); }
)
{ after(grammarAccess.getSystemAccess().getInstancesInstantiableInSystemCrossReference_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__System__InstancesAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSystemAccess().getInstancesInstantiableInSystemCrossReference_2_1_0()); }
(
{ before(grammarAccess.getSystemAccess().getInstancesInstantiableInSystemIDTerminalRuleCall_2_1_0_1()); }
	RULE_ID{ after(grammarAccess.getSystemAccess().getInstancesInstantiableInSystemIDTerminalRuleCall_2_1_0_1()); }
)
{ after(grammarAccess.getSystemAccess().getInstancesInstantiableInSystemCrossReference_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ProcDecl__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcDeclAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getProcDeclAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ProcDecl__ParamsAssignment_3_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcDeclAccess().getParamsParameterParserRuleCall_3_0_0()); }
	ruleParameter{ after(grammarAccess.getProcDeclAccess().getParamsParameterParserRuleCall_3_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ProcDecl__ParamsAssignment_3_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcDeclAccess().getParamsParameterParserRuleCall_3_1_1_0()); }
	ruleParameter{ after(grammarAccess.getProcDeclAccess().getParamsParameterParserRuleCall_3_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ProcDecl__BodyAssignment_6
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcDeclAccess().getBodyProcBodyParserRuleCall_6_0()); }
	ruleProcBody{ after(grammarAccess.getProcDeclAccess().getBodyProcBodyParserRuleCall_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__TypeAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterAccess().getTypeTypeParserRuleCall_0_0()); }
	ruleType{ after(grammarAccess.getParameterAccess().getTypeTypeParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getParameterAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDecl__TypeAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeDeclAccess().getTypeTypeParserRuleCall_1_0()); }
	ruleType{ after(grammarAccess.getTypeDeclAccess().getTypeTypeParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDecl__NameAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeDeclAccess().getNameIDTerminalRuleCall_2_0()); }
	RULE_ID{ after(grammarAccess.getTypeDeclAccess().getNameIDTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TypedefRef__RefAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypedefRefAccess().getRefTypeDeclCrossReference_0()); }
(
{ before(grammarAccess.getTypedefRefAccess().getRefTypeDeclIDTerminalRuleCall_0_1()); }
	RULE_ID{ after(grammarAccess.getTypedefRefAccess().getRefTypeDeclIDTerminalRuleCall_0_1()); }
)
{ after(grammarAccess.getTypedefRefAccess().getRefTypeDeclCrossReference_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ChannelDecl__ChansAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getChannelDeclAccess().getChansChanIdParserRuleCall_1_0()); }
	ruleChanId{ after(grammarAccess.getChannelDeclAccess().getChansChanIdParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ChannelDecl__ChansAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getChannelDeclAccess().getChansChanIdParserRuleCall_2_1_0()); }
	ruleChanId{ after(grammarAccess.getChannelDeclAccess().getChansChanIdParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ChanId__NameAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getChanIdAccess().getNameIDTerminalRuleCall_0()); }
	RULE_ID{ after(grammarAccess.getChanIdAccess().getNameIDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ChannelType__UrgentAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getChannelTypeAccess().getUrgentUrgentKeyword_2_0()); }
(
{ before(grammarAccess.getChannelTypeAccess().getUrgentUrgentKeyword_2_0()); }

	'urgent' 

{ after(grammarAccess.getChannelTypeAccess().getUrgentUrgentKeyword_2_0()); }
)

{ after(grammarAccess.getChannelTypeAccess().getUrgentUrgentKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ChannelType__BroadcastAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getChannelTypeAccess().getBroadcastBroadcastKeyword_3_0()); }
(
{ before(grammarAccess.getChannelTypeAccess().getBroadcastBroadcastKeyword_3_0()); }

	'broadcast' 

{ after(grammarAccess.getChannelTypeAccess().getBroadcastBroadcastKeyword_3_0()); }
)

{ after(grammarAccess.getChannelTypeAccess().getBroadcastBroadcastKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IntegerType__ConstAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntegerTypeAccess().getConstConstKeyword_1_0()); }
(
{ before(grammarAccess.getIntegerTypeAccess().getConstConstKeyword_1_0()); }

	'const' 

{ after(grammarAccess.getIntegerTypeAccess().getConstConstKeyword_1_0()); }
)

{ after(grammarAccess.getIntegerTypeAccess().getConstConstKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BoolType__ConstAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBoolTypeAccess().getConstConstKeyword_1_0()); }
(
{ before(grammarAccess.getBoolTypeAccess().getConstConstKeyword_1_0()); }

	'const' 

{ after(grammarAccess.getBoolTypeAccess().getConstConstKeyword_1_0()); }
)

{ after(grammarAccess.getBoolTypeAccess().getConstConstKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RangeType__ConstAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeTypeAccess().getConstConstKeyword_0_0()); }
(
{ before(grammarAccess.getRangeTypeAccess().getConstConstKeyword_0_0()); }

	'const' 

{ after(grammarAccess.getRangeTypeAccess().getConstConstKeyword_0_0()); }
)

{ after(grammarAccess.getRangeTypeAccess().getConstConstKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RangeType__MinAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeTypeAccess().getMinINTTerminalRuleCall_3_0()); }
	RULE_INT{ after(grammarAccess.getRangeTypeAccess().getMinINTTerminalRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RangeType__MaxAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeTypeAccess().getMaxINTTerminalRuleCall_5_0()); }
	RULE_INT{ after(grammarAccess.getRangeTypeAccess().getMaxINTTerminalRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ProcBody__VariablesAssignment_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcBodyAccess().getVariablesVariableDeclParserRuleCall_0_0_0()); }
	ruleVariableDecl{ after(grammarAccess.getProcBodyAccess().getVariablesVariableDeclParserRuleCall_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ProcBody__TypesAssignment_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcBodyAccess().getTypesTypeDeclParserRuleCall_0_1_0()); }
	ruleTypeDecl{ after(grammarAccess.getProcBodyAccess().getTypesTypeDeclParserRuleCall_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ProcBody__StatesAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcBodyAccess().getStatesStateDeclParserRuleCall_2_0()); }
	ruleStateDecl{ after(grammarAccess.getProcBodyAccess().getStatesStateDeclParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ProcBody__StatesAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcBodyAccess().getStatesStateDeclParserRuleCall_3_1_0()); }
	ruleStateDecl{ after(grammarAccess.getProcBodyAccess().getStatesStateDeclParserRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ProcBody__CommitStatesAssignment_5_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcBodyAccess().getCommitStatesStateDeclCrossReference_5_1_0()); }
(
{ before(grammarAccess.getProcBodyAccess().getCommitStatesStateDeclIDTerminalRuleCall_5_1_0_1()); }
	RULE_ID{ after(grammarAccess.getProcBodyAccess().getCommitStatesStateDeclIDTerminalRuleCall_5_1_0_1()); }
)
{ after(grammarAccess.getProcBodyAccess().getCommitStatesStateDeclCrossReference_5_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ProcBody__CommitStatesAssignment_5_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcBodyAccess().getCommitStatesStateDeclCrossReference_5_2_1_0()); }
(
{ before(grammarAccess.getProcBodyAccess().getCommitStatesStateDeclIDTerminalRuleCall_5_2_1_0_1()); }
	RULE_ID{ after(grammarAccess.getProcBodyAccess().getCommitStatesStateDeclIDTerminalRuleCall_5_2_1_0_1()); }
)
{ after(grammarAccess.getProcBodyAccess().getCommitStatesStateDeclCrossReference_5_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ProcBody__UrgentStatesAssignment_6_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcBodyAccess().getUrgentStatesStateDeclCrossReference_6_1_0()); }
(
{ before(grammarAccess.getProcBodyAccess().getUrgentStatesStateDeclIDTerminalRuleCall_6_1_0_1()); }
	RULE_ID{ after(grammarAccess.getProcBodyAccess().getUrgentStatesStateDeclIDTerminalRuleCall_6_1_0_1()); }
)
{ after(grammarAccess.getProcBodyAccess().getUrgentStatesStateDeclCrossReference_6_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ProcBody__UrgentStatesAssignment_6_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcBodyAccess().getUrgentStatesStateDeclCrossReference_6_2_1_0()); }
(
{ before(grammarAccess.getProcBodyAccess().getUrgentStatesStateDeclIDTerminalRuleCall_6_2_1_0_1()); }
	RULE_ID{ after(grammarAccess.getProcBodyAccess().getUrgentStatesStateDeclIDTerminalRuleCall_6_2_1_0_1()); }
)
{ after(grammarAccess.getProcBodyAccess().getUrgentStatesStateDeclCrossReference_6_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ProcBody__InitStateAssignment_8
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcBodyAccess().getInitStateStateDeclCrossReference_8_0()); }
(
{ before(grammarAccess.getProcBodyAccess().getInitStateStateDeclIDTerminalRuleCall_8_0_1()); }
	RULE_ID{ after(grammarAccess.getProcBodyAccess().getInitStateStateDeclIDTerminalRuleCall_8_0_1()); }
)
{ after(grammarAccess.getProcBodyAccess().getInitStateStateDeclCrossReference_8_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ProcBody__TransitionsAssignment_10_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcBodyAccess().getTransitionsTransitionParserRuleCall_10_1_0()); }
	ruleTransition{ after(grammarAccess.getProcBodyAccess().getTransitionsTransitionParserRuleCall_10_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ProcBody__TransitionsAssignment_10_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcBodyAccess().getTransitionsTransitionParserRuleCall_10_2_1_0()); }
	ruleTransition{ after(grammarAccess.getProcBodyAccess().getTransitionsTransitionParserRuleCall_10_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StateDecl__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateDeclAccess().getNameIDTerminalRuleCall_0_0()); }
	RULE_ID{ after(grammarAccess.getStateDeclAccess().getNameIDTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StateDecl__InvariantAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateDeclAccess().getInvariantOrParserRuleCall_1_1_0()); }
	ruleOr{ after(grammarAccess.getStateDeclAccess().getInvariantOrParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__SrcAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionAccess().getSrcStateDeclCrossReference_0_0()); }
(
{ before(grammarAccess.getTransitionAccess().getSrcStateDeclIDTerminalRuleCall_0_0_1()); }
	RULE_ID{ after(grammarAccess.getTransitionAccess().getSrcStateDeclIDTerminalRuleCall_0_0_1()); }
)
{ after(grammarAccess.getTransitionAccess().getSrcStateDeclCrossReference_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__DestAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionAccess().getDestStateDeclCrossReference_2_0()); }
(
{ before(grammarAccess.getTransitionAccess().getDestStateDeclIDTerminalRuleCall_2_0_1()); }
	RULE_ID{ after(grammarAccess.getTransitionAccess().getDestStateDeclIDTerminalRuleCall_2_0_1()); }
)
{ after(grammarAccess.getTransitionAccess().getDestStateDeclCrossReference_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__GuardAssignment_4_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionAccess().getGuardOrParserRuleCall_4_1_0()); }
	ruleOr{ after(grammarAccess.getTransitionAccess().getGuardOrParserRuleCall_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__SyncAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionAccess().getSyncSyncParserRuleCall_5_0()); }
	ruleSync{ after(grammarAccess.getTransitionAccess().getSyncSyncParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__AssignAssignment_6
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionAccess().getAssignAssignmentsParserRuleCall_6_0()); }
	ruleAssignments{ after(grammarAccess.getTransitionAccess().getAssignAssignmentsParserRuleCall_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Send__ChannelAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSendAccess().getChannelChanIdCrossReference_1_0()); }
(
{ before(grammarAccess.getSendAccess().getChannelChanIdIDTerminalRuleCall_1_0_1()); }
	RULE_ID{ after(grammarAccess.getSendAccess().getChannelChanIdIDTerminalRuleCall_1_0_1()); }
)
{ after(grammarAccess.getSendAccess().getChannelChanIdCrossReference_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Recv__ChannelAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRecvAccess().getChannelChanIdCrossReference_1_0()); }
(
{ before(grammarAccess.getRecvAccess().getChannelChanIdIDTerminalRuleCall_1_0_1()); }
	RULE_ID{ after(grammarAccess.getRecvAccess().getChannelChanIdIDTerminalRuleCall_1_0_1()); }
)
{ after(grammarAccess.getRecvAccess().getChannelChanIdCrossReference_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Assignments__AssignsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentsAccess().getAssignsAssignParserRuleCall_1_0()); }
	ruleAssign{ after(grammarAccess.getAssignmentsAccess().getAssignsAssignParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Assignments__AssignsAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentsAccess().getAssignsAssignParserRuleCall_2_1_0()); }
	ruleAssign{ after(grammarAccess.getAssignmentsAccess().getAssignsAssignParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Assign__LhsAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignAccess().getLhsVarAccessParserRuleCall_0_0()); }
	ruleVarAccess{ after(grammarAccess.getAssignAccess().getLhsVarAccessParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Assign__RhsAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignAccess().getRhsBitOrParserRuleCall_2_0()); }
	ruleBitOr{ after(grammarAccess.getAssignAccess().getRhsBitOrParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDecl__TypeAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclAccess().getTypeBasicTypeParserRuleCall_0_0()); }
	ruleBasicType{ after(grammarAccess.getVariableDeclAccess().getTypeBasicTypeParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDecl__DeclidAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclAccess().getDeclidDeclIdParserRuleCall_1_0()); }
	ruleDeclId{ after(grammarAccess.getVariableDeclAccess().getDeclidDeclIdParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDecl__DeclidAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclAccess().getDeclidDeclIdParserRuleCall_2_1_0()); }
	ruleDeclId{ after(grammarAccess.getVariableDeclAccess().getDeclidDeclIdParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DeclId__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclIdAccess().getNameIDTerminalRuleCall_0_0()); }
	RULE_ID{ after(grammarAccess.getDeclIdAccess().getNameIDTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DeclId__ArraysAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclIdAccess().getArraysArrayDeclParserRuleCall_1_0()); }
	ruleArrayDecl{ after(grammarAccess.getDeclIdAccess().getArraysArrayDeclParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DeclId__InitAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclIdAccess().getInitInitialiserParserRuleCall_2_1_0()); }
	ruleInitialiser{ after(grammarAccess.getDeclIdAccess().getInitInitialiserParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Initialiser__ExprAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInitialiserAccess().getExprBitOrParserRuleCall_0()); }
	ruleBitOr{ after(grammarAccess.getInitialiserAccess().getExprBitOrParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayDecl__SizeAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayDeclAccess().getSizeINTTerminalRuleCall_1_0()); }
	RULE_INT{ after(grammarAccess.getArrayDeclAccess().getSizeINTTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BitOr__OpAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBitOrAccess().getOpVerticalLineKeyword_1_1_0()); }
(
{ before(grammarAccess.getBitOrAccess().getOpVerticalLineKeyword_1_1_0()); }

	'|' 

{ after(grammarAccess.getBitOrAccess().getOpVerticalLineKeyword_1_1_0()); }
)

{ after(grammarAccess.getBitOrAccess().getOpVerticalLineKeyword_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BitOr__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBitOrAccess().getRightBitXorParserRuleCall_1_2_0()); }
	ruleBitXor{ after(grammarAccess.getBitOrAccess().getRightBitXorParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BitXor__OpAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBitXorAccess().getOpCircumflexAccentKeyword_1_1_0()); }
(
{ before(grammarAccess.getBitXorAccess().getOpCircumflexAccentKeyword_1_1_0()); }

	'^' 

{ after(grammarAccess.getBitXorAccess().getOpCircumflexAccentKeyword_1_1_0()); }
)

{ after(grammarAccess.getBitXorAccess().getOpCircumflexAccentKeyword_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BitXor__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBitXorAccess().getRightBitAndParserRuleCall_1_2_0()); }
	ruleBitAnd{ after(grammarAccess.getBitXorAccess().getRightBitAndParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BitAnd__OpAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBitAndAccess().getOpAmpersandKeyword_1_1_0()); }
(
{ before(grammarAccess.getBitAndAccess().getOpAmpersandKeyword_1_1_0()); }

	'&' 

{ after(grammarAccess.getBitAndAccess().getOpAmpersandKeyword_1_1_0()); }
)

{ after(grammarAccess.getBitAndAccess().getOpAmpersandKeyword_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BitAnd__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBitAndAccess().getRightBitShiftParserRuleCall_1_2_0()); }
	ruleBitShift{ after(grammarAccess.getBitAndAccess().getRightBitShiftParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BitShift__OpAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBitShiftAccess().getOpAlternatives_1_1_0()); }
(rule__BitShift__OpAlternatives_1_1_0)
{ after(grammarAccess.getBitShiftAccess().getOpAlternatives_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BitShift__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBitShiftAccess().getRightAdditionParserRuleCall_1_2_0()); }
	ruleAddition{ after(grammarAccess.getBitShiftAccess().getRightAdditionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__OpAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionAccess().getOpAlternatives_1_1_0()); }
(rule__Addition__OpAlternatives_1_1_0)
{ after(grammarAccess.getAdditionAccess().getOpAlternatives_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionAccess().getRightMultiplicationParserRuleCall_1_2_0()); }
	ruleMultiplication{ after(grammarAccess.getAdditionAccess().getRightMultiplicationParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__OpAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationAccess().getOpAlternatives_1_1_0()); }
(rule__Multiplication__OpAlternatives_1_1_0)
{ after(grammarAccess.getMultiplicationAccess().getOpAlternatives_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationAccess().getRightBitComplementParserRuleCall_1_2_0()); }
	ruleBitComplement{ after(grammarAccess.getMultiplicationAccess().getRightBitComplementParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Power__OpAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPowerAccess().getOpAsteriskAsteriskKeyword_1_1_0()); }
(
{ before(grammarAccess.getPowerAccess().getOpAsteriskAsteriskKeyword_1_1_0()); }

	'**' 

{ after(grammarAccess.getPowerAccess().getOpAsteriskAsteriskKeyword_1_1_0()); }
)

{ after(grammarAccess.getPowerAccess().getOpAsteriskAsteriskKeyword_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Power__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPowerAccess().getRightPrimaryParserRuleCall_1_2_0()); }
	rulePrimary{ after(grammarAccess.getPowerAccess().getRightPrimaryParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VarAccess__RefAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVarAccessAccess().getRefFormalDeclarationCrossReference_0()); }
(
{ before(grammarAccess.getVarAccessAccess().getRefFormalDeclarationIDTerminalRuleCall_0_1()); }
	RULE_ID{ after(grammarAccess.getVarAccessAccess().getRefFormalDeclarationIDTerminalRuleCall_0_1()); }
)
{ after(grammarAccess.getVarAccessAccess().getRefFormalDeclarationCrossReference_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__WrapBoolExpr__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWrapBoolExprAccess().getValueOrParserRuleCall_0()); }
	ruleOr{ after(grammarAccess.getWrapBoolExprAccess().getValueOrParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Constant__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstantAccess().getValueINTTerminalRuleCall_0()); }
	RULE_INT{ after(grammarAccess.getConstantAccess().getValueINTTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Or__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrAccess().getRightAndParserRuleCall_1_2_0()); }
	ruleAnd{ after(grammarAccess.getOrAccess().getRightAndParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__And__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndAccess().getRightNotParserRuleCall_1_2_0()); }
	ruleNot{ after(grammarAccess.getAndAccess().getRightNotParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Not__ValueAssignment_0_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNotAccess().getValuePrimaryBoolParserRuleCall_0_2_0()); }
	rulePrimaryBool{ after(grammarAccess.getNotAccess().getValuePrimaryBoolParserRuleCall_0_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__LeftAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonAccess().getLeftBitOrParserRuleCall_0_0()); }
	ruleBitOr{ after(grammarAccess.getComparisonAccess().getLeftBitOrParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__OperatorAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonAccess().getOperatorComparisonOperatorsEnumRuleCall_1_0()); }
	ruleComparisonOperators{ after(grammarAccess.getComparisonAccess().getOperatorComparisonOperatorsEnumRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__RightAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonAccess().getRightBitOrParserRuleCall_2_0()); }
	ruleBitOr{ after(grammarAccess.getComparisonAccess().getRightBitOrParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


