/*
 * generated by Xtext
 */
package fr.lip6.move.formatting2

import com.google.inject.Inject
import fr.lip6.move.services.TimedAutomataGrammarAccess
import fr.lip6.move.timedAutomata.ChannelDecl
import fr.lip6.move.timedAutomata.Instance
import fr.lip6.move.timedAutomata.IntExpression
import fr.lip6.move.timedAutomata.ProcDecl
import fr.lip6.move.timedAutomata.TypeDecl
import fr.lip6.move.timedAutomata.VariableDecl
import fr.lip6.move.timedAutomata.XTA
import org.eclipse.xtext.formatting2.AbstractFormatter2
import org.eclipse.xtext.formatting2.IFormattableDocument

class TimedAutomataFormatter extends AbstractFormatter2 {
	
	@Inject extension TimedAutomataGrammarAccess

	def dispatch void format(XTA xTA, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (VariableDecl variableDecl : xTA.getVariables()) {
			variableDecl.format;
		}
		for (ChannelDecl channelDecl : xTA.getChannels()) {
			channelDecl.format;
		}
		for (TypeDecl typeDecl : xTA.getTypes()) {
			typeDecl.format;
		}
		for (ProcDecl procDecl : xTA.getTemplates()) {
			procDecl.format;
		}
		for (Instance instance : xTA.getInstances()) {
			instance.format;
		}
		xTA.getSystem.format;
	}

	def dispatch void format(Instance instance, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (IntExpression intExpression : instance.getArgs()) {
			intExpression.format;
		}
	}
	
	// TODO: implement for ProcDecl, Parameter, TypeDecl, ChannelDecl, ProcBody, StateDecl, Transition, Assign, VariableDecl, DeclId, Initialiser, BinaryIntExpression, WrapBoolExpr, Or, And, Not, Comparison, BitComplement, UnaryMinus
}
