/*
* generated by Xtext
*/
package fr.lip6.move.ui.labeling;

import org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider;
import org.eclipse.xtext.ui.label.DefaultEObjectLabelProvider;

import com.google.inject.Inject;

import fr.lip6.move.gal.And;
import fr.lip6.move.gal.ArrayVarAccess;
import fr.lip6.move.gal.Assignment;
import fr.lip6.move.gal.BinaryIntExpression;
import fr.lip6.move.gal.Call;
import fr.lip6.move.gal.Comparison;
import fr.lip6.move.gal.ComparisonOperators;
import fr.lip6.move.gal.Constant;
import fr.lip6.move.gal.IntExpression;
import fr.lip6.move.gal.InvariantProp;
import fr.lip6.move.gal.Label;
import fr.lip6.move.gal.NeverProp;
import fr.lip6.move.gal.Not;
import fr.lip6.move.gal.Or;
import fr.lip6.move.gal.Property;
import fr.lip6.move.gal.ReachableProp;
import fr.lip6.move.gal.Transition;
import fr.lip6.move.gal.Variable;
import fr.lip6.move.gal.VariableRef;

/**
 * Provides labels for a EObjects.
 * 
 * Icons should be located in folder named "icons" at project root folder
 *  
 * see http://www.eclipse.org/Xtext/documentation/latest/xtext.html#labelProvider
 */
public class GalLabelProvider extends DefaultEObjectLabelProvider {

	@Inject
	public GalLabelProvider(AdapterFactoryLabelProvider delegate) {
		super(delegate);
	}


	
	/**
	 * Returns description of a Gal variable
	 */
	String text(Variable var) 
	{
		return var.getName() + " = " + getText(var.getValue()) ;
	}
	
	String text(BinaryIntExpression bin) {
		return getText(bin.getLeft()) + bin.getOp().toString() + getText(bin.getRight());
	}

	String text (VariableRef vref) {
			return vref.getReferencedVar().getName();
	}
	
	String text (ArrayVarAccess ava) {
		return ava.getPrefix().getName() + "[" + getText(ava.getIndex()) + "]";
	}
	
	String text (Assignment ass) {
		return getText(ass.getLeft()) + "=" + getText(ass.getRight());
	}
	
	String text(Constant c)
	{
		return Integer.toString(c.getValue());
	}
	
	String text(And and) {
		return getText(and.getLeft()) + " && " + getText(and.getRight());
	}

	String text(Or or) {
		return "(" + getText(or.getLeft()) + " || " + getText(or.getRight()) + ")";
	}

	String text(Not not) {
		return "!" + getText(not.getValue());
	}
	
	String text(Comparison comp) {
		return getText(comp.getLeft()) + getText(comp.getOperator()) + getText(comp.getRight());
	}
	
	String text(ComparisonOperators op) {
		switch (op) {
		case EQ : return "==";
		case GE : return ">=";
		case GT : return ">";
		case LE : return "<=";
		case LT : return "<";
		case NE : return "!=";
		default : return "unknown operator";
		}
		
		
	}
	
	String text(Call call) {
		return "self.\""+ call.getLabel().getName() + "\"";
	}
	
	String text (InvariantProp ip) {
		return "[invariant] : " + getText(ip.getPredicate()) ;
	}
	
	String text (ReachableProp rp) {
		return "[reachable] : " + getText(rp.getPredicate()) ;
	}
	
	String text (NeverProp ip) {
		return "[never] : " + getText(ip.getPredicate()) ;
	}
	
	String text (Property p) {
		return "property " + p.getName() + " " + getText(p.getBody());
	}
	
	/**
	 * Describes an array. This will show here initial values of array
	 */
	String text(fr.lip6.move.gal.ArrayPrefix array)
	{		
		try 
		{
			StringBuilder sb = new StringBuilder( array.getName() + "[" + array.getSize() + "]");
			
			sb.append("= (");
			boolean first=true;
			for (IntExpression val : array.getValues()) {
				if (first) {
					first = false;
				} else {
					sb.append(",");
				}
				sb.append(getText(val));
			}
			sb.append(")");
			
			return sb.toString() ; 
			
		} catch(Exception e) { return array.getName() + " : Array" ;}
	}
	
	String text(Label lab) {
		return "label \"" +lab.getName()+ "\""; 
	}
	
	String text(Transition t)
	{
		String ret = "transition " + t.getName() ; 
		if(t.getLabel() != null)
		{
			ret += " label \"" + t.getLabel().getName() +"\"" ; 
		}
		return ret ;
	}
	
	
}