/*
* generated by Xtext
*/
package fr.lip6.move.ui.labeling;

import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider;
import org.eclipse.xtext.ui.label.DefaultEObjectLabelProvider;

import com.google.inject.Inject;

import fr.lip6.move.gal.List;
import fr.lip6.move.gal.Transition;
import fr.lip6.move.gal.Variable;

/**
 * Provides labels for a EObjects.
 * 
 * Pour les icones, créer un dossier icons/ (à la racine du projet) et
 * y mettre les images. 
 * see http://www.eclipse.org/Xtext/documentation/latest/xtext.html#labelProvider
 */
public class GalLabelProvider extends DefaultEObjectLabelProvider {

	@Inject
	public GalLabelProvider(AdapterFactoryLabelProvider delegate) {
		super(delegate);
	}


	//Labels and icons can be computed like this:
	
	/**
	 * Returns description of a Gal variable
	 */
	String text(Variable var) 
	{
		return var.getName() + " = " + var.getValue() + " (initial value)" ;
	}
	String text(List l)
	{
		return l.getName() + " : List" ;
	}
	/**
	 * Describes an array. This will show here initial values of array
	 */
	String text(fr.lip6.move.gal.ArrayPrefix array)
	{
		try 
		{
			int size = array.getSize() ; 
			if(size == 0)
				return array.getName() + " : Array" ; 
			else
			{
				EList<Integer> listValues = array.getValues().getValues() ; 
				String result = array.getName() + " : initialized with: ("+ array.getValues().getValues().get(0) ;
				
				for(int i=1; i< size; i++)
					result += "," + listValues.get(i) ; 
				
				result+= ")"; 
				
				return result ; 
			}
		}catch(Exception e) { return array.getName() + " : Array" ;}
	}
	
	String text(Transition t)
	{
		String ret = t.getName() + ": Transition " ; 
		if(t.getLabel() != null)
		{
			ret += "(label: " + t.getLabel() +")" ; 
		}
		return ret ;
	}
	
/*	 
    String image(MyModel ele) {
      return "MyModel.gif";
    }
*/
}