<body bgcolor=#ffffff>
<html>
<TITLE>PROMELA GRAMMAR</TITLE>
<p>
<h1><tt>Spin Version 3.0 -- Promela Grammar Definition</tt></H1>
<p>
The following list defines the grammar of the input
language for the SPIN model checker version 3.0.
The notational conventions are as follows.
<ul>
<li>
Choices are separated by vertical bars: |
<li>
Optional parts are included in square brackets: [ ... ]
<li>
A Kleene star * indicates zero or more repetitions of the immediately
preceding fragment
<li>
Literals are enclosed in single quotes: ' ... '
<li>
Uppercase names refer to tokens (i.e., terminals) representing keywords.
In Promela models, the keywords are spelled like these token names,
but in lowercase instead of uppercase.
<li>
Lowercase names refer to grammar rules from this list.
</ul>
The name <em><a name="any_ascii_char">any_ascii_char</a></em> refers to any printable
ASCII character except the double quote character: <b>"</b>.
<p>
The statement <a href="separators.html">separator</a> used in this list
is the semi-colon ';'.
In most cases the semi-colon can be replaced with a two-character
arrow symbol: '->', without change of meaning.
<p>
In the list that follows all
non-terminals are linked to the production rule where they
are defined, and all terminals are linked to the online
man-pages for the defining elements of the language.
<h1><tt>Grammar Rules</tt></h1>
<pre>
spec	: <a href="#module">module</a> [ <a href="#module">module</a> ] *

<a name="module">module</a>	: <a href="#proctype">proctype</a>	/* proctype declaration */
	| <a href="#init">init</a>		/* init process         */
	| <a href="#never">never</a>		/* never claim          */
	| <a href="#trace">trace</a>		/* event trace, 3.0 only*/
	| <a href="#typedef">utype</a>		/* user defined types   */
	| <a href="#mtype">mtype</a>		/* mtype declaration    */
	| <a href="#decl_lst">decl_lst</a>	/* global vars, chans   */

<a name="proctype">proctype</a>: [ <a href="#active">active</a> ] <a href="proctype.html">PROCTYPE</a> <a href="#name">name</a> '(' [ <a href="#decl_lst">decl_lst</a> ]')'
	  [ <a href="#priority">priority</a> ] [ <a href="#enabler">enabler</a> ] '{' <a href="#sequence">sequence</a> '}'

<a name="init">init</a>	: <a href="init.html">INIT</a> [ <a href="#priority">priority</a> ] '{' <a href="#sequence">sequence</a> '}'

<a name="never">never</a>	: <a href="never.html">NEVER</a>	'{' <a href="#sequence">sequence</a> '}'

<a name="trace">trace</a>	: <a href="trace.html">TRACE</a> '{' <a href="#sequence">sequence</a> '}'

<a name="typedef">utype</a>	: <a href="typedef.html">TYPEDEF</a> <a href="#name">name</a> '{' <a href="#decl_lst">decl_lst</a> '}'

<a name="mtype">mtype</a>	: <a href="mtype.html">MTYPE [ '=' ]</a> '{' <a href="#name">name</a> [ ',' <a href="#name">name</a> ] * '}'

<a name="decl_lst">decl_lst</a>: <a href="#one_decl">one_decl</a> [ <a href="separators.html">';'</a> <a href="#one_decl">one_decl</a> ] *

<a name="one_decl">one_decl</a>: [ <a href="#visible">visible</a> ] <a href="#typename">typename</a>  <a href="#ivar">ivar</a> [',' <a href="#ivar">ivar</a> ] *

<a name="typename">typename</a>: <a href="datatypes.html">BIT | BOOL | BYTE | SHORT | INT</a> | <a href="mtype.html">MTYPE</a> | <a href="chan.html">CHAN</a>
	| <a href="typedef.html">uname</a>	/* user defined type names (see utype) */

<a name="active">active</a>  : <a href="active.html">ACTIVE</a> [ '[' <a href="#const">const</a> ']' ]	/* instantiation */

<a name="priority">priority</a>: <a href="priority.html">PRIORITY</a> <a href="#const">const</a>	/* simulation priority */

<a name="enabler">enabler</a> : <a href="provided.html">PROVIDED</a> '(' <a href="#expr">expr</a> ')'	/* execution constraint */

<a name="visible">visible</a>	: <a href="hidden.html">HIDDEN</a> | <a href="show.html">SHOW</a>

<a name="sequence">sequence</a>: <a href="#step">step</a> [ <a href="separators.html">';'</a> <a href="#step">step</a> ] *

<a name="step">step</a>    : <a href="#stmnt">stmnt</a>	[ <a href="unless.html">UNLESS</a> <a href="#stmnt">stmnt</a> ]
	| <a href="#decl_lst">decl_lst</a>
	| <a href="xr.html">XR</a> <a href="#varref">varref</a> [',' <a href="#varref">varref</a> ] *
	| <a href="xs.html">XS</a> <a href="#varref">varref</a> [',' <a href="#varref">varref</a> ] *

<a name="ivar">ivar</a>    : <a href="#name">name</a> [ <a href="arrays.html">'['</a> <a href="#const">const</a> <a href="arrays.html">']'</a> ] [ '=' <a href="#any_expr">any_expr</a> | '=' <a href="#ch_init">ch_init</a> ]

<a name="ch_init"><a href="chan.html">ch_init</a></a> : '[' <a href="#const">const</a> ']' <a href="chan.html">OF</a> '{' <a href="#typename">typename</a> [ ',' <a href="#typename">typename</a> ] * '}'

<a name="varref">varref</a>	: <a href="#name">name</a> [ <a href="arrays.html">'['</a> <a href="#any_expr">any_expr</a> <a href="arrays.html">']'</a> ] [ <a href="typedef.html">'.'</a> <a href="#varref">varref</a> ]

<a href="send.html">send</a>    : <a href="#varref">varref</a> '!' <a href="#send_args">send_args</a>		/* normal fifo send */
	| <a href="#varref">varref</a> '!' '!' <a href="#send_args">send_args</a>	/* sorted send */

<a href="receive.html">receive</a> : <a href="#varref">varref</a> '?' <a href="#recv_args">recv_args</a>		/* normal receive */
	| <a href="#varref">varref</a> '?' '?' <a href="#recv_args">recv_args</a>	/* random receive */
	| <a href="#varref">varref</a> '?' '<' <a href="#recv_args">recv_args</a> '>'	/* poll with side-effect */
	| <a href="#varref">varref</a> '?' '?' '<' <a href="#recv_args">recv_args</a> '>'	/* ditto */

<a href="poll.html">poll</a>    : <a href="#varref">varref</a> '?' '[' <a href="#recv_args">recv_args</a> ']'	/* poll without side-effect */
	| <a href="#varref">varref</a> '?' '?' '[' <a href="#recv_args">recv_args</a> ']'	/* ditto */

<a name="send_args">send_args</a>: <a href="#arg_lst">arg_lst</a> | <a href="#any_expr">any_expr</a> '(' <a href="#arg_lst">arg_lst</a> ')'

<a name="arg_lst">arg_lst</a>  : <a href="#any_expr">any_expr</a> [ ',' <a href="#any_expr">any_expr</a> ] *

<a name="recv_args">recv_args</a>: <a href="#recv_arg">recv_arg</a> [ ',' <a href="#recv_arg">recv_arg</a> ] *  |  <a href="#recv_arg">recv_arg</a> '(' <a href="#recv_args">recv_args</a> ')'

<a name="recv_arg">recv_arg</a> : <a href="#varref">varref</a> | <a href="eval.html">EVAL</a> '(' <a href="#varref">varref</a> ')' | [ '-' ] <a href="#const">const</a>

<a href="assign.html">assign</a>  : <a href="#varref">varref</a> '=' <a href="#any_expr">any_expr</a>	/* standard assignment */
	| <a href="#varref">varref</a> '+' '+'	/* increment */
	| <a href="#varref">varref</a> '-' '-'	/* decrement */

<a name="stmnt">stmnt</a>	: <a href="if.html">IF</a> <a href="#options">options</a> <a href="if.html">FI</a>		/* selection */
	| <a href="do.html">DO</a> <a href="#options">options</a> <a href="do.html">OD</a>		/* iteration */
	| <a href="atomic.html">ATOMIC '{' <a href="#sequence">sequence</a> '}'</a>	/* atomic sequence */
	| <a href="d_step.html">D_STEP '{' <a href="#sequence">sequence</a> '}'</a>	/* deterministic atomic */
	| <a href="sequence.html">'{' sequence '}'</a>	/* normal sequence */
	| <a href="send.html">send</a>
	| <a href="receive.html">receive</a>
	| <a href="assign.html">assign</a>
	| <a href="else.html">ELSE</a>			/* used inside options */
	| <a href="break.html">BREAK</a>			/* used inside iterations */
	| <a href="goto.html">GOTO</a> <a href="#name">name</a>
	| <a href="label.html">name ':'</a> <a href="#stmnt">stmnt</a>	/* labeled statement */
	| <a href="printf.html">PRINT</a> '(' <a href="#string">string</a> [ , <a href="#arg_lst">arg_lst</a> ] ')'
	| <a href="assert.html">ASSERT</a> <a href="#expr">expr</a>    
	| <a href="condition.html">expr</a>			/* condition */

<a name="options">options</a> : ':' ':' <a href="#sequence">sequence</a> [ ':' ':' <a href="#sequence">sequence</a> ] *

<a name="andor">andor</a>	: '&' '&' | '|' '|'

<a name="binarop">binarop</a>	: '+' | '-' | '*' | '/' | '%' | '&' | '^' | '|'
	| '>' | '<' | '>' '=' | '<' '=' | '=' '=' | '!' '='
	| '<' '<' | '>' '>' | <a href="#andor">andor</a>

<a name="unarop">unarop</a>	: '~' | '-' | '!'

<a name="any_expr">any_expr</a>: '(' <a href="#any_expr">any_expr</a> ')'
	| <a href="#any_expr">any_expr</a> <a href="#binarop">binarop</a> <a href="#any_expr">any_expr</a>
	| <a href="#unarop">unarop</a> <a href="#any_expr">any_expr</a>
	| <a href="cond_expr.html">'(' <a href="#any_expr">any_expr</a> '-' '>' <a href="#any_expr">any_expr</a> ':' <a href="#any_expr">any_expr</a> ')'</a>
	| <a href="len.html">LEN</a> '(' <a href="#varref">varref</a> ')'	/* nr of messages in chan */
	| <a href="poll.html">poll</a>
	| <a href="#varref">varref</a>
	| <a href="#const">const</a> 
	| <a href="timeout.html">TIMEOUT</a>
	| <a href="np_.html">NP_</a>			/* non-progress system state */
	| <a href="enabled.html">ENABLED</a> '(' <a href="#any_expr">any_expr</a> ')'		/* refers to a <a href="_pid.html">pid</a> */
	| <a href="pc_cal.html">PC_VAL</a> '(' <a href="#any_expr">any_expr</a> ')'		/* refers to a <a href="_pid.html">pid</a> */
	| <a href="remoterefs.html">name '[' any_expr ']' '@' name</a>	/* refers to a <a href="_pid.html">pid</a> */
	| <a href="run.html">RUN</a> <a href="#name">name</a> '(' [ <a href="#arg_lst">arg_lst</a> ] ')' [ <a href="#priority">priority</a> ]

<a name="expr">expr</a>	: <a href="#any_expr">any_expr</a>
	| '(' <a href="#expr">expr</a> ')'
	| <a href="#expr">expr</a> <a href="#andor">andor</a> <a href="#expr">expr</a>
	| <a href="#chanpoll">chanpoll</a> '(' <a href="#varref">varref</a> ')'	/* may not be negated */

<a name="chanpoll">chanpoll</a>: <a href="full.html">FULL</a> | <a href="empty.html">EMPTY</a> | <a href="nfull.html">NFULL</a> | <a href="nempty.html">NEMPTY</a>

<a name="string">string</a>	: '"' [ <a href="#any_ascii">any_ascii_char</a> ] * '"'

<a href="typedef.html">uname</a>	: <a href="#name">name</a>

<a name="name">name</a>	: <a href="#alpha">alpha</a> [ <a href="#alpha">alpha</a> | <a href="#number">number</a> ] *

<a name="const">const</a>	: <a href="true.html">TRUE</a> | <a href="false.html">FALSE</a> | <a href="skip.html">SKIP</a> | <a href="#number">number</a> [ <a href="#number">number</a> ] *

<a name="alpha">alpha</a>	: 'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j'
	| 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't'
	| 'u' | 'v' | 'w' | 'x' | 'y' | 'z'
	| 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J'
	| 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T'
	| 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z'
	| '_'

<a name="number">number</a>	: '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9'
</pre>
<hr>
<table cols=3>
<tr>
<tr>
<td valign=top width=200>
<a href="index.html">Spin Online References</a><br>
<a href="promela.html">Promela Manual Index</a><br>
<a href="http://netlib.bell-labs.com/netlib/spin/whatispin.html">Spin HomePage</a>
</td>
<td valign=top width=200 align=center></td>
<td valign=top width=400 align=right>
<font size="3"><b><tt>(Page Updated: 10 August 1997)</tt></font></b></td></tr>
</table>
</html>
