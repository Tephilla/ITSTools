/*
* generated by Xtext
*/
package fr.lip6.move.promela.ui.quickfix

import org.eclipse.xtext.ui.editor.quickfix.Fix
import fr.lip6.move.promela.validation.PromelaValidator
import org.eclipse.xtext.validation.Issue
import org.eclipse.xtext.ui.editor.quickfix.IssueResolutionAcceptor
import fr.lip6.move.promela.promela.DefineIntMacro
import fr.lip6.move.promela.promela.VariableDeclaration
import fr.lip6.move.promela.promela.PromelaFactory
import fr.lip6.move.promela.promela.InitProcess
import fr.lip6.move.promela.promela.NamedProcess
import fr.lip6.move.promela.promela.Iteration
import fr.lip6.move.promela.promela.Selection
import fr.lip6.move.promela.promela.For
import fr.lip6.move.promela.promela.Atomic

//import org.eclipse.xtext.ui.editor.quickfix.Fix
//import org.eclipse.xtext.ui.editor.quickfix.IssueResolutionAcceptor
//import org.eclipse.xtext.validation.Issue
/**
 * Custom quickfixes.
 *
 * see http://www.eclipse.org/Xtext/documentation.html#quickfixes
 */
class PromelaQuickfixProvider extends org.eclipse.xtext.ui.editor.quickfix.DefaultQuickfixProvider {

	//	@Fix(MyDslValidator::INVALID_NAME)
	//	def capitalizeName(Issue issue, IssueResolutionAcceptor acceptor) {
	//		acceptor.accept(issue, 'Capitalize name', 'Capitalize the name.', 'upcase.png') [
	//			context |
	//			val xtextDocument = context.xtextDocument
	//			val firstLetter = xtextDocument.get(issue.offset, 1)
	//			xtextDocument.replace(issue.offset, 1, firstLetter.toUpperCase)
	//		]
	//	}
	@Fix(PromelaValidator::PROMELA_GOTO_DEADCODE)
	def removeDeadCode(Issue issue, IssueResolutionAcceptor acceptor) {
		acceptor.accept(issue, "Delete dead code", "Delete dead code", null,
			[ context |
				//on rajoute +1 pour le ;
				context.xtextDocument.replace(issue.offset, issue.length + 1, "");
			])
	}

	@Fix(PromelaValidator::PROMELA_MACRO_UPPERCASE)
	def capitalizeMacro(Issue issue, IssueResolutionAcceptor acceptor) {
		acceptor.accept(issue, 'Capitalize the macro name', 'Capitalize the macro name.', 'upcase.png') [ element, context |
			(element as DefineIntMacro).setName(issue.data.get(0).toUpperCase)
		]
	}

	@Fix(PromelaValidator::PROMELA_DOUBLE_VARIABLE)
	def renameDoubleVariable(Issue issue, IssueResolutionAcceptor acceptor) {
		acceptor.accept(issue, "Rename duplicate variable", "Duplicate variable declaration : Rename duplicate variable",
			null,
			[ element, context |
				//on rajoute +1 pour le ;
				//context.xtextDocument.replace(issue.offset,issue.length+1,"");
				(element as VariableDeclaration).setName(issue.data.get(0).concat("_1"))
			])
	}

	@Fix(PromelaValidator::PROMELA_UNUSED_VARIABLE)
	def removeUnusedVariable(Issue issue, IssueResolutionAcceptor acceptor) {
		acceptor.accept(issue, "Remove Unused Variable", "Remove unused variable", null,
			[ context |
				//on rajoute +1 pour le ;
				context.xtextDocument.replace(issue.offset, issue.length + 1, "");
			])
	}

	@Fix(PromelaValidator::PROMELA_STEP_SKIP)
	def putSkipInsteadOfEmptySequence(Issue issue, IssueResolutionAcceptor acceptor) {

		acceptor.accept(issue, "Add Skip", "add Skip", null,
			[ element, context |
				if (element instanceof InitProcess) {
					(element as InitProcess).corps.steps.add(PromelaFactory.eINSTANCE.createSkip)

				}
				if (element instanceof NamedProcess) {
					(element as NamedProcess).corps.steps.add(PromelaFactory.eINSTANCE.createSkip)

				}
				if (element instanceof Iteration) {
					val seq = PromelaFactory.eINSTANCE.createSequence();
					(element as Iteration).options.set(0, seq)
					seq.steps.add(PromelaFactory.eINSTANCE.createSkip)
				}
				if (element instanceof Selection) {
					val seq = PromelaFactory.eINSTANCE.createSequence();
					(element as Selection).options.set(0, seq)
					seq.steps.add(PromelaFactory.eINSTANCE.createSkip)
				}
				if (element instanceof For) {
					(element as For).corps.steps.add(PromelaFactory.eINSTANCE.createSkip)
				}
				if (element instanceof Atomic) {
					(element as Atomic).corps.steps.add(PromelaFactory.eINSTANCE.createSkip)
				}
				
			])

	//	
	//	}
	}

}
