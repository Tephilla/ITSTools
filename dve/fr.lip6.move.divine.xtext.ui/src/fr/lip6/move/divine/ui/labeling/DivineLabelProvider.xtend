/*
* generated by Xtext
*/
package fr.lip6.move.divine.ui.labeling

import com.google.inject.Inject
import fr.lip6.move.divine.divine.Array
import fr.lip6.move.divine.divine.ArrayReference
import fr.lip6.move.divine.divine.ArrayVarAccess
import fr.lip6.move.divine.divine.Assign
import fr.lip6.move.divine.divine.BooleanLiteral
import fr.lip6.move.divine.divine.BooleanNegation
import fr.lip6.move.divine.divine.Channel
import fr.lip6.move.divine.divine.ChannelDeclaration
import fr.lip6.move.divine.divine.Comparison
import fr.lip6.move.divine.divine.Constant
import fr.lip6.move.divine.divine.ConstantDeclaration
import fr.lip6.move.divine.divine.Effect
import fr.lip6.move.divine.divine.Guard
import fr.lip6.move.divine.divine.MultiDivMod
import fr.lip6.move.divine.divine.NumberLiteral
import fr.lip6.move.divine.divine.OrAndXor
import fr.lip6.move.divine.divine.Plus
import fr.lip6.move.divine.divine.Process
import fr.lip6.move.divine.divine.Recv
import fr.lip6.move.divine.divine.Send
import fr.lip6.move.divine.divine.Shift
import fr.lip6.move.divine.divine.State
import fr.lip6.move.divine.divine.StateDeclaration
import fr.lip6.move.divine.divine.StringLiteral
import fr.lip6.move.divine.divine.SystemType
import fr.lip6.move.divine.divine.Transition
import fr.lip6.move.divine.divine.Variable
import fr.lip6.move.divine.divine.VariableDeclaration
import fr.lip6.move.divine.divine.VariableOrConstantReference
import fr.lip6.move.divine.divine.VariableRef
import fr.lip6.move.divine.divine.impl.MinusImpl
import org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider
import org.eclipse.xtext.ui.label.DefaultEObjectLabelProvider

/**
 * Provides labels for a EObjects.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#labelProvider
 */
class DivineLabelProvider extends DefaultEObjectLabelProvider {

	@Inject
	new(AdapterFactoryLabelProvider delegate) {
		super(delegate);
	}

	// Labels and icons can be computed like this:
	
	def text(ChannelDeclaration ele) {
		'Channels :' 
	}


	def text(Array ele) {
		 ele.name +': Array' 
	}
	def text(Send e){
		e.channel.name +" : Sending-channel"
	}
	def text(Recv e){
		e.channel.name +" : Receiving-channel"
	}
	def text(ConstantDeclaration ele) {
		'Constant(s) : '+ele.type 
	}
	def text(Constant ele) {
		ele.name + ":"+ele.initValue	}
	def text(Variable ele) {
		ele.getName + " = " + ele.initValue + " (initial value)"
	}
	def text(VariableDeclaration ele) {
		"Variable(s) :" + ele.type
	}
	
	def text(Transition ele) {
		ele.src.name + '->'+ele.dest.name +' : Transition ' 
	}
	
	def text(Process ele) {
	ele.name +': Process  '
	}
	
	def text(Effect ele) {
		'Effect(s) :' 
	}
	
	def text(ArrayReference ele) {
		 ele.ref.getPrefix().getName() +" array item" ; 
	}
	def text(Assign ele) {
		'Assignement(s) : ' 
	}
	def text(Guard ele) {
		'Guard :' 
	}
	def text(Channel ele) {
		ele.name
	}
	def text(SystemType ele) {
		ele.systemType +": Divine System " 
	}

	def text(StateDeclaration ele) {
		'States :'
	}
	def text(State ele) {
		ele.name
	}
	def  text(MultiDivMod e)
	{
		/* Print arithmetic operation */
		var op = e.getOp ;
		
		if("*".equals(op)) return "MULT" ;
		if("/".equals(op)) return "DIV" ;
		if("%".equals(op)) return "MOD"

		
	}
	
	def  text(NumberLiteral e)
	{
		/* Print arithmetic operation */
	   e.value

		
	}
	def  text(OrAndXor e)
	{
		/* Print arithmetic operation */
		var op = e.op ;
		if("|".equals(op) ||("||".equals(op) )) return "BIT OR" ;
		if("^".equals(op)) return "BIT XOR" ;
	    if("&".equals(op) || ("&".equals(op))) return "BIT AND" ;
		
		}
	
	def  text(Shift e)
	{
	     "shift : "+ e.op
		
		
		}
	def  text(Comparison e)
	{
		return "Comparison : " + e.op
	}
	
		
	def  text(Plus e)
	{
		/* Print arithmetic operation */
		  e.op+ ": ADD"
		}
		
	def  text(MinusImpl e)
	{
		/* Print arithmetic operation */
		  e.op +" : MINUS"
		}
		
	def  text(ArrayVarAccess e)
	{
		 e.getPrefix().getName() + " : Array item" ; 
	}
	
	def  text(StringLiteral e)
	{
		 e.value
	}
	
	def  text(VariableRef e)
	{
		e.referencedVar.name +" : Variable"
		}
	
	def  text(VariableOrConstantReference e)
	{
		
		e.ref.name +" : Variable"
		}
	
	def  text(BooleanLiteral e)
	{
		
		e.value
		}
		
	def  text(BooleanNegation e)
	{
		
		"NOT"
		}
		
}
