/*
 * generated by Xtext
 */
package fr.lip6.move.divine.validation

import fr.lip6.move.divine.divine.Array
import fr.lip6.move.divine.divine.Channel
import fr.lip6.move.divine.divine.ChannelDeclaration
import fr.lip6.move.divine.divine.Constant
import fr.lip6.move.divine.divine.ConstantDeclaration
import fr.lip6.move.divine.divine.DivinePackage
import fr.lip6.move.divine.divine.DivineSpecification
import fr.lip6.move.divine.divine.Variable
import fr.lip6.move.divine.divine.VariableDeclaration
import org.eclipse.emf.ecore.EObject
import org.eclipse.xtext.validation.Check

//import org.eclipse.xtext.validation.Check
/**
 * Custom validation rules. 
 *
 * see http://www.eclipse.org/Xtext/documentation.html#validation
 */
class DivineValidator extends AbstractDivineValidator {

	public static val INVALID_ARRAY_SIZE_EXEED_CONTENT = 'invalide Array Size'

	public static val INVALID_ARRAY_CONTENT_EXEED_SIZE = 'invalide Array initialization'
	public static val DUPLICATED_NAME = "Duplicated name "
	public static val NOT_INITIALIZED = "no initialized "

public static val VAR_NOT_INITIALIZED ="not initialized"

	//
	@Check
	def checkArraySizeMatchContent(Array array) {
		var arraySize = array.size;
		var arrayContentSize = array.initValue.size;
		if (arrayContentSize == 0) return ;
//			warning("the array may have not been initialized , change array size to much its content  ",
//					DivinePackage.Literals.ARRAY__NAME, NOT_INITIALIZED)
//					
		
	 	if (arraySize != arrayContentSize) {
			if (arraySize > arrayContentSize)
				error("the array defined size does not match the array content size  , change array size to match its content   ",
					DivinePackage.Literals.ARRAY__NAME, INVALID_ARRAY_SIZE_EXEED_CONTENT)
			else
				error(
					'there are too much arguments , you need to remove ' + (-arraySize + arrayContentSize) +
						' argument(s) to match the array size', DivinePackage.Literals.ARRAY__NAME, INVALID_ARRAY_CONTENT_EXEED_SIZE)
		}

	}

	// cumpute the divinespecification using one of its type
	def getSystem(EObject call) {
		var EObject parent = call.eContainer();
		while (parent != null && !(parent instanceof DivineSpecification)) {
			parent = parent.eContainer();
		}

		return parent as DivineSpecification;
	}
	
	// return parent process of local variable
	def getProcess(Variable v) {
		var EObject parent = v.eContainer();
		while (parent != null && !(parent instanceof fr.lip6.move.divine.divine.Process)) {
			parent = parent.eContainer();
		}
		
		if (parent == null)
			return null;

		return parent as fr.lip6.move.divine.divine.Process;
	}
	
	// return parent process of local array
	def getProcess(Array a) {
		var EObject parent = a.eContainer();
		while (parent != null && !(parent instanceof fr.lip6.move.divine.divine.Process)) {
			parent = parent.eContainer();
		}
		
		if (parent == null)
			return null;

		return parent as fr.lip6.move.divine.divine.Process;
	}

	// check if a variable name is duplicated and rise an error
	@Check
	def checkVarNameNotDuplicated(Variable v) {

		var fr.lip6.move.divine.divine.Process p = getProcess(v);
		if (p != null) {
			for (VariableDeclaration varr : p.variablesDec) {
				for (Variable vari : varr.variables) {
					if (v != vari && v.name == vari.name) {
						error(
							"The name " + v.name + " is already used for another local variable declaration  ", /* Error Message */
							v, /* Object Source of Error */
							DivinePackage.Literals.REFERENCE__NAME, /* wrong Feature */
							DUPLICATED_NAME
						);
					}
				}
			}
		}
		else { // Variable globale
			var DivineSpecification dev = getSystem(v);
			for (VariableDeclaration varr : dev.variablesDecl) {
				for (Variable vari : varr.variables) {
					if (v != vari && v.name == vari.name && getProcess(vari) == null) {
						error(
							"The name " + v.name + " is already used for another global variable declaration  ", /* Error Message */
							v, /* Object Source of Error */
							DivinePackage.Literals.REFERENCE__NAME, /* wrong Feature */
							DUPLICATED_NAME
						);
					}
				}
			}
		}
	}

	// check if the array  name is duplicated and rise a error
	@Check
	def checkArrayNameNotDuplicated(Array a) {

		var fr.lip6.move.divine.divine.Process p = getProcess(a);
		if (p != null) {
			for (VariableDeclaration vardec : p.variablesDec) {
				for (Array arr : vardec.arrays) {
					if (a != arr && a.name == arr.name) {
						error(
							"The name " + a.name + " is already used for another local array declaration  ", /* Error Message */
							a, /* Object Source of Error */
							DivinePackage.Literals.ARRAY__NAME, /* wrong Feature */
							DUPLICATED_NAME
						);
					}
				}
			}
		}
		else { // Array global
			var DivineSpecification divine = getSystem(a);
			for (VariableDeclaration vardec : divine.variablesDecl) {
				for (Array arr : vardec.arrays) {
					if (a != arr && a.name == arr.name && getProcess(arr) == null) {
						error(
							"The name " + a.name + " is already used for another global array declaration  ", /* Error Message */
							a, /* Object Source of Error */
							DivinePackage.Literals.ARRAY__NAME, /* wrong Feature */
							DUPLICATED_NAME
						);
					}
				}
			}
		}
	}

	// check if the channel  name is duplicated and rise a error
	//	@Check
	def checkArrayNameNotDuplicated(Channel v) {

		var DivineSpecification dev = getSystem(v);

		for (ChannelDeclaration ch : dev.channelsDecl) {

			for (Channel c : ch.channels) {
				if (v.name == c.name && v != c) {
					error(
						"The name " + v.name + " is already used for another channel declaration  ", /* Error Message */
						v, /* Object Source of Error */
						DivinePackage.Literals.CHANNEL__NAME, /* wrong Feature */
						DUPLICATED_NAME
					);
				}
			}
		}

	}

//@Check
//	def checkConstinit(Constant v) {
//
//		var DivineSpecification dev = getSystem(v);
//
//		for (ConstantDeclaration varr : dev.constantsDecl) {
//			for (Constant vari : varr.constants) {
//				if (vari.initValue ==null){
//					
//					warning(
//						"the constant  have not been initialized ", /* Error Message */
//						v, /* Object Source of Error */
//						DivinePackage.Literals.REFERENCE__NAME, /* wrong Feature */
//						VAR_NOT_INITIALIZED
//					);
//				
//				}
//				}
//				}
//			}
	//		 check if a constant name is duplicated and rise a error
	@Check
	def checkConstNameNotDuplicated(Constant v) {

		var DivineSpecification dev = getSystem(v);

		for (ConstantDeclaration varr : dev.constantsDecl) {
			for (Constant vari : varr.constants) {
				if (v.name == vari.name && v != vari) {
					error(
						"The name " + v.name + " is already used for another Constant declaration  ", /* Error Message */
						v, /* Object Source of Error */
						DivinePackage.Literals.REFERENCE__NAME, /* wrong Feature */
						DUPLICATED_NAME
					);}
				
			}
		}
	}

}
