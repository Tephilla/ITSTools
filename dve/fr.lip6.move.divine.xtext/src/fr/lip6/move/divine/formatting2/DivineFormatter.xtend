/*
 * generated by Xtext 2.11.0
 */
package fr.lip6.move.divine.formatting2

import com.google.inject.Inject
import fr.lip6.move.divine.divine.ChannelDeclaration
import fr.lip6.move.divine.divine.Constant
import fr.lip6.move.divine.divine.ConstantDeclaration
import fr.lip6.move.divine.divine.DivineSpecification
import fr.lip6.move.divine.divine.VariableDeclaration
import fr.lip6.move.divine.services.DivineGrammarAccess
import org.eclipse.xtext.formatting2.AbstractFormatter2
import org.eclipse.xtext.formatting2.IFormattableDocument

class DivineFormatter extends AbstractFormatter2 {
	
	@Inject extension DivineGrammarAccess

	def dispatch void format(DivineSpecification divineSpecification, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (VariableDeclaration variableDeclaration : divineSpecification.getVariablesDecl()) {
			variableDeclaration.format;
		}
		for (ConstantDeclaration constantDeclaration : divineSpecification.getConstantsDecl()) {
			constantDeclaration.format;
		}
		for (ChannelDeclaration channelDeclaration : divineSpecification.getChannelsDecl()) {
			channelDeclaration.format;
		}
		for (fr.lip6.move.divine.divine.Process process : divineSpecification.getProcesses()) {
			process.format;
		}
		divineSpecification.getSystemType.format;
	}

	def dispatch void format(ConstantDeclaration constantDeclaration, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (Constant constant : constantDeclaration.getConstants()) {
			constant.format;
		}
	}
	
	// TODO: implement for Constant, VariableDeclaration, Variable, Array, ChannelDeclaration, Process, StateDeclaration, Transition, Guard, Send, Recv, Effect, Assign, AndOr, OrAndXor, Comparison, Shift, MultiDivMod, BooleanNegation, ArithmeticSigned, Tilde, ArrayReference, ProcessReference, ArrayVarAccess, Plus, Minus
}
