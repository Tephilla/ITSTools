Read sliding02.ctl
/* ProMeLa Program sliding02 */
/* Timeouts are:
[0->15]	  timeout;
[0->15]	  timeout;
*/
/* User UserTypes: */


/* Global Variables and Channels: */
chan q0 = [6] of {int};/* index: -6 */
chan q1 = [6] of {int};/* index: -7 */

/* Processes: */
active [1] proctype p0() { /* index: -17 */
  int NextFrame;/* index: -9 */
  int AckExp;/* index: -10 */
  int FrameExp;/* index: -11 */
  int r;/* index: -12 */
  int s;/* index: -13 */
  int nbuf;/* index: -14 */
  int i;/* index: -15 */
/* global variables dependences
  chan q1 = [6] of {int};/* index: -7 */
  chan q0 = [6] of {int};/* index: -6 */
no more global variables dependences code is...*/

  [0->23]	{
[0->23]	    do
		    ::
      [0->0]	{
[0->1]	        ((v-14<3));
[1->2]	        v-14 = (v-14+1);
[2->4]	        atomic {
          [2->4]	{
[2->3]	            v-7!v-9;
[3->4]	            v-7!((v-11+3)%4);
          [2->4]	}
[2->4]	        }

[4->0]	        v-9 = ((v-9+1)%4);
[5->0]	        /*end;*/
      [0->0]	}

		    ::
      [0->0]	{
[0->7]	        atomic {
          [0->7]	{
[0->6]	            v-6?v-12;
[6->7]	            v-6?v-13;
          [0->7]	}
[0->7]	        }

[7->10]	        if
		        ::
          [7->10]	{
[7->8]	            ((v-12==v-11));
[8->10]	            v-11 = ((v-11+1)%4);
[9->10]	            /*end;*/
          [7->10]	}

		        ::
          [7->10]	{
[7->10]	            else ->
[10->10]	            /*end;*/
          [7->10]	}

[7->10]	        fi;

[10->0]	        do
		        ::
          [10->10]	{
[10->11]	            (((((v-10<=v-13)&&(v-13<v-9))||((v-10<=v-13)&&(v-9<v-10)))||((v-13<v-9)&&(v-9<v-10))));
[11->12]	            v-14 = (v-14-1);
[12->10]	            v-10 = ((v-10+1)%4);
[13->10]	            /*end;*/
          [10->10]	}

		        ::
          [10->10]	{
[10->0]	            else ->
[14->0]	            break;
[14->10]	            /*end;*/
          [10->10]	}

[10->0]	        od;

[14->0]	        /*end;*/
      [0->0]	}

		    ::
      [0->0]	{
[0->15]	        timeout;
[15->16]	        v-9 = v-10;
[16->17]	        v-15 = 1;
[17->0]	        do
		        ::
          [17->17]	{
[17->18]	            ((v-15<=v-14));
[18->20]	            atomic {
              [18->20]	{
[18->19]	                v-7!v-9;
[19->20]	                v-7!((v-11+3)%4);
              [18->20]	}
[18->20]	            }

[20->21]	            v-9 = ((v-9+1)%4);
[21->17]	            v-15 = (v-15+1);
[22->17]	            /*end;*/
          [17->17]	}

		        ::
          [17->17]	{
[17->0]	            else ->
[23->0]	            break;
[23->17]	            /*end;*/
          [17->17]	}

[17->0]	        od;

[23->0]	        /*end;*/
      [0->0]	}

[0->23]	    od;

  [0->23]	}

}

active [1] proctype p1() { /* index: -18 */
  int NextFrame;/* index: -9 */
  int AckExp;/* index: -10 */
  int FrameExp;/* index: -11 */
  int r;/* index: -12 */
  int s;/* index: -13 */
  int nbuf;/* index: -14 */
  int i;/* index: -15 */
/* global variables dependences
  chan q0 = [6] of {int};/* index: -6 */
  chan q1 = [6] of {int};/* index: -7 */
no more global variables dependences code is...*/

  [0->23]	{
[0->23]	    do
		    ::
      [0->0]	{
[0->1]	        ((v-14<3));
[1->2]	        v-14 = (v-14+1);
[2->4]	        atomic {
          [2->4]	{
[2->3]	            v-6!v-9;
[3->4]	            v-6!((v-11+3)%4);
          [2->4]	}
[2->4]	        }

[4->0]	        v-9 = ((v-9+1)%4);
[5->0]	        /*end;*/
      [0->0]	}

		    ::
      [0->0]	{
[0->7]	        atomic {
          [0->7]	{
[0->6]	            v-7?v-12;
[6->7]	            v-7?v-13;
          [0->7]	}
[0->7]	        }

[7->10]	        if
		        ::
          [7->10]	{
[7->8]	            ((v-12==v-11));
[8->10]	            v-11 = ((v-11+1)%4);
[9->10]	            /*end;*/
          [7->10]	}

		        ::
          [7->10]	{
[7->10]	            else ->
[10->10]	            /*end;*/
          [7->10]	}

[7->10]	        fi;

[10->0]	        do
		        ::
          [10->10]	{
[10->11]	            (((((v-10<=v-13)&&(v-13<v-9))||((v-10<=v-13)&&(v-9<v-10)))||((v-13<v-9)&&(v-9<v-10))));
[11->12]	            v-14 = (v-14-1);
[12->10]	            v-10 = ((v-10+1)%4);
[13->10]	            /*end;*/
          [10->10]	}

		        ::
          [10->10]	{
[10->0]	            else ->
[14->0]	            break;
[14->10]	            /*end;*/
          [10->10]	}

[10->0]	        od;

[14->0]	        /*end;*/
      [0->0]	}

		    ::
      [0->0]	{
[0->15]	        timeout;
[15->16]	        v-9 = v-10;
[16->17]	        v-15 = 1;
[17->0]	        do
		        ::
          [17->17]	{
[17->18]	            ((v-15<=v-14));
[18->20]	            atomic {
              [18->20]	{
[18->19]	                v-6!v-9;
[19->20]	                v-6!((v-11+3)%4);
              [18->20]	}
[18->20]	            }

[20->21]	            v-9 = ((v-9+1)%4);
[21->17]	            v-15 = (v-15+1);
[22->17]	            /*end;*/
          [17->17]	}

		        ::
          [17->17]	{
[17->0]	            else ->
[23->0]	            break;
[23->17]	            /*end;*/
          [17->17]	}

[17->0]	        od;

[23->0]	        /*end;*/
      [0->0]	}

[0->23]	    od;

  [0->23]	}

}

