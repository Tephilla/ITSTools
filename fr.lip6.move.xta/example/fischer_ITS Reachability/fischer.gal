gal fischer ($N = 6, $k = 2) {
	typedef id_t = 0 .. $N ;
	typedef pid_t = 0 .. $N - 1 ;
	int id = $N ;
	array [6] Pstates = (2, 2, 2, 2, 2, 2) ;
	array [6] Pclockx = (0, 0, 0, 0, 0, 0) ;

	transition t1 (pid_t $pid) [id == $N && Pstates [$pid] == 2] label "dtrans" {
		Pstates [$pid] = 1 ;
		Pclockx [$pid] = 0 ;
	}

	transition t2 (pid_t $pid) [Pclockx [$pid] <= $k && Pstates [$pid] == 1] label "dtrans" {
		Pstates [$pid] = 0 ;
		Pclockx [$pid] = 0 ;
		id = $pid ;
	}

	transition t3 (pid_t $pid) [id == $N && Pstates [$pid] == 0] label "dtrans" {
		Pstates [$pid] = 1 ;
		Pclockx [$pid] = 0 ;
	}

	transition t4 (pid_t $pid) [Pclockx [$pid] > $k && $pid == id && Pstates [$pid] == 0] label "dtrans" {
		Pstates [$pid] = 3 ;
		Pclockx [$pid] = 0 ;
	}

	transition t5 (pid_t $pid) [Pstates [$pid] == 3] label "dtrans" {
		Pstates [$pid] = 2 ;
		id = $N ;
	}

	transition elapse [true] label "elapse" {
		for ($pid : id_t) {
			if (Pstates [$pid] == 2 || Pstates [$pid] == 3) {
			}
			if (Pstates [$pid] == 1) {
				if (Pclockx [$pid] <= $k) {
					Pclockx [$pid] = Pclockx [$pid] + 1 ;
				}
				if (! Pclockx [$pid] <= $k) {
					abort ;
				}
			}
			if (Pstates [$pid] == 0) {
				if (! Pclockx [$pid] > $k) {
					Pclockx [$pid] = Pclockx [$pid] + 1 ;
				}
			}
		}
	}

	transition id [true] label "elapse" {
	}

	transition succ [true] {
		fixpoint {
			self."elapse" ;
		}
		self."dtrans" ;
	}
}