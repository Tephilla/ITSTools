/*
* generated by Xtext
*/
grammar InternalTimedAutomata;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package fr.lip6.move.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package fr.lip6.move.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import fr.lip6.move.services.TimedAutomataGrammarAccess;

}

@parser::members {

 	private TimedAutomataGrammarAccess grammarAccess;
 	
    public InternalTimedAutomataParser(TokenStream input, TimedAutomataGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "XTA";	
   	}
   	
   	@Override
   	protected TimedAutomataGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleXTA
entryRuleXTA returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getXTARule()); }
	 iv_ruleXTA=ruleXTA 
	 { $current=$iv_ruleXTA.current; } 
	 EOF 
;

// Rule XTA
ruleXTA returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		{ 
	        newCompositeNode(grammarAccess.getXTAAccess().getVariablesVariableDeclParserRuleCall_0_0_0()); 
	    }
		lv_variables_0_0=ruleVariableDecl		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXTARule());
	        }
       		add(
       			$current, 
       			"variables",
        		lv_variables_0_0, 
        		"VariableDecl");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getXTAAccess().getChannelsChannelDeclParserRuleCall_0_1_0()); 
	    }
		lv_channels_1_0=ruleChannelDecl		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXTARule());
	        }
       		add(
       			$current, 
       			"channels",
        		lv_channels_1_0, 
        		"ChannelDecl");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getXTAAccess().getTypesTypeDeclParserRuleCall_0_2_0()); 
	    }
		lv_types_2_0=ruleTypeDecl		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXTARule());
	        }
       		add(
       			$current, 
       			"types",
        		lv_types_2_0, 
        		"TypeDecl");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getXTAAccess().getTemplatesProcDeclParserRuleCall_0_3_0()); 
	    }
		lv_templates_3_0=ruleProcDecl		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXTARule());
	        }
       		add(
       			$current, 
       			"templates",
        		lv_templates_3_0, 
        		"ProcDecl");
	        afterParserOrEnumRuleCall();
	    }

)
))*(
(
		{ 
	        newCompositeNode(grammarAccess.getXTAAccess().getInstancesInstanceParserRuleCall_1_0()); 
	    }
		lv_instances_4_0=ruleInstance		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXTARule());
	        }
       		add(
       			$current, 
       			"instances",
        		lv_instances_4_0, 
        		"Instance");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getXTAAccess().getSystemSystemParserRuleCall_2_0()); 
	    }
		lv_system_5_0=ruleSystem		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXTARule());
	        }
       		set(
       			$current, 
       			"system",
        		lv_system_5_0, 
        		"System");
	        afterParserOrEnumRuleCall();
	    }

)
))
;







// Entry rule entryRuleInstance
entryRuleInstance returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInstanceRule()); }
	 iv_ruleInstance=ruleInstance 
	 { $current=$iv_ruleInstance.current; } 
	 EOF 
;

// Rule Instance
ruleInstance returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getInstanceAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getInstanceRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)
    { 
        newCompositeNode(grammarAccess.getInstanceAccess().getASSIGNMENTParserRuleCall_1()); 
    }
ruleASSIGNMENT
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getInstanceRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getInstanceAccess().getTypeProcDeclCrossReference_2_0()); 
	}

)
)	otherlv_3='(' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getInstanceAccess().getLeftParenthesisKeyword_3());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getInstanceAccess().getArgsBitOrParserRuleCall_4_0_0()); 
	    }
		lv_args_4_0=ruleBitOr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInstanceRule());
	        }
       		add(
       			$current, 
       			"args",
        		lv_args_4_0, 
        		"BitOr");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_5=',' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getInstanceAccess().getCommaKeyword_4_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInstanceAccess().getArgsBitOrParserRuleCall_4_1_1_0()); 
	    }
		lv_args_6_0=ruleBitOr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInstanceRule());
	        }
       		add(
       			$current, 
       			"args",
        		lv_args_6_0, 
        		"BitOr");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_7=')' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getInstanceAccess().getRightParenthesisKeyword_5());
    }
	otherlv_8=';' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getInstanceAccess().getSemicolonKeyword_6());
    }
)
;





// Entry rule entryRuleSystem
entryRuleSystem returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSystemRule()); }
	 iv_ruleSystem=ruleSystem 
	 { $current=$iv_ruleSystem.current; } 
	 EOF 
;

// Rule System
ruleSystem returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='system' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSystemAccess().getSystemKeyword_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getSystemRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getSystemAccess().getInstancesInstantiableInSystemCrossReference_1_0()); 
	}

)
)(	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getSystemAccess().getCommaKeyword_2_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getSystemRule());
	        }
        }
	otherlv_3=RULE_ID
	{
		newLeafNode(otherlv_3, grammarAccess.getSystemAccess().getInstancesInstantiableInSystemCrossReference_2_1_0()); 
	}

)
))*	otherlv_4=';' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getSystemAccess().getSemicolonKeyword_3());
    }
)
;





// Entry rule entryRuleProcDecl
entryRuleProcDecl returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getProcDeclRule()); }
	 iv_ruleProcDecl=ruleProcDecl 
	 { $current=$iv_ruleProcDecl.current; } 
	 EOF 
;

// Rule ProcDecl
ruleProcDecl returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='process' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getProcDeclAccess().getProcessKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getProcDeclAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getProcDeclRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getProcDeclAccess().getLeftParenthesisKeyword_2());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getProcDeclAccess().getParamsParameterParserRuleCall_3_0_0()); 
	    }
		lv_params_3_0=ruleParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProcDeclRule());
	        }
       		add(
       			$current, 
       			"params",
        		lv_params_3_0, 
        		"Parameter");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getProcDeclAccess().getCommaKeyword_3_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getProcDeclAccess().getParamsParameterParserRuleCall_3_1_1_0()); 
	    }
		lv_params_5_0=ruleParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProcDeclRule());
	        }
       		add(
       			$current, 
       			"params",
        		lv_params_5_0, 
        		"Parameter");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_6=')' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getProcDeclAccess().getRightParenthesisKeyword_4());
    }
	otherlv_7='{' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getProcDeclAccess().getLeftCurlyBracketKeyword_5());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getProcDeclAccess().getBodyProcBodyParserRuleCall_6_0()); 
	    }
		lv_body_8_0=ruleProcBody		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProcDeclRule());
	        }
       		set(
       			$current, 
       			"body",
        		lv_body_8_0, 
        		"ProcBody");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_9='}' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getProcDeclAccess().getRightCurlyBracketKeyword_7());
    }
)
;







// Entry rule entryRuleParameter
entryRuleParameter returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParameterRule()); }
	 iv_ruleParameter=ruleParameter 
	 { $current=$iv_ruleParameter.current; } 
	 EOF 
;

// Rule Parameter
ruleParameter returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getParameterAccess().getTypeTypeParserRuleCall_0_0()); 
	    }
		lv_type_0_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParameterRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_0_0, 
        		"Type");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getParameterAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getParameterRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
))
;





// Entry rule entryRuleTypeDecl
entryRuleTypeDecl returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeDeclRule()); }
	 iv_ruleTypeDecl=ruleTypeDecl 
	 { $current=$iv_ruleTypeDecl.current; } 
	 EOF 
;

// Rule TypeDecl
ruleTypeDecl returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='typedef' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTypeDeclAccess().getTypedefKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTypeDeclAccess().getTypeTypeParserRuleCall_1_0()); 
	    }
		lv_type_1_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeDeclRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_1_0, 
        		"Type");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getTypeDeclAccess().getNameIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeDeclRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"ID");
	    }

)
)	otherlv_3=';' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getTypeDeclAccess().getSemicolonKeyword_3());
    }
)
;





// Entry rule entryRuleType
entryRuleType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeRule()); }
	 iv_ruleType=ruleType 
	 { $current=$iv_ruleType.current; } 
	 EOF 
;

// Rule Type
ruleType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getTypeAccess().getBasicTypeParserRuleCall_0()); 
    }
    this_BasicType_0=ruleBasicType
    { 
        $current = $this_BasicType_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTypeAccess().getTypedefRefParserRuleCall_1()); 
    }
    this_TypedefRef_1=ruleTypedefRef
    { 
        $current = $this_TypedefRef_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleBasicType
entryRuleBasicType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBasicTypeRule()); }
	 iv_ruleBasicType=ruleBasicType 
	 { $current=$iv_ruleBasicType.current; } 
	 EOF 
;

// Rule BasicType
ruleBasicType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getBasicTypeAccess().getIntegerTypeParserRuleCall_0()); 
    }
    this_IntegerType_0=ruleIntegerType
    { 
        $current = $this_IntegerType_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getBasicTypeAccess().getBoolTypeParserRuleCall_1()); 
    }
    this_BoolType_1=ruleBoolType
    { 
        $current = $this_BoolType_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getBasicTypeAccess().getClockTypeParserRuleCall_2()); 
    }
    this_ClockType_2=ruleClockType
    { 
        $current = $this_ClockType_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getBasicTypeAccess().getRangeTypeParserRuleCall_3()); 
    }
    this_RangeType_3=ruleRangeType
    { 
        $current = $this_RangeType_3.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleTypedefRef
entryRuleTypedefRef returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypedefRefRule()); }
	 iv_ruleTypedefRef=ruleTypedefRef 
	 { $current=$iv_ruleTypedefRef.current; } 
	 EOF 
;

// Rule TypedefRef
ruleTypedefRef returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypedefRefRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getTypedefRefAccess().getRefTypeDeclCrossReference_0()); 
	}

)
)
;





// Entry rule entryRuleChannelDecl
entryRuleChannelDecl returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getChannelDeclRule()); }
	 iv_ruleChannelDecl=ruleChannelDecl 
	 { $current=$iv_ruleChannelDecl.current; } 
	 EOF 
;

// Rule ChannelDecl
ruleChannelDecl returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getChannelDeclAccess().getChannelTypeParserRuleCall_0()); 
    }
    this_ChannelType_0=ruleChannelType
    { 
        $current = $this_ChannelType_0.current; 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getChannelDeclAccess().getChansChanIdParserRuleCall_1_0()); 
	    }
		lv_chans_1_0=ruleChanId		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getChannelDeclRule());
	        }
       		add(
       			$current, 
       			"chans",
        		lv_chans_1_0, 
        		"ChanId");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getChannelDeclAccess().getCommaKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getChannelDeclAccess().getChansChanIdParserRuleCall_2_1_0()); 
	    }
		lv_chans_3_0=ruleChanId		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getChannelDeclRule());
	        }
       		add(
       			$current, 
       			"chans",
        		lv_chans_3_0, 
        		"ChanId");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_4=';' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getChannelDeclAccess().getSemicolonKeyword_3());
    }
)
;





// Entry rule entryRuleChanId
entryRuleChanId returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getChanIdRule()); }
	 iv_ruleChanId=ruleChanId 
	 { $current=$iv_ruleChanId.current; } 
	 EOF 
;

// Rule ChanId
ruleChanId returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getChanIdAccess().getNameIDTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getChanIdRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)
;





// Entry rule entryRuleChannelType
entryRuleChannelType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getChannelTypeRule()); }
	 iv_ruleChannelType=ruleChannelType 
	 { $current=$iv_ruleChannelType.current; } 
	 EOF 
;

// Rule ChannelType
ruleChannelType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getChannelTypeAccess().getChannelTypeAction_0(),
            $current);
    }
)	otherlv_1='chan' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getChannelTypeAccess().getChanKeyword_1());
    }
(
(
		lv_urgent_2_0=	'urgent' 
    {
        newLeafNode(lv_urgent_2_0, grammarAccess.getChannelTypeAccess().getUrgentUrgentKeyword_2_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getChannelTypeRule());
	        }
       		setWithLastConsumed($current, "urgent", true, "urgent");
	    }

)
)?(
(
		lv_broadcast_3_0=	'broadcast' 
    {
        newLeafNode(lv_broadcast_3_0, grammarAccess.getChannelTypeAccess().getBroadcastBroadcastKeyword_3_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getChannelTypeRule());
	        }
       		setWithLastConsumed($current, "broadcast", true, "broadcast");
	    }

)
)?)
;





// Entry rule entryRuleIntegerType
entryRuleIntegerType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIntegerTypeRule()); }
	 iv_ruleIntegerType=ruleIntegerType 
	 { $current=$iv_ruleIntegerType.current; } 
	 EOF 
;

// Rule IntegerType
ruleIntegerType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getIntegerTypeAccess().getIntegerTypeAction_0(),
            $current);
    }
)(
(
		lv_const_1_0=	'const' 
    {
        newLeafNode(lv_const_1_0, grammarAccess.getIntegerTypeAccess().getConstConstKeyword_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIntegerTypeRule());
	        }
       		setWithLastConsumed($current, "const", true, "const");
	    }

)
)?	otherlv_2='int' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getIntegerTypeAccess().getIntKeyword_2());
    }
)
;





// Entry rule entryRuleBoolType
entryRuleBoolType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBoolTypeRule()); }
	 iv_ruleBoolType=ruleBoolType 
	 { $current=$iv_ruleBoolType.current; } 
	 EOF 
;

// Rule BoolType
ruleBoolType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getBoolTypeAccess().getBoolTypeAction_0(),
            $current);
    }
)(
(
		lv_const_1_0=	'const' 
    {
        newLeafNode(lv_const_1_0, grammarAccess.getBoolTypeAccess().getConstConstKeyword_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBoolTypeRule());
	        }
       		setWithLastConsumed($current, "const", true, "const");
	    }

)
)?	otherlv_2='bool' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getBoolTypeAccess().getBoolKeyword_2());
    }
)
;





// Entry rule entryRuleRangeType
entryRuleRangeType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRangeTypeRule()); }
	 iv_ruleRangeType=ruleRangeType 
	 { $current=$iv_ruleRangeType.current; } 
	 EOF 
;

// Rule RangeType
ruleRangeType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_const_0_0=	'const' 
    {
        newLeafNode(lv_const_0_0, grammarAccess.getRangeTypeAccess().getConstConstKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRangeTypeRule());
	        }
       		setWithLastConsumed($current, "const", true, "const");
	    }

)
)?	otherlv_1='int' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getRangeTypeAccess().getIntKeyword_1());
    }
	otherlv_2='[' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getRangeTypeAccess().getLeftSquareBracketKeyword_2());
    }
(
(
		lv_min_3_0=RULE_INT
		{
			newLeafNode(lv_min_3_0, grammarAccess.getRangeTypeAccess().getMinINTTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRangeTypeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"min",
        		lv_min_3_0, 
        		"INT");
	    }

)
)	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getRangeTypeAccess().getCommaKeyword_4());
    }
(
(
		lv_max_5_0=RULE_INT
		{
			newLeafNode(lv_max_5_0, grammarAccess.getRangeTypeAccess().getMaxINTTerminalRuleCall_5_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRangeTypeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"max",
        		lv_max_5_0, 
        		"INT");
	    }

)
)	otherlv_6=']' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getRangeTypeAccess().getRightSquareBracketKeyword_6());
    }
)
;





// Entry rule entryRuleClockType
entryRuleClockType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getClockTypeRule()); }
	 iv_ruleClockType=ruleClockType 
	 { $current=$iv_ruleClockType.current; } 
	 EOF 
;

// Rule ClockType
ruleClockType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getClockTypeAccess().getClockTypeAction_0(),
            $current);
    }
)	otherlv_1='clock' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getClockTypeAccess().getClockKeyword_1());
    }
)
;





// Entry rule entryRuleProcBody
entryRuleProcBody returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getProcBodyRule()); }
	 iv_ruleProcBody=ruleProcBody 
	 { $current=$iv_ruleProcBody.current; } 
	 EOF 
;

// Rule ProcBody
ruleProcBody returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		{ 
	        newCompositeNode(grammarAccess.getProcBodyAccess().getVariablesVariableDeclParserRuleCall_0_0_0()); 
	    }
		lv_variables_0_0=ruleVariableDecl		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProcBodyRule());
	        }
       		add(
       			$current, 
       			"variables",
        		lv_variables_0_0, 
        		"VariableDecl");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getProcBodyAccess().getTypesTypeDeclParserRuleCall_0_1_0()); 
	    }
		lv_types_1_0=ruleTypeDecl		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProcBodyRule());
	        }
       		add(
       			$current, 
       			"types",
        		lv_types_1_0, 
        		"TypeDecl");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_2='state' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getProcBodyAccess().getStateKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getProcBodyAccess().getStatesStateDeclParserRuleCall_2_0()); 
	    }
		lv_states_3_0=ruleStateDecl		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProcBodyRule());
	        }
       		add(
       			$current, 
       			"states",
        		lv_states_3_0, 
        		"StateDecl");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getProcBodyAccess().getCommaKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getProcBodyAccess().getStatesStateDeclParserRuleCall_3_1_0()); 
	    }
		lv_states_5_0=ruleStateDecl		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProcBodyRule());
	        }
       		add(
       			$current, 
       			"states",
        		lv_states_5_0, 
        		"StateDecl");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_6=';' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getProcBodyAccess().getSemicolonKeyword_4());
    }
(	otherlv_7='commit' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getProcBodyAccess().getCommitKeyword_5_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getProcBodyRule());
	        }
        }
	otherlv_8=RULE_ID
	{
		newLeafNode(otherlv_8, grammarAccess.getProcBodyAccess().getCommitStatesStateDeclCrossReference_5_1_0()); 
	}

)
)(	otherlv_9=',' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getProcBodyAccess().getCommaKeyword_5_2_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getProcBodyRule());
	        }
        }
	otherlv_10=RULE_ID
	{
		newLeafNode(otherlv_10, grammarAccess.getProcBodyAccess().getCommitStatesStateDeclCrossReference_5_2_1_0()); 
	}

)
))*	otherlv_11=';' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getProcBodyAccess().getSemicolonKeyword_5_3());
    }
)?(	otherlv_12='urgent' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getProcBodyAccess().getUrgentKeyword_6_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getProcBodyRule());
	        }
        }
	otherlv_13=RULE_ID
	{
		newLeafNode(otherlv_13, grammarAccess.getProcBodyAccess().getUrgentStatesStateDeclCrossReference_6_1_0()); 
	}

)
)(	otherlv_14=',' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getProcBodyAccess().getCommaKeyword_6_2_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getProcBodyRule());
	        }
        }
	otherlv_15=RULE_ID
	{
		newLeafNode(otherlv_15, grammarAccess.getProcBodyAccess().getUrgentStatesStateDeclCrossReference_6_2_1_0()); 
	}

)
))*	otherlv_16=';' 
    {
    	newLeafNode(otherlv_16, grammarAccess.getProcBodyAccess().getSemicolonKeyword_6_3());
    }
)?	otherlv_17='init' 
    {
    	newLeafNode(otherlv_17, grammarAccess.getProcBodyAccess().getInitKeyword_7());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getProcBodyRule());
	        }
        }
	otherlv_18=RULE_ID
	{
		newLeafNode(otherlv_18, grammarAccess.getProcBodyAccess().getInitStateStateDeclCrossReference_8_0()); 
	}

)
)	otherlv_19=';' 
    {
    	newLeafNode(otherlv_19, grammarAccess.getProcBodyAccess().getSemicolonKeyword_9());
    }
(	otherlv_20='trans' 
    {
    	newLeafNode(otherlv_20, grammarAccess.getProcBodyAccess().getTransKeyword_10_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getProcBodyAccess().getTransitionsTransitionParserRuleCall_10_1_0()); 
	    }
		lv_transitions_21_0=ruleTransition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProcBodyRule());
	        }
       		add(
       			$current, 
       			"transitions",
        		lv_transitions_21_0, 
        		"Transition");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_22=',' 
    {
    	newLeafNode(otherlv_22, grammarAccess.getProcBodyAccess().getCommaKeyword_10_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getProcBodyAccess().getTransitionsTransitionParserRuleCall_10_2_1_0()); 
	    }
		lv_transitions_23_0=ruleTransition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProcBodyRule());
	        }
       		add(
       			$current, 
       			"transitions",
        		lv_transitions_23_0, 
        		"Transition");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_24=';' 
    {
    	newLeafNode(otherlv_24, grammarAccess.getProcBodyAccess().getSemicolonKeyword_10_3());
    }
))
;





// Entry rule entryRuleStateDecl
entryRuleStateDecl returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStateDeclRule()); }
	 iv_ruleStateDecl=ruleStateDecl 
	 { $current=$iv_ruleStateDecl.current; } 
	 EOF 
;

// Rule StateDecl
ruleStateDecl returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getStateDeclAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStateDeclRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)(	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getStateDeclAccess().getLeftCurlyBracketKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStateDeclAccess().getInvariantOrParserRuleCall_1_1_0()); 
	    }
		lv_invariant_2_0=ruleOr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStateDeclRule());
	        }
       		set(
       			$current, 
       			"invariant",
        		lv_invariant_2_0, 
        		"Or");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='}' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getStateDeclAccess().getRightCurlyBracketKeyword_1_2());
    }
)?)
;





// Entry rule entryRuleTransition
entryRuleTransition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTransitionRule()); }
	 iv_ruleTransition=ruleTransition 
	 { $current=$iv_ruleTransition.current; } 
	 EOF 
;

// Rule Transition
ruleTransition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getTransitionRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getTransitionAccess().getSrcStateDeclCrossReference_0_0()); 
	}

)
)	otherlv_1='->' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTransitionAccess().getHyphenMinusGreaterThanSignKeyword_1());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getTransitionRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getTransitionAccess().getDestStateDeclCrossReference_2_0()); 
	}

)
)	otherlv_3='{' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getTransitionAccess().getLeftCurlyBracketKeyword_3());
    }
(	otherlv_4='guard' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getTransitionAccess().getGuardKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTransitionAccess().getGuardOrParserRuleCall_4_1_0()); 
	    }
		lv_guard_5_0=ruleOr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTransitionRule());
	        }
       		set(
       			$current, 
       			"guard",
        		lv_guard_5_0, 
        		"Or");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_6=';' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getTransitionAccess().getSemicolonKeyword_4_2());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getTransitionAccess().getSyncSyncParserRuleCall_5_0()); 
	    }
		lv_sync_7_0=ruleSync		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTransitionRule());
	        }
       		set(
       			$current, 
       			"sync",
        		lv_sync_7_0, 
        		"Sync");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getTransitionAccess().getAssignAssignmentsParserRuleCall_6_0()); 
	    }
		lv_assign_8_0=ruleAssignments		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTransitionRule());
	        }
       		set(
       			$current, 
       			"assign",
        		lv_assign_8_0, 
        		"Assignments");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_9='}' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getTransitionAccess().getRightCurlyBracketKeyword_7());
    }
)
;





// Entry rule entryRuleSync
entryRuleSync returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSyncRule()); }
	 iv_ruleSync=ruleSync 
	 { $current=$iv_ruleSync.current; } 
	 EOF 
;

// Rule Sync
ruleSync returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getSyncAccess().getSendParserRuleCall_0()); 
    }
    this_Send_0=ruleSend
    { 
        $current = $this_Send_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getSyncAccess().getRecvParserRuleCall_1()); 
    }
    this_Recv_1=ruleRecv
    { 
        $current = $this_Recv_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleSend
entryRuleSend returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSendRule()); }
	 iv_ruleSend=ruleSend 
	 { $current=$iv_ruleSend.current; } 
	 EOF 
;

// Rule Send
ruleSend returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='sync' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSendAccess().getSyncKeyword_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getSendRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getSendAccess().getChannelChanIdCrossReference_1_0()); 
	}

)
)	otherlv_2='!' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getSendAccess().getExclamationMarkKeyword_2());
    }
	otherlv_3=';' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getSendAccess().getSemicolonKeyword_3());
    }
)
;





// Entry rule entryRuleRecv
entryRuleRecv returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRecvRule()); }
	 iv_ruleRecv=ruleRecv 
	 { $current=$iv_ruleRecv.current; } 
	 EOF 
;

// Rule Recv
ruleRecv returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='sync' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getRecvAccess().getSyncKeyword_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getRecvRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getRecvAccess().getChannelChanIdCrossReference_1_0()); 
	}

)
)	otherlv_2='?' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getRecvAccess().getQuestionMarkKeyword_2());
    }
	otherlv_3=';' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getRecvAccess().getSemicolonKeyword_3());
    }
)
;





// Entry rule entryRuleAssignments
entryRuleAssignments returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAssignmentsRule()); }
	 iv_ruleAssignments=ruleAssignments 
	 { $current=$iv_ruleAssignments.current; } 
	 EOF 
;

// Rule Assignments
ruleAssignments returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='assign' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getAssignmentsAccess().getAssignKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAssignmentsAccess().getAssignsAssignParserRuleCall_1_0()); 
	    }
		lv_assigns_1_0=ruleAssign		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssignmentsRule());
	        }
       		add(
       			$current, 
       			"assigns",
        		lv_assigns_1_0, 
        		"Assign");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAssignmentsAccess().getCommaKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAssignmentsAccess().getAssignsAssignParserRuleCall_2_1_0()); 
	    }
		lv_assigns_3_0=ruleAssign		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssignmentsRule());
	        }
       		add(
       			$current, 
       			"assigns",
        		lv_assigns_3_0, 
        		"Assign");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_4=';' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getAssignmentsAccess().getSemicolonKeyword_3());
    }
)
;





// Entry rule entryRuleAssign
entryRuleAssign returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAssignRule()); }
	 iv_ruleAssign=ruleAssign 
	 { $current=$iv_ruleAssign.current; } 
	 EOF 
;

// Rule Assign
ruleAssign returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getAssignAccess().getLhsVarAccessParserRuleCall_0_0()); 
	    }
		lv_lhs_0_0=ruleVarAccess		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssignRule());
	        }
       		set(
       			$current, 
       			"lhs",
        		lv_lhs_0_0, 
        		"VarAccess");
	        afterParserOrEnumRuleCall();
	    }

)
)
    { 
        newCompositeNode(grammarAccess.getAssignAccess().getASSIGNMENTParserRuleCall_1()); 
    }
ruleASSIGNMENT
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAssignAccess().getRhsBitOrParserRuleCall_2_0()); 
	    }
		lv_rhs_2_0=ruleBitOr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssignRule());
	        }
       		set(
       			$current, 
       			"rhs",
        		lv_rhs_2_0, 
        		"BitOr");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleVariableDecl
entryRuleVariableDecl returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariableDeclRule()); }
	 iv_ruleVariableDecl=ruleVariableDecl 
	 { $current=$iv_ruleVariableDecl.current; } 
	 EOF 
;

// Rule VariableDecl
ruleVariableDecl returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getVariableDeclAccess().getTypeBasicTypeParserRuleCall_0_0()); 
	    }
		lv_type_0_0=ruleBasicType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariableDeclRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_0_0, 
        		"BasicType");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getVariableDeclAccess().getDeclidDeclIdParserRuleCall_1_0()); 
	    }
		lv_declid_1_0=ruleDeclId		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariableDeclRule());
	        }
       		add(
       			$current, 
       			"declid",
        		lv_declid_1_0, 
        		"DeclId");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getVariableDeclAccess().getCommaKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getVariableDeclAccess().getDeclidDeclIdParserRuleCall_2_1_0()); 
	    }
		lv_declid_3_0=ruleDeclId		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariableDeclRule());
	        }
       		add(
       			$current, 
       			"declid",
        		lv_declid_3_0, 
        		"DeclId");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_4=';' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getVariableDeclAccess().getSemicolonKeyword_3());
    }
)
;





// Entry rule entryRuleDeclId
entryRuleDeclId returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDeclIdRule()); }
	 iv_ruleDeclId=ruleDeclId 
	 { $current=$iv_ruleDeclId.current; } 
	 EOF 
;

// Rule DeclId
ruleDeclId returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getDeclIdAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDeclIdRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getDeclIdAccess().getArraysArrayDeclParserRuleCall_1_0()); 
	    }
		lv_arrays_1_0=ruleArrayDecl		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDeclIdRule());
	        }
       		add(
       			$current, 
       			"arrays",
        		lv_arrays_1_0, 
        		"ArrayDecl");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
    { 
        newCompositeNode(grammarAccess.getDeclIdAccess().getASSIGNMENTParserRuleCall_2_0()); 
    }
ruleASSIGNMENT
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDeclIdAccess().getInitInitialiserParserRuleCall_2_1_0()); 
	    }
		lv_init_3_0=ruleInitialiser		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDeclIdRule());
	        }
       		set(
       			$current, 
       			"init",
        		lv_init_3_0, 
        		"Initialiser");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleInitialiser
entryRuleInitialiser returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInitialiserRule()); }
	 iv_ruleInitialiser=ruleInitialiser 
	 { $current=$iv_ruleInitialiser.current; } 
	 EOF 
;

// Rule Initialiser
ruleInitialiser returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getInitialiserAccess().getExprBitOrParserRuleCall_0()); 
	    }
		lv_expr_0_0=ruleBitOr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInitialiserRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_0_0, 
        		"BitOr");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleArrayDecl
entryRuleArrayDecl returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getArrayDeclRule()); }
	 iv_ruleArrayDecl=ruleArrayDecl 
	 { $current=$iv_ruleArrayDecl.current; } 
	 EOF 
;

// Rule ArrayDecl
ruleArrayDecl returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='[' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getArrayDeclAccess().getLeftSquareBracketKeyword_0());
    }
(
(
		lv_size_1_0=RULE_INT
		{
			newLeafNode(lv_size_1_0, grammarAccess.getArrayDeclAccess().getSizeINTTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getArrayDeclRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"size",
        		lv_size_1_0, 
        		"INT");
	    }

)
)	otherlv_2=']' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getArrayDeclAccess().getRightSquareBracketKeyword_2());
    }
)
;





// Entry rule entryRuleBitOr
entryRuleBitOr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBitOrRule()); }
	 iv_ruleBitOr=ruleBitOr 
	 { $current=$iv_ruleBitOr.current; } 
	 EOF 
;

// Rule BitOr
ruleBitOr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getBitOrAccess().getBitXorParserRuleCall_0()); 
    }
    this_BitXor_0=ruleBitXor
    { 
        $current = $this_BitXor_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getBitOrAccess().getBinaryIntExpressionLeftAction_1_0(),
            $current);
    }
)(
(
		lv_op_2_0=	'|' 
    {
        newLeafNode(lv_op_2_0, grammarAccess.getBitOrAccess().getOpVerticalLineKeyword_1_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBitOrRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_0, "|");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getBitOrAccess().getRightBitXorParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleBitXor		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBitOrRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"BitXor");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleBitXor
entryRuleBitXor returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBitXorRule()); }
	 iv_ruleBitXor=ruleBitXor 
	 { $current=$iv_ruleBitXor.current; } 
	 EOF 
;

// Rule BitXor
ruleBitXor returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getBitXorAccess().getBitAndParserRuleCall_0()); 
    }
    this_BitAnd_0=ruleBitAnd
    { 
        $current = $this_BitAnd_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getBitXorAccess().getBinaryIntExpressionLeftAction_1_0(),
            $current);
    }
)(
(
		lv_op_2_0=	'^' 
    {
        newLeafNode(lv_op_2_0, grammarAccess.getBitXorAccess().getOpCircumflexAccentKeyword_1_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBitXorRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_0, "^");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getBitXorAccess().getRightBitAndParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleBitAnd		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBitXorRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"BitAnd");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleBitAnd
entryRuleBitAnd returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBitAndRule()); }
	 iv_ruleBitAnd=ruleBitAnd 
	 { $current=$iv_ruleBitAnd.current; } 
	 EOF 
;

// Rule BitAnd
ruleBitAnd returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getBitAndAccess().getBitShiftParserRuleCall_0()); 
    }
    this_BitShift_0=ruleBitShift
    { 
        $current = $this_BitShift_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getBitAndAccess().getBinaryIntExpressionLeftAction_1_0(),
            $current);
    }
)(
(
		lv_op_2_0=	'&' 
    {
        newLeafNode(lv_op_2_0, grammarAccess.getBitAndAccess().getOpAmpersandKeyword_1_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBitAndRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_0, "&");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getBitAndAccess().getRightBitShiftParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleBitShift		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBitAndRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"BitShift");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleBitShift
entryRuleBitShift returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBitShiftRule()); }
	 iv_ruleBitShift=ruleBitShift 
	 { $current=$iv_ruleBitShift.current; } 
	 EOF 
;

// Rule BitShift
ruleBitShift returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getBitShiftAccess().getAdditionParserRuleCall_0()); 
    }
    this_Addition_0=ruleAddition
    { 
        $current = $this_Addition_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getBitShiftAccess().getBinaryIntExpressionLeftAction_1_0(),
            $current);
    }
)(
(
(
		lv_op_2_1=	'<<' 
    {
        newLeafNode(lv_op_2_1, grammarAccess.getBitShiftAccess().getOpLessThanSignLessThanSignKeyword_1_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBitShiftRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_1, null);
	    }

    |		lv_op_2_2=	'>>' 
    {
        newLeafNode(lv_op_2_2, grammarAccess.getBitShiftAccess().getOpGreaterThanSignGreaterThanSignKeyword_1_1_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBitShiftRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_2, null);
	    }

)

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getBitShiftAccess().getRightAdditionParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleAddition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBitShiftRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"Addition");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleAddition
entryRuleAddition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAdditionRule()); }
	 iv_ruleAddition=ruleAddition 
	 { $current=$iv_ruleAddition.current; } 
	 EOF 
;

// Rule Addition
ruleAddition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAdditionAccess().getMultiplicationParserRuleCall_0()); 
    }
    this_Multiplication_0=ruleMultiplication
    { 
        $current = $this_Multiplication_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAdditionAccess().getBinaryIntExpressionLeftAction_1_0(),
            $current);
    }
)(
(
(
		lv_op_2_1=	'+' 
    {
        newLeafNode(lv_op_2_1, grammarAccess.getAdditionAccess().getOpPlusSignKeyword_1_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAdditionRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_1, null);
	    }

    |		lv_op_2_2=	'-' 
    {
        newLeafNode(lv_op_2_2, grammarAccess.getAdditionAccess().getOpHyphenMinusKeyword_1_1_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAdditionRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_2, null);
	    }

)

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAdditionAccess().getRightMultiplicationParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleMultiplication		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAdditionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"Multiplication");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleMultiplication
entryRuleMultiplication returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMultiplicationRule()); }
	 iv_ruleMultiplication=ruleMultiplication 
	 { $current=$iv_ruleMultiplication.current; } 
	 EOF 
;

// Rule Multiplication
ruleMultiplication returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getMultiplicationAccess().getBitComplementParserRuleCall_0()); 
    }
    this_BitComplement_0=ruleBitComplement
    { 
        $current = $this_BitComplement_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getMultiplicationAccess().getBinaryIntExpressionLeftAction_1_0(),
            $current);
    }
)(
(
(
		lv_op_2_1=	'/' 
    {
        newLeafNode(lv_op_2_1, grammarAccess.getMultiplicationAccess().getOpSolidusKeyword_1_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMultiplicationRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_1, null);
	    }

    |		lv_op_2_2=	'*' 
    {
        newLeafNode(lv_op_2_2, grammarAccess.getMultiplicationAccess().getOpAsteriskKeyword_1_1_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMultiplicationRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_2, null);
	    }

    |		lv_op_2_3=	'%' 
    {
        newLeafNode(lv_op_2_3, grammarAccess.getMultiplicationAccess().getOpPercentSignKeyword_1_1_0_2());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMultiplicationRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_3, null);
	    }

)

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMultiplicationAccess().getRightBitComplementParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleBitComplement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultiplicationRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"BitComplement");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleBitComplement
entryRuleBitComplement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBitComplementRule()); }
	 iv_ruleBitComplement=ruleBitComplement 
	 { $current=$iv_ruleBitComplement.current; } 
	 EOF 
;

// Rule BitComplement
ruleBitComplement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='~' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getBitComplementAccess().getTildeKeyword_0_0());
    }

    { 
        newCompositeNode(grammarAccess.getBitComplementAccess().getPowerParserRuleCall_0_1()); 
    }
    this_Power_1=rulePower
    { 
        $current = $this_Power_1.current; 
        afterParserOrEnumRuleCall();
    }
(
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getBitComplementAccess().getBitComplementValueAction_0_2(),
            $current);
    }
))
    |(	otherlv_3='-' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getBitComplementAccess().getHyphenMinusKeyword_1_0());
    }

    { 
        newCompositeNode(grammarAccess.getBitComplementAccess().getPowerParserRuleCall_1_1()); 
    }
    this_Power_4=rulePower
    { 
        $current = $this_Power_4.current; 
        afterParserOrEnumRuleCall();
    }
(
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getBitComplementAccess().getUnaryMinusValueAction_1_2(),
            $current);
    }
))
    |
    { 
        newCompositeNode(grammarAccess.getBitComplementAccess().getPowerParserRuleCall_2()); 
    }
    this_Power_6=rulePower
    { 
        $current = $this_Power_6.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRulePower
entryRulePower returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPowerRule()); }
	 iv_rulePower=rulePower 
	 { $current=$iv_rulePower.current; } 
	 EOF 
;

// Rule Power
rulePower returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getPowerAccess().getPrimaryParserRuleCall_0()); 
    }
    this_Primary_0=rulePrimary
    { 
        $current = $this_Primary_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getPowerAccess().getBinaryIntExpressionLeftAction_1_0(),
            $current);
    }
)(
(
		lv_op_2_0=	'**' 
    {
        newLeafNode(lv_op_2_0, grammarAccess.getPowerAccess().getOpAsteriskAsteriskKeyword_1_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPowerRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_0, "**");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPowerAccess().getRightPrimaryParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=rulePrimary		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPowerRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"Primary");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRulePrimary
entryRulePrimary returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPrimaryRule()); }
	 iv_rulePrimary=rulePrimary 
	 { $current=$iv_rulePrimary.current; } 
	 EOF 
;

// Rule Primary
rulePrimary returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getPrimaryAccess().getVarAccessParserRuleCall_0()); 
    }
    this_VarAccess_0=ruleVarAccess
    { 
        $current = $this_VarAccess_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPrimaryAccess().getConstRefParserRuleCall_1()); 
    }
    this_ConstRef_1=ruleConstRef
    { 
        $current = $this_ConstRef_1.current; 
        afterParserOrEnumRuleCall();
    }

    |((((	'(' 
	ruleBitOr	')' 
))=>(	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_2_0_0_0());
    }

    { 
        newCompositeNode(grammarAccess.getPrimaryAccess().getBitOrParserRuleCall_2_0_0_1()); 
    }
    this_BitOr_3=ruleBitOr
    { 
        $current = $this_BitOr_3.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_4=')' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getPrimaryAccess().getRightParenthesisKeyword_2_0_0_2());
    }
))
    |(	otherlv_5='(' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_2_1_0());
    }

    { 
        newCompositeNode(grammarAccess.getPrimaryAccess().getWrapBoolExprParserRuleCall_2_1_1()); 
    }
    this_WrapBoolExpr_6=ruleWrapBoolExpr
    { 
        $current = $this_WrapBoolExpr_6.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_7=')' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getPrimaryAccess().getRightParenthesisKeyword_2_1_2());
    }
)))
;





// Entry rule entryRuleConstRef
entryRuleConstRef returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConstRefRule()); }
	 iv_ruleConstRef=ruleConstRef 
	 { $current=$iv_ruleConstRef.current; } 
	 EOF 
;

// Rule ConstRef
ruleConstRef returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getConstRefAccess().getConstantParserRuleCall()); 
    }
    this_Constant_0=ruleConstant
    { 
        $current = $this_Constant_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleVarAccess
entryRuleVarAccess returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVarAccessRule()); }
	 iv_ruleVarAccess=ruleVarAccess 
	 { $current=$iv_ruleVarAccess.current; } 
	 EOF 
;

// Rule VarAccess
ruleVarAccess returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getVarAccessRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getVarAccessAccess().getRefFormalDeclarationCrossReference_0()); 
	}

)
)
;





// Entry rule entryRuleWrapBoolExpr
entryRuleWrapBoolExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getWrapBoolExprRule()); }
	 iv_ruleWrapBoolExpr=ruleWrapBoolExpr 
	 { $current=$iv_ruleWrapBoolExpr.current; } 
	 EOF 
;

// Rule WrapBoolExpr
ruleWrapBoolExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getWrapBoolExprAccess().getValueOrParserRuleCall_0()); 
	    }
		lv_value_0_0=ruleOr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getWrapBoolExprRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"Or");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleConstant
entryRuleConstant returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConstantRule()); }
	 iv_ruleConstant=ruleConstant 
	 { $current=$iv_ruleConstant.current; } 
	 EOF 
;

// Rule Constant
ruleConstant returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_value_0_0=RULE_INT
		{
			newLeafNode(lv_value_0_0, grammarAccess.getConstantAccess().getValueINTTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getConstantRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"INT");
	    }

)
)
;





// Entry rule entryRuleOr
entryRuleOr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOrRule()); }
	 iv_ruleOr=ruleOr 
	 { $current=$iv_ruleOr.current; } 
	 EOF 
;

// Rule Or
ruleOr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getOrAccess().getAndParserRuleCall_0()); 
    }
    this_And_0=ruleAnd
    { 
        $current = $this_And_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getOrAccess().getOrLeftAction_1_0(),
            $current);
    }
)	otherlv_2='||' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getOrAccess().getVerticalLineVerticalLineKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOrAccess().getRightAndParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleAnd		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOrRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"And");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleAnd
entryRuleAnd returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAndRule()); }
	 iv_ruleAnd=ruleAnd 
	 { $current=$iv_ruleAnd.current; } 
	 EOF 
;

// Rule And
ruleAnd returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAndAccess().getNotParserRuleCall_0()); 
    }
    this_Not_0=ruleNot
    { 
        $current = $this_Not_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAndAccess().getAndLeftAction_1_0(),
            $current);
    }
)	otherlv_2='&&' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAndAccess().getAmpersandAmpersandKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAndAccess().getRightNotParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleNot		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAndRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"Not");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleNot
entryRuleNot returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNotRule()); }
	 iv_ruleNot=ruleNot 
	 { $current=$iv_ruleNot.current; } 
	 EOF 
;

// Rule Not
ruleNot returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='!' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getNotAccess().getExclamationMarkKeyword_0_0());
    }
(
    {
        $current = forceCreateModelElement(
            grammarAccess.getNotAccess().getNotAction_0_1(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getNotAccess().getValuePrimaryBoolParserRuleCall_0_2_0()); 
	    }
		lv_value_2_0=rulePrimaryBool		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNotRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"PrimaryBool");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |
    { 
        newCompositeNode(grammarAccess.getNotAccess().getPrimaryBoolParserRuleCall_1()); 
    }
    this_PrimaryBool_3=rulePrimaryBool
    { 
        $current = $this_PrimaryBool_3.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRulePrimaryBool
entryRulePrimaryBool returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPrimaryBoolRule()); }
	 iv_rulePrimaryBool=rulePrimaryBool 
	 { $current=$iv_rulePrimaryBool.current; } 
	 EOF 
;

// Rule PrimaryBool
rulePrimaryBool returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getPrimaryBoolAccess().getTrueParserRuleCall_0()); 
    }
    this_True_0=ruleTrue
    { 
        $current = $this_True_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPrimaryBoolAccess().getFalseParserRuleCall_1()); 
    }
    this_False_1=ruleFalse
    { 
        $current = $this_False_1.current; 
        afterParserOrEnumRuleCall();
    }

    |((	ruleComparison)=>
    { 
        newCompositeNode(grammarAccess.getPrimaryBoolAccess().getComparisonParserRuleCall_2()); 
    }
    this_Comparison_2=ruleComparison
    { 
        $current = $this_Comparison_2.current; 
        afterParserOrEnumRuleCall();
    }
)
    |(	otherlv_3='(' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getPrimaryBoolAccess().getLeftParenthesisKeyword_3_0());
    }

    { 
        newCompositeNode(grammarAccess.getPrimaryBoolAccess().getOrParserRuleCall_3_1()); 
    }
    this_Or_4=ruleOr
    { 
        $current = $this_Or_4.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getPrimaryBoolAccess().getRightParenthesisKeyword_3_2());
    }
))
;





// Entry rule entryRuleComparison
entryRuleComparison returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getComparisonRule()); }
	 iv_ruleComparison=ruleComparison 
	 { $current=$iv_ruleComparison.current; } 
	 EOF 
;

// Rule Comparison
ruleComparison returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getComparisonAccess().getLeftBitOrParserRuleCall_0_0()); 
	    }
		lv_left_0_0=ruleBitOr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getComparisonRule());
	        }
       		set(
       			$current, 
       			"left",
        		lv_left_0_0, 
        		"BitOr");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getComparisonAccess().getOperatorComparisonOperatorsEnumRuleCall_1_0()); 
	    }
		lv_operator_1_0=ruleComparisonOperators		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getComparisonRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_1_0, 
        		"ComparisonOperators");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getComparisonAccess().getRightBitOrParserRuleCall_2_0()); 
	    }
		lv_right_2_0=ruleBitOr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getComparisonRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_2_0, 
        		"BitOr");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleTrue
entryRuleTrue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTrueRule()); }
	 iv_ruleTrue=ruleTrue 
	 { $current=$iv_ruleTrue.current; } 
	 EOF 
;

// Rule True
ruleTrue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getTrueAccess().getTrueAction_0(),
            $current);
    }
)	otherlv_1='true' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTrueAccess().getTrueKeyword_1());
    }
)
;





// Entry rule entryRuleFalse
entryRuleFalse returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFalseRule()); }
	 iv_ruleFalse=ruleFalse 
	 { $current=$iv_ruleFalse.current; } 
	 EOF 
;

// Rule False
ruleFalse returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getFalseAccess().getFalseAction_0(),
            $current);
    }
)	otherlv_1='false' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getFalseAccess().getFalseKeyword_1());
    }
)
;





// Entry rule entryRuleASSIGNMENT
entryRuleASSIGNMENT returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getASSIGNMENTRule()); } 
	 iv_ruleASSIGNMENT=ruleASSIGNMENT 
	 { $current=$iv_ruleASSIGNMENT.current.getText(); }  
	 EOF 
;

// Rule ASSIGNMENT
ruleASSIGNMENT returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getASSIGNMENTAccess().getEqualsSignKeyword_0()); 
    }

    |
	kw=':=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getASSIGNMENTAccess().getColonEqualsSignKeyword_1()); 
    }
)
    ;





// Rule ComparisonOperators
ruleComparisonOperators returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='>' 
	{
        $current = grammarAccess.getComparisonOperatorsAccess().getGTEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getComparisonOperatorsAccess().getGTEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='<' 
	{
        $current = grammarAccess.getComparisonOperatorsAccess().getLTEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getComparisonOperatorsAccess().getLTEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='>=' 
	{
        $current = grammarAccess.getComparisonOperatorsAccess().getGEEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getComparisonOperatorsAccess().getGEEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='<=' 
	{
        $current = grammarAccess.getComparisonOperatorsAccess().getLEEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getComparisonOperatorsAccess().getLEEnumLiteralDeclaration_3()); 
    }
)
    |(	enumLiteral_4='==' 
	{
        $current = grammarAccess.getComparisonOperatorsAccess().getEQEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getComparisonOperatorsAccess().getEQEnumLiteralDeclaration_4()); 
    }
)
    |(	enumLiteral_5='!=' 
	{
        $current = grammarAccess.getComparisonOperatorsAccess().getNEEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_5, grammarAccess.getComparisonOperatorsAccess().getNEEnumLiteralDeclaration_5()); 
    }
));



RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


