GAL system {
  // Colored types
  typedef Proc = 0..2;
  typedef Res  = 0..1;

  /** Bag specifics */
  int     R_count   = 2;
  typedef BagR_card = 0..2;

  array [2] R     = (1, 1);
  array [3] OutCS = (1, 1, 1);

  //   card(R) = 0 -> <p>       -> card = 3
  // + card(R) = 1 -> <p,r>     -> card = 3*2
  // + card(R) = 2 -> <p,r1,r2> -> card = 3*2*2
  array [21] InCS = (0, 0, 0,
			 0, 0, 0, 0, 0, 0,
			 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  //         <r1,r2> =    <0,0> |  <1,0> |  <0,1> |  <1,1>



  // <fakeC> ------------------------------------------------------------------
//  /* transition enter (BagR_card $R, Proc $p) [$R > 0 && R_count >= $R */
//  /* 					    && OutCS[$p] >= 1] { */
//  /*   int index     = 0; */
//  /*   int dimension = 1; */
//
//  /*   index += dimension * $p; */
//  /*   dimension *= 3;              // 3 = card(Proc) */
//
//  /*   while ($R > 0) { */
//  /*     $R--; */
//  /*     transition _enter_choose(Res $r) [R[$r] >= 1] { */
//  /*    index += dimension; */
//  /* 	index += dimension * $r; */
//  /* 	dimension *= 2;    // 2 = card(Res) */
//  /* 	R[$r]--;           // removing the token from R */
//  /*     } */
//  /*   } */
//
//  /*   // Res_index computed */
//
//  /*   InCS[index]++; */
//  /* } */
  // </fakeC> -----------------------------------------------------------------


  int index     = 0;                       // computed index
  int dimension = 1;                       // current dimension weight
  array [5] stack = (0, 0, 0, 0, 0);       // operation stack
  int sp = 0;                              // stack pointer

  /**
   * The stack is used to store operation ID and their parameters
   * The format is the following between two transitions:
   *
   *                     <- sp
   * HIGHT   | op ID |   <- first operation ID (0)
   *         | arg 0 |   <- first param of op (0)
   *         | arg 1 |
   *         | op ID |   <- next operation ID (1)
   * LOW     | arg 0 |   <- first param of op (1)
   */

  transition enter (BagR_card $R_card, Proc $p) [sp == 0
						 
						 && $R_card > 0
						 && R_count >= $R_card

						 && OutCS[$p] >= 1] {

    // initialize operation stack
    stack[4] = 3;                                // op ID = get in OutCS
    stack[3] = $p;                               // arg 0
    stack[2] = 2;                                // op ID = choose in R
    stack[1] = $R_card;                          // arg 0
    stack[0] = 1;                                // op ID = put into InCS

    /** set stack pointer -> go TRANSIENT */
    sp = 5;
  }


  // op ID = 1
  transition __put_into_InCS [sp > 0 && stack[sp-1] == 1] {
    /**  perform actions */
    InCS[index] = InCS[index] + 1;      
    /** reset index */
    index = 0;                          
    /** reset dimension */
    dimension = 1;                      

    /**  statement operation epilogue */
    sp = sp - 1;
    /**  clear stack frame */
    stack[sp] = 0;                      
  }

  /**  op ID = 2  */ 
  transition __choose_in_R (Res $r) [sp > 0 && stack[sp-1] == 2 && R[$r] >= 1] {
  	index = index + dimension;
    index = index + dimension * $r;
    dimension = dimension * 2;
    R[$r] = R[$r] - 1;
    R_count = R_count - 1;

    // loop operation epilogue
    stack[sp-2] = stack[sp-2] - 1;      // dec counter
    if (stack[sp-2] == 0) {             // if counter == 0
      sp = sp - 2;
      stack[sp] = 0;                    // clear stack frame
      stack[sp+1] = 0;
    }
  }

  // op ID = 3
  transition __get_in_OutCS [sp > 0 && stack[sp-1] == 3] {
    index = index + dimension * stack[sp-2];
    dimension = dimension * 3;

    /** statement operation epilogue */
    sp = sp - 2;
    stack[sp] = 0;
    stack[sp+1] = 0;
  }


  TRANSIENT = (sp != 0);
}
