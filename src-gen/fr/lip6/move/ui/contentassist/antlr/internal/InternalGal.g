/*
* generated by Xtext
*/
grammar InternalGal;

options {
	superClass=AbstractInternalContentAssistParser;
	backtrack=true;
	
}

@lexer::header {
package fr.lip6.move.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package fr.lip6.move.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import fr.lip6.move.services.GalGrammarAccess;

}

@parser::members {
 
 	private GalGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(GalGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleSystem
entryRuleSystem 
:
{ before(grammarAccess.getSystemRule()); }
	 ruleSystem
{ after(grammarAccess.getSystemRule()); } 
	 EOF 
;

// Rule System
ruleSystem
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSystemAccess().getGroup()); }
(rule__System__Group__0)
{ after(grammarAccess.getSystemAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVariableDeclaration
entryRuleVariableDeclaration 
:
{ before(grammarAccess.getVariableDeclarationRule()); }
	 ruleVariableDeclaration
{ after(grammarAccess.getVariableDeclarationRule()); } 
	 EOF 
;

// Rule VariableDeclaration
ruleVariableDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVariableDeclarationAccess().getGroup()); }
(rule__VariableDeclaration__Group__0)
{ after(grammarAccess.getVariableDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleArrayDeclaration
entryRuleArrayDeclaration 
:
{ before(grammarAccess.getArrayDeclarationRule()); }
	 ruleArrayDeclaration
{ after(grammarAccess.getArrayDeclarationRule()); } 
	 EOF 
;

// Rule ArrayDeclaration
ruleArrayDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getArrayDeclarationAccess().getGroup()); }
(rule__ArrayDeclaration__Group__0)
{ after(grammarAccess.getArrayDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleListDeclaration
entryRuleListDeclaration 
:
{ before(grammarAccess.getListDeclarationRule()); }
	 ruleListDeclaration
{ after(grammarAccess.getListDeclarationRule()); } 
	 EOF 
;

// Rule ListDeclaration
ruleListDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getListDeclarationAccess().getGroup()); }
(rule__ListDeclaration__Group__0)
{ after(grammarAccess.getListDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleInitValues
entryRuleInitValues 
:
{ before(grammarAccess.getInitValuesRule()); }
	 ruleInitValues
{ after(grammarAccess.getInitValuesRule()); } 
	 EOF 
;

// Rule InitValues
ruleInitValues
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getInitValuesAccess().getGroup()); }
(rule__InitValues__Group__0)
{ after(grammarAccess.getInitValuesAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTransition
entryRuleTransition 
:
{ before(grammarAccess.getTransitionRule()); }
	 ruleTransition
{ after(grammarAccess.getTransitionRule()); } 
	 EOF 
;

// Rule Transition
ruleTransition
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTransitionAccess().getGroup()); }
(rule__Transition__Group__0)
{ after(grammarAccess.getTransitionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleActions
entryRuleActions 
:
{ before(grammarAccess.getActionsRule()); }
	 ruleActions
{ after(grammarAccess.getActionsRule()); } 
	 EOF 
;

// Rule Actions
ruleActions
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getActionsAccess().getAlternatives()); }
(rule__Actions__Alternatives)
{ after(grammarAccess.getActionsAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePush
entryRulePush 
:
{ before(grammarAccess.getPushRule()); }
	 rulePush
{ after(grammarAccess.getPushRule()); } 
	 EOF 
;

// Rule Push
rulePush
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPushAccess().getGroup()); }
(rule__Push__Group__0)
{ after(grammarAccess.getPushAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePop
entryRulePop 
:
{ before(grammarAccess.getPopRule()); }
	 rulePop
{ after(grammarAccess.getPopRule()); } 
	 EOF 
;

// Rule Pop
rulePop
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPopAccess().getGroup()); }
(rule__Pop__Group__0)
{ after(grammarAccess.getPopAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePeek
entryRulePeek 
:
{ before(grammarAccess.getPeekRule()); }
	 rulePeek
{ after(grammarAccess.getPeekRule()); } 
	 EOF 
;

// Rule Peek
rulePeek
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPeekAccess().getGroup()); }
(rule__Peek__Group__0)
{ after(grammarAccess.getPeekAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAssignment
entryRuleAssignment 
:
{ before(grammarAccess.getAssignmentRule()); }
	 ruleAssignment
{ after(grammarAccess.getAssignmentRule()); } 
	 EOF 
;

// Rule Assignment
ruleAssignment
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAssignmentAccess().getGroup()); }
(rule__Assignment__Group__0)
{ after(grammarAccess.getAssignmentAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVarAccess
entryRuleVarAccess 
:
{ before(grammarAccess.getVarAccessRule()); }
	 ruleVarAccess
{ after(grammarAccess.getVarAccessRule()); } 
	 EOF 
;

// Rule VarAccess
ruleVarAccess
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVarAccessAccess().getAlternatives()); }
(rule__VarAccess__Alternatives)
{ after(grammarAccess.getVarAccessAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVariableRef
entryRuleVariableRef 
:
{ before(grammarAccess.getVariableRefRule()); }
	 ruleVariableRef
{ after(grammarAccess.getVariableRefRule()); } 
	 EOF 
;

// Rule VariableRef
ruleVariableRef
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVariableRefAccess().getVarAssignment()); }
(rule__VariableRef__VarAssignment)
{ after(grammarAccess.getVariableRefAccess().getVarAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleArrayVarAccess
entryRuleArrayVarAccess 
:
{ before(grammarAccess.getArrayVarAccessRule()); }
	 ruleArrayVarAccess
{ after(grammarAccess.getArrayVarAccessRule()); } 
	 EOF 
;

// Rule ArrayVarAccess
ruleArrayVarAccess
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getArrayVarAccessAccess().getGroup()); }
(rule__ArrayVarAccess__Group__0)
{ after(grammarAccess.getArrayVarAccessAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBinaryIntExpression
entryRuleBinaryIntExpression 
:
{ before(grammarAccess.getBinaryIntExpressionRule()); }
	 ruleBinaryIntExpression
{ after(grammarAccess.getBinaryIntExpressionRule()); } 
	 EOF 
;

// Rule BinaryIntExpression
ruleBinaryIntExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBinaryIntExpressionAccess().getGroup()); }
(rule__BinaryIntExpression__Group__0)
{ after(grammarAccess.getBinaryIntExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleUnaryIntExpression
entryRuleUnaryIntExpression 
:
{ before(grammarAccess.getUnaryIntExpressionRule()); }
	 ruleUnaryIntExpression
{ after(grammarAccess.getUnaryIntExpressionRule()); } 
	 EOF 
;

// Rule UnaryIntExpression
ruleUnaryIntExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getUnaryIntExpressionAccess().getGroup()); }
(rule__UnaryIntExpression__Group__0)
{ after(grammarAccess.getUnaryIntExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePrimary
entryRulePrimary 
:
{ before(grammarAccess.getPrimaryRule()); }
	 rulePrimary
{ after(grammarAccess.getPrimaryRule()); } 
	 EOF 
;

// Rule Primary
rulePrimary
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPrimaryAccess().getAlternatives()); }
(rule__Primary__Alternatives)
{ after(grammarAccess.getPrimaryAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleConstante
entryRuleConstante 
:
{ before(grammarAccess.getConstanteRule()); }
	 ruleConstante
{ after(grammarAccess.getConstanteRule()); } 
	 EOF 
;

// Rule Constante
ruleConstante
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getConstanteAccess().getValAssignment()); }
(rule__Constante__ValAssignment)
{ after(grammarAccess.getConstanteAccess().getValAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOr
entryRuleOr 
:
{ before(grammarAccess.getOrRule()); }
	 ruleOr
{ after(grammarAccess.getOrRule()); } 
	 EOF 
;

// Rule Or
ruleOr
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getOrAccess().getGroup()); }
(rule__Or__Group__0)
{ after(grammarAccess.getOrAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAnd
entryRuleAnd 
:
{ before(grammarAccess.getAndRule()); }
	 ruleAnd
{ after(grammarAccess.getAndRule()); } 
	 EOF 
;

// Rule And
ruleAnd
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAndAccess().getGroup()); }
(rule__And__Group__0)
{ after(grammarAccess.getAndAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNot
entryRuleNot 
:
{ before(grammarAccess.getNotRule()); }
	 ruleNot
{ after(grammarAccess.getNotRule()); } 
	 EOF 
;

// Rule Not
ruleNot
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNotAccess().getGroup()); }
(rule__Not__Group__0)
{ after(grammarAccess.getNotAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePrimaryBool
entryRulePrimaryBool 
:
{ before(grammarAccess.getPrimaryBoolRule()); }
	 rulePrimaryBool
{ after(grammarAccess.getPrimaryBoolRule()); } 
	 EOF 
;

// Rule PrimaryBool
rulePrimaryBool
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPrimaryBoolAccess().getAlternatives()); }
(rule__PrimaryBool__Alternatives)
{ after(grammarAccess.getPrimaryBoolAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleComparison
entryRuleComparison 
:
{ before(grammarAccess.getComparisonRule()); }
	 ruleComparison
{ after(grammarAccess.getComparisonRule()); } 
	 EOF 
;

// Rule Comparison
ruleComparison
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getComparisonAccess().getGroup()); }
(rule__Comparison__Group__0)
{ after(grammarAccess.getComparisonAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTrue
entryRuleTrue 
:
{ before(grammarAccess.getTrueRule()); }
	 ruleTrue
{ after(grammarAccess.getTrueRule()); } 
	 EOF 
;

// Rule True
ruleTrue
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTrueAccess().getValAssignment()); }
(rule__True__ValAssignment)
{ after(grammarAccess.getTrueAccess().getValAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFalse
entryRuleFalse 
:
{ before(grammarAccess.getFalseRule()); }
	 ruleFalse
{ after(grammarAccess.getFalseRule()); } 
	 EOF 
;

// Rule False
ruleFalse
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFalseAccess().getValAssignment()); }
(rule__False__ValAssignment)
{ after(grammarAccess.getFalseAccess().getValAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleQualifiedName
entryRuleQualifiedName 
:
{ before(grammarAccess.getQualifiedNameRule()); }
	 ruleQualifiedName
{ after(grammarAccess.getQualifiedNameRule()); } 
	 EOF 
;

// Rule QualifiedName
ruleQualifiedName
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getQualifiedNameAccess().getGroup()); }
(rule__QualifiedName__Group__0)
{ after(grammarAccess.getQualifiedNameAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleQualifiedNameWithWildCard
entryRuleQualifiedNameWithWildCard 
:
{ before(grammarAccess.getQualifiedNameWithWildCardRule()); }
	 ruleQualifiedNameWithWildCard
{ after(grammarAccess.getQualifiedNameWithWildCardRule()); } 
	 EOF 
;

// Rule QualifiedNameWithWildCard
ruleQualifiedNameWithWildCard
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getQualifiedNameWithWildCardAccess().getGroup()); }
(rule__QualifiedNameWithWildCard__Group__0)
{ after(grammarAccess.getQualifiedNameWithWildCardAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}






// Rule BinaryArithmeticOperations
ruleBinaryArithmeticOperations
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBinaryArithmeticOperationsAccess().getAlternatives()); }
(rule__BinaryArithmeticOperations__Alternatives)
{ after(grammarAccess.getBinaryArithmeticOperationsAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule ComparisonOperators
ruleComparisonOperators
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonOperatorsAccess().getAlternatives()); }
(rule__ComparisonOperators__Alternatives)
{ after(grammarAccess.getComparisonOperatorsAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__System__Alternatives_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSystemAccess().getVariablesAssignment_3_0()); }
(rule__System__VariablesAssignment_3_0)
{ after(grammarAccess.getSystemAccess().getVariablesAssignment_3_0()); }
)

    |(
{ before(grammarAccess.getSystemAccess().getArraysAssignment_3_1()); }
(rule__System__ArraysAssignment_3_1)
{ after(grammarAccess.getSystemAccess().getArraysAssignment_3_1()); }
)

    |(
{ before(grammarAccess.getSystemAccess().getListsAssignment_3_2()); }
(rule__System__ListsAssignment_3_2)
{ after(grammarAccess.getSystemAccess().getListsAssignment_3_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Actions__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActionsAccess().getAssignmentParserRuleCall_0()); }
	ruleAssignment
{ after(grammarAccess.getActionsAccess().getAssignmentParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getActionsAccess().getPushParserRuleCall_1()); }
	rulePush
{ after(grammarAccess.getActionsAccess().getPushParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getActionsAccess().getPopParserRuleCall_2()); }
	rulePop
{ after(grammarAccess.getActionsAccess().getPopParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VarAccess__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVarAccessAccess().getArrayVarAccessParserRuleCall_0()); }
	ruleArrayVarAccess
{ after(grammarAccess.getVarAccessAccess().getArrayVarAccessParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getVarAccessAccess().getVariableRefParserRuleCall_1()); }
	ruleVariableRef
{ after(grammarAccess.getVarAccessAccess().getVariableRefParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryAccess().getPeekParserRuleCall_0()); }
	rulePeek
{ after(grammarAccess.getPrimaryAccess().getPeekParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getPrimaryAccess().getVarAccessParserRuleCall_1()); }
	ruleVarAccess
{ after(grammarAccess.getPrimaryAccess().getVarAccessParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getPrimaryAccess().getConstanteParserRuleCall_2()); }
	ruleConstante
{ after(grammarAccess.getPrimaryAccess().getConstanteParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getPrimaryAccess().getGroup_3()); }
(rule__Primary__Group_3__0)
{ after(grammarAccess.getPrimaryAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryBool__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryBoolAccess().getTrueParserRuleCall_0()); }
	ruleTrue
{ after(grammarAccess.getPrimaryBoolAccess().getTrueParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getPrimaryBoolAccess().getFalseParserRuleCall_1()); }
	ruleFalse
{ after(grammarAccess.getPrimaryBoolAccess().getFalseParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getPrimaryBoolAccess().getComparisonParserRuleCall_2()); }
(	ruleComparison)
{ after(grammarAccess.getPrimaryBoolAccess().getComparisonParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getPrimaryBoolAccess().getGroup_3()); }
(rule__PrimaryBool__Group_3__0)
{ after(grammarAccess.getPrimaryBoolAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryArithmeticOperations__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBinaryArithmeticOperationsAccess().getPLUSEnumLiteralDeclaration_0()); }
(	'+' 
)
{ after(grammarAccess.getBinaryArithmeticOperationsAccess().getPLUSEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getBinaryArithmeticOperationsAccess().getMINUSEnumLiteralDeclaration_1()); }
(	'-' 
)
{ after(grammarAccess.getBinaryArithmeticOperationsAccess().getMINUSEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getBinaryArithmeticOperationsAccess().getDIVISIONEnumLiteralDeclaration_2()); }
(	'/' 
)
{ after(grammarAccess.getBinaryArithmeticOperationsAccess().getDIVISIONEnumLiteralDeclaration_2()); }
)

    |(
{ before(grammarAccess.getBinaryArithmeticOperationsAccess().getMULTEnumLiteralDeclaration_3()); }
(	'*' 
)
{ after(grammarAccess.getBinaryArithmeticOperationsAccess().getMULTEnumLiteralDeclaration_3()); }
)

    |(
{ before(grammarAccess.getBinaryArithmeticOperationsAccess().getMODULOEnumLiteralDeclaration_4()); }
(	'%' 
)
{ after(grammarAccess.getBinaryArithmeticOperationsAccess().getMODULOEnumLiteralDeclaration_4()); }
)

    |(
{ before(grammarAccess.getBinaryArithmeticOperationsAccess().getPOWEREnumLiteralDeclaration_5()); }
(	'**' 
)
{ after(grammarAccess.getBinaryArithmeticOperationsAccess().getPOWEREnumLiteralDeclaration_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonOperators__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonOperatorsAccess().getGTEnumLiteralDeclaration_0()); }
(	'>' 
)
{ after(grammarAccess.getComparisonOperatorsAccess().getGTEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getComparisonOperatorsAccess().getLTEnumLiteralDeclaration_1()); }
(	'<' 
)
{ after(grammarAccess.getComparisonOperatorsAccess().getLTEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getComparisonOperatorsAccess().getGQEnumLiteralDeclaration_2()); }
(	'>=' 
)
{ after(grammarAccess.getComparisonOperatorsAccess().getGQEnumLiteralDeclaration_2()); }
)

    |(
{ before(grammarAccess.getComparisonOperatorsAccess().getLQEnumLiteralDeclaration_3()); }
(	'<=' 
)
{ after(grammarAccess.getComparisonOperatorsAccess().getLQEnumLiteralDeclaration_3()); }
)

    |(
{ before(grammarAccess.getComparisonOperatorsAccess().getEQEnumLiteralDeclaration_4()); }
(	'==' 
)
{ after(grammarAccess.getComparisonOperatorsAccess().getEQEnumLiteralDeclaration_4()); }
)

    |(
{ before(grammarAccess.getComparisonOperatorsAccess().getNQEnumLiteralDeclaration_5()); }
(	'!=' 
)
{ after(grammarAccess.getComparisonOperatorsAccess().getNQEnumLiteralDeclaration_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__System__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__System__Group__0__Impl
	rule__System__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__System__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSystemAccess().getGALKeyword_0()); }

	'GAL' 

{ after(grammarAccess.getSystemAccess().getGALKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__System__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__System__Group__1__Impl
	rule__System__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__System__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSystemAccess().getNameAssignment_1()); }
(rule__System__NameAssignment_1)
{ after(grammarAccess.getSystemAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__System__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__System__Group__2__Impl
	rule__System__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__System__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSystemAccess().getLeftCurlyBracketKeyword_2()); }

	'{' 

{ after(grammarAccess.getSystemAccess().getLeftCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__System__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__System__Group__3__Impl
	rule__System__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__System__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSystemAccess().getAlternatives_3()); }
(rule__System__Alternatives_3)*
{ after(grammarAccess.getSystemAccess().getAlternatives_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__System__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__System__Group__4__Impl
	rule__System__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__System__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getSystemAccess().getTransitionsAssignment_4()); }
(rule__System__TransitionsAssignment_4)
{ after(grammarAccess.getSystemAccess().getTransitionsAssignment_4()); }
)
(
{ before(grammarAccess.getSystemAccess().getTransitionsAssignment_4()); }
(rule__System__TransitionsAssignment_4)*
{ after(grammarAccess.getSystemAccess().getTransitionsAssignment_4()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}


rule__System__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__System__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__System__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSystemAccess().getRightCurlyBracketKeyword_5()); }

	'}' 

{ after(grammarAccess.getSystemAccess().getRightCurlyBracketKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__VariableDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableDeclaration__Group__0__Impl
	rule__VariableDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclarationAccess().getIntKeyword_0()); }

	'int' 

{ after(grammarAccess.getVariableDeclarationAccess().getIntKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableDeclaration__Group__1__Impl
	rule__VariableDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclarationAccess().getNameAssignment_1()); }
(rule__VariableDeclaration__NameAssignment_1)
{ after(grammarAccess.getVariableDeclarationAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableDeclaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableDeclaration__Group__2__Impl
	rule__VariableDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclarationAccess().getEqualsSignKeyword_2()); }

	'=' 

{ after(grammarAccess.getVariableDeclarationAccess().getEqualsSignKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableDeclaration__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableDeclaration__Group__3__Impl
	rule__VariableDeclaration__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclarationAccess().getValueAssignment_3()); }
(rule__VariableDeclaration__ValueAssignment_3)
{ after(grammarAccess.getVariableDeclarationAccess().getValueAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableDeclaration__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableDeclaration__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclarationAccess().getSemicolonKeyword_4()); }

	';' 

{ after(grammarAccess.getVariableDeclarationAccess().getSemicolonKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__ArrayDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayDeclaration__Group__0__Impl
	rule__ArrayDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayDeclarationAccess().getArrayKeyword_0()); }

	'array' 

{ after(grammarAccess.getArrayDeclarationAccess().getArrayKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArrayDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayDeclaration__Group__1__Impl
	rule__ArrayDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayDeclarationAccess().getLeftSquareBracketKeyword_1()); }

	'[' 

{ after(grammarAccess.getArrayDeclarationAccess().getLeftSquareBracketKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArrayDeclaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayDeclaration__Group__2__Impl
	rule__ArrayDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayDeclaration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayDeclarationAccess().getSizeAssignment_2()); }
(rule__ArrayDeclaration__SizeAssignment_2)
{ after(grammarAccess.getArrayDeclarationAccess().getSizeAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArrayDeclaration__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayDeclaration__Group__3__Impl
	rule__ArrayDeclaration__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayDeclaration__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayDeclarationAccess().getRightSquareBracketKeyword_3()); }

	']' 

{ after(grammarAccess.getArrayDeclarationAccess().getRightSquareBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArrayDeclaration__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayDeclaration__Group__4__Impl
	rule__ArrayDeclaration__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayDeclaration__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayDeclarationAccess().getNameAssignment_4()); }
(rule__ArrayDeclaration__NameAssignment_4)
{ after(grammarAccess.getArrayDeclarationAccess().getNameAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArrayDeclaration__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayDeclaration__Group__5__Impl
	rule__ArrayDeclaration__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayDeclaration__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayDeclarationAccess().getEqualsSignKeyword_5()); }

	'=' 

{ after(grammarAccess.getArrayDeclarationAccess().getEqualsSignKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArrayDeclaration__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayDeclaration__Group__6__Impl
	rule__ArrayDeclaration__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayDeclaration__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayDeclarationAccess().getLeftParenthesisKeyword_6()); }

	'(' 

{ after(grammarAccess.getArrayDeclarationAccess().getLeftParenthesisKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArrayDeclaration__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayDeclaration__Group__7__Impl
	rule__ArrayDeclaration__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayDeclaration__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayDeclarationAccess().getValuesAssignment_7()); }
(rule__ArrayDeclaration__ValuesAssignment_7)?
{ after(grammarAccess.getArrayDeclarationAccess().getValuesAssignment_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArrayDeclaration__Group__8
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayDeclaration__Group__8__Impl
	rule__ArrayDeclaration__Group__9
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayDeclaration__Group__8__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayDeclarationAccess().getRightParenthesisKeyword_8()); }

	')' 

{ after(grammarAccess.getArrayDeclarationAccess().getRightParenthesisKeyword_8()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArrayDeclaration__Group__9
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayDeclaration__Group__9__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayDeclaration__Group__9__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayDeclarationAccess().getSemicolonKeyword_9()); }

	';' 

{ after(grammarAccess.getArrayDeclarationAccess().getSemicolonKeyword_9()); }
)

;
finally {
	restoreStackSize(stackSize);
}






















rule__ListDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ListDeclaration__Group__0__Impl
	rule__ListDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ListDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getListDeclarationAccess().getListKeyword_0()); }

	'list' 

{ after(grammarAccess.getListDeclarationAccess().getListKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ListDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ListDeclaration__Group__1__Impl
	rule__ListDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ListDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getListDeclarationAccess().getNameAssignment_1()); }
(rule__ListDeclaration__NameAssignment_1)
{ after(grammarAccess.getListDeclarationAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ListDeclaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ListDeclaration__Group__2__Impl
	rule__ListDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ListDeclaration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getListDeclarationAccess().getGroup_2()); }
(rule__ListDeclaration__Group_2__0)?
{ after(grammarAccess.getListDeclarationAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ListDeclaration__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ListDeclaration__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ListDeclaration__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getListDeclarationAccess().getSemicolonKeyword_3()); }

	';' 

{ after(grammarAccess.getListDeclarationAccess().getSemicolonKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__ListDeclaration__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ListDeclaration__Group_2__0__Impl
	rule__ListDeclaration__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ListDeclaration__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getListDeclarationAccess().getEqualsSignKeyword_2_0()); }

	'=' 

{ after(grammarAccess.getListDeclarationAccess().getEqualsSignKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ListDeclaration__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ListDeclaration__Group_2__1__Impl
	rule__ListDeclaration__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ListDeclaration__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getListDeclarationAccess().getLeftParenthesisKeyword_2_1()); }

	'(' 

{ after(grammarAccess.getListDeclarationAccess().getLeftParenthesisKeyword_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ListDeclaration__Group_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ListDeclaration__Group_2__2__Impl
	rule__ListDeclaration__Group_2__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ListDeclaration__Group_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getListDeclarationAccess().getValuesAssignment_2_2()); }
(rule__ListDeclaration__ValuesAssignment_2_2)?
{ after(grammarAccess.getListDeclarationAccess().getValuesAssignment_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ListDeclaration__Group_2__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ListDeclaration__Group_2__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ListDeclaration__Group_2__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getListDeclarationAccess().getRightParenthesisKeyword_2_3()); }

	')' 

{ after(grammarAccess.getListDeclarationAccess().getRightParenthesisKeyword_2_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__InitValues__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InitValues__Group__0__Impl
	rule__InitValues__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InitValues__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInitValuesAccess().getValuesAssignment_0()); }
(rule__InitValues__ValuesAssignment_0)
{ after(grammarAccess.getInitValuesAccess().getValuesAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InitValues__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InitValues__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InitValues__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInitValuesAccess().getGroup_1()); }
(rule__InitValues__Group_1__0)*
{ after(grammarAccess.getInitValuesAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__InitValues__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InitValues__Group_1__0__Impl
	rule__InitValues__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InitValues__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInitValuesAccess().getCommaKeyword_1_0()); }

	',' 

{ after(grammarAccess.getInitValuesAccess().getCommaKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InitValues__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InitValues__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InitValues__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInitValuesAccess().getValuesAssignment_1_1()); }
(rule__InitValues__ValuesAssignment_1_1)
{ after(grammarAccess.getInitValuesAccess().getValuesAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Transition__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Transition__Group__0__Impl
	rule__Transition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionAccess().getTransitionKeyword_0()); }

	'transition' 

{ after(grammarAccess.getTransitionAccess().getTransitionKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Transition__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Transition__Group__1__Impl
	rule__Transition__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionAccess().getNameAssignment_1()); }
(rule__Transition__NameAssignment_1)
{ after(grammarAccess.getTransitionAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Transition__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Transition__Group__2__Impl
	rule__Transition__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionAccess().getLeftSquareBracketKeyword_2()); }

	'[' 

{ after(grammarAccess.getTransitionAccess().getLeftSquareBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Transition__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Transition__Group__3__Impl
	rule__Transition__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionAccess().getGuardAssignment_3()); }
(rule__Transition__GuardAssignment_3)
{ after(grammarAccess.getTransitionAccess().getGuardAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Transition__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Transition__Group__4__Impl
	rule__Transition__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionAccess().getRightSquareBracketKeyword_4()); }

	']' 

{ after(grammarAccess.getTransitionAccess().getRightSquareBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Transition__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Transition__Group__5__Impl
	rule__Transition__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionAccess().getGroup_5()); }
(rule__Transition__Group_5__0)?
{ after(grammarAccess.getTransitionAccess().getGroup_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Transition__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Transition__Group__6__Impl
	rule__Transition__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionAccess().getLeftCurlyBracketKeyword_6()); }

	'{' 

{ after(grammarAccess.getTransitionAccess().getLeftCurlyBracketKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Transition__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Transition__Group__7__Impl
	rule__Transition__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionAccess().getActionsAssignment_7()); }
(rule__Transition__ActionsAssignment_7)*
{ after(grammarAccess.getTransitionAccess().getActionsAssignment_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Transition__Group__8
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Transition__Group__8__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__Group__8__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionAccess().getRightCurlyBracketKeyword_8()); }

	'}' 

{ after(grammarAccess.getTransitionAccess().getRightCurlyBracketKeyword_8()); }
)

;
finally {
	restoreStackSize(stackSize);
}




















rule__Transition__Group_5__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Transition__Group_5__0__Impl
	rule__Transition__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__Group_5__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionAccess().getLabelKeyword_5_0()); }

	'label' 

{ after(grammarAccess.getTransitionAccess().getLabelKeyword_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Transition__Group_5__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Transition__Group_5__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__Group_5__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionAccess().getLabelAssignment_5_1()); }
(rule__Transition__LabelAssignment_5_1)
{ after(grammarAccess.getTransitionAccess().getLabelAssignment_5_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Push__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Push__Group__0__Impl
	rule__Push__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Push__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPushAccess().getListeAssignment_0()); }
(rule__Push__ListeAssignment_0)
{ after(grammarAccess.getPushAccess().getListeAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Push__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Push__Group__1__Impl
	rule__Push__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Push__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPushAccess().getPushKeyword_1()); }

	'.push' 

{ after(grammarAccess.getPushAccess().getPushKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Push__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Push__Group__2__Impl
	rule__Push__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Push__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPushAccess().getLeftParenthesisKeyword_2()); }

	'(' 

{ after(grammarAccess.getPushAccess().getLeftParenthesisKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Push__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Push__Group__3__Impl
	rule__Push__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Push__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPushAccess().getValueAssignment_3()); }
(rule__Push__ValueAssignment_3)
{ after(grammarAccess.getPushAccess().getValueAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Push__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Push__Group__4__Impl
	rule__Push__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Push__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPushAccess().getRightParenthesisKeyword_4()); }

	')' 

{ after(grammarAccess.getPushAccess().getRightParenthesisKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Push__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Push__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Push__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPushAccess().getSemicolonKeyword_5()); }

	';' 

{ after(grammarAccess.getPushAccess().getSemicolonKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__Pop__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Pop__Group__0__Impl
	rule__Pop__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Pop__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPopAccess().getListeAssignment_0()); }
(rule__Pop__ListeAssignment_0)
{ after(grammarAccess.getPopAccess().getListeAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Pop__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Pop__Group__1__Impl
	rule__Pop__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Pop__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPopAccess().getPopKeyword_1()); }

	'.pop' 

{ after(grammarAccess.getPopAccess().getPopKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Pop__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Pop__Group__2__Impl
	rule__Pop__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Pop__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPopAccess().getLeftParenthesisKeyword_2()); }

	'(' 

{ after(grammarAccess.getPopAccess().getLeftParenthesisKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Pop__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Pop__Group__3__Impl
	rule__Pop__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Pop__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPopAccess().getRightParenthesisKeyword_3()); }

	')' 

{ after(grammarAccess.getPopAccess().getRightParenthesisKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Pop__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Pop__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Pop__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPopAccess().getSemicolonKeyword_4()); }

	';' 

{ after(grammarAccess.getPopAccess().getSemicolonKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Peek__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Peek__Group__0__Impl
	rule__Peek__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Peek__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPeekAccess().getListeAssignment_0()); }
(rule__Peek__ListeAssignment_0)
{ after(grammarAccess.getPeekAccess().getListeAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Peek__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Peek__Group__1__Impl
	rule__Peek__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Peek__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPeekAccess().getPeekKeyword_1()); }

	'.peek' 

{ after(grammarAccess.getPeekAccess().getPeekKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Peek__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Peek__Group__2__Impl
	rule__Peek__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Peek__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPeekAccess().getLeftParenthesisKeyword_2()); }

	'(' 

{ after(grammarAccess.getPeekAccess().getLeftParenthesisKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Peek__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Peek__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Peek__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPeekAccess().getRightParenthesisKeyword_3()); }

	')' 

{ after(grammarAccess.getPeekAccess().getRightParenthesisKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Assignment__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Assignment__Group__0__Impl
	rule__Assignment__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getLeftAssignment_0()); }
(rule__Assignment__LeftAssignment_0)
{ after(grammarAccess.getAssignmentAccess().getLeftAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Assignment__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Assignment__Group__1__Impl
	rule__Assignment__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getEqualsSignKeyword_1()); }

	'=' 

{ after(grammarAccess.getAssignmentAccess().getEqualsSignKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Assignment__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Assignment__Group__2__Impl
	rule__Assignment__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getRightAssignment_2()); }
(rule__Assignment__RightAssignment_2)
{ after(grammarAccess.getAssignmentAccess().getRightAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Assignment__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Assignment__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getSemicolonKeyword_3()); }

	';' 

{ after(grammarAccess.getAssignmentAccess().getSemicolonKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__ArrayVarAccess__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayVarAccess__Group__0__Impl
	rule__ArrayVarAccess__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayVarAccess__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayVarAccessAccess().getPrefixAssignment_0()); }
(rule__ArrayVarAccess__PrefixAssignment_0)
{ after(grammarAccess.getArrayVarAccessAccess().getPrefixAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArrayVarAccess__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayVarAccess__Group__1__Impl
	rule__ArrayVarAccess__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayVarAccess__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayVarAccessAccess().getLeftSquareBracketKeyword_1()); }

	'[' 

{ after(grammarAccess.getArrayVarAccessAccess().getLeftSquareBracketKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArrayVarAccess__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayVarAccess__Group__2__Impl
	rule__ArrayVarAccess__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayVarAccess__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayVarAccessAccess().getIndexAssignment_2()); }
(rule__ArrayVarAccess__IndexAssignment_2)
{ after(grammarAccess.getArrayVarAccessAccess().getIndexAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArrayVarAccess__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayVarAccess__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayVarAccess__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayVarAccessAccess().getRightSquareBracketKeyword_3()); }

	']' 

{ after(grammarAccess.getArrayVarAccessAccess().getRightSquareBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__BinaryIntExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BinaryIntExpression__Group__0__Impl
	rule__BinaryIntExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryIntExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBinaryIntExpressionAccess().getUnaryIntExpressionParserRuleCall_0()); }
	ruleUnaryIntExpression
{ after(grammarAccess.getBinaryIntExpressionAccess().getUnaryIntExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BinaryIntExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BinaryIntExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryIntExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBinaryIntExpressionAccess().getGroup_1()); }
(rule__BinaryIntExpression__Group_1__0)*
{ after(grammarAccess.getBinaryIntExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BinaryIntExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BinaryIntExpression__Group_1__0__Impl
	rule__BinaryIntExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryIntExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBinaryIntExpressionAccess().getBinaryIntExpressionLeftAction_1_0()); }
(

)
{ after(grammarAccess.getBinaryIntExpressionAccess().getBinaryIntExpressionLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BinaryIntExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BinaryIntExpression__Group_1__1__Impl
	rule__BinaryIntExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryIntExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBinaryIntExpressionAccess().getOpAssignment_1_1()); }
(rule__BinaryIntExpression__OpAssignment_1_1)
{ after(grammarAccess.getBinaryIntExpressionAccess().getOpAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BinaryIntExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BinaryIntExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryIntExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBinaryIntExpressionAccess().getRightAssignment_1_2()); }
(rule__BinaryIntExpression__RightAssignment_1_2)
{ after(grammarAccess.getBinaryIntExpressionAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__UnaryIntExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnaryIntExpression__Group__0__Impl
	rule__UnaryIntExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryIntExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryIntExpressionAccess().getHyphenMinusKeyword_0()); }
(
	'-' 
)?
{ after(grammarAccess.getUnaryIntExpressionAccess().getHyphenMinusKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnaryIntExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnaryIntExpression__Group__1__Impl
	rule__UnaryIntExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryIntExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryIntExpressionAccess().getPrimaryParserRuleCall_1()); }
	rulePrimary
{ after(grammarAccess.getUnaryIntExpressionAccess().getPrimaryParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnaryIntExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnaryIntExpression__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryIntExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryIntExpressionAccess().getUnaryIntExpressionValAction_2()); }
(

)
{ after(grammarAccess.getUnaryIntExpressionAccess().getUnaryIntExpressionValAction_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Primary__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Primary__Group_3__0__Impl
	rule__Primary__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_3_0()); }

	'(' 

{ after(grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Primary__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Primary__Group_3__1__Impl
	rule__Primary__Group_3__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryAccess().getBinaryIntExpressionParserRuleCall_3_1()); }
	ruleBinaryIntExpression
{ after(grammarAccess.getPrimaryAccess().getBinaryIntExpressionParserRuleCall_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Primary__Group_3__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Primary__Group_3__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_3__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryAccess().getRightParenthesisKeyword_3_2()); }

	')' 

{ after(grammarAccess.getPrimaryAccess().getRightParenthesisKeyword_3_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Or__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Or__Group__0__Impl
	rule__Or__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrAccess().getAndParserRuleCall_0()); }
	ruleAnd
{ after(grammarAccess.getOrAccess().getAndParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Or__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Or__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrAccess().getGroup_1()); }
(rule__Or__Group_1__0)*
{ after(grammarAccess.getOrAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Or__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Or__Group_1__0__Impl
	rule__Or__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrAccess().getOrLeftAction_1_0()); }
(

)
{ after(grammarAccess.getOrAccess().getOrLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Or__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Or__Group_1__1__Impl
	rule__Or__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrAccess().getVerticalLineVerticalLineKeyword_1_1()); }

	'||' 

{ after(grammarAccess.getOrAccess().getVerticalLineVerticalLineKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Or__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Or__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrAccess().getRightAssignment_1_2()); }
(rule__Or__RightAssignment_1_2)
{ after(grammarAccess.getOrAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__And__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__And__Group__0__Impl
	rule__And__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndAccess().getNotParserRuleCall_0()); }
	ruleNot
{ after(grammarAccess.getAndAccess().getNotParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__And__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__And__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndAccess().getGroup_1()); }
(rule__And__Group_1__0)*
{ after(grammarAccess.getAndAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__And__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__And__Group_1__0__Impl
	rule__And__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndAccess().getAndLeftAction_1_0()); }
(

)
{ after(grammarAccess.getAndAccess().getAndLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__And__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__And__Group_1__1__Impl
	rule__And__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndAccess().getAmpersandAmpersandKeyword_1_1()); }

	'&&' 

{ after(grammarAccess.getAndAccess().getAmpersandAmpersandKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__And__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__And__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndAccess().getRightAssignment_1_2()); }
(rule__And__RightAssignment_1_2)
{ after(grammarAccess.getAndAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Not__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Not__Group__0__Impl
	rule__Not__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Not__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNotAccess().getExclamationMarkKeyword_0()); }
(
	'!' 
)?
{ after(grammarAccess.getNotAccess().getExclamationMarkKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Not__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Not__Group__1__Impl
	rule__Not__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Not__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNotAccess().getPrimaryBoolParserRuleCall_1()); }
	rulePrimaryBool
{ after(grammarAccess.getNotAccess().getPrimaryBoolParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Not__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Not__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Not__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNotAccess().getNotValAction_2()); }
(

)
{ after(grammarAccess.getNotAccess().getNotValAction_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__PrimaryBool__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrimaryBool__Group_3__0__Impl
	rule__PrimaryBool__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryBool__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryBoolAccess().getLeftParenthesisKeyword_3_0()); }

	'(' 

{ after(grammarAccess.getPrimaryBoolAccess().getLeftParenthesisKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PrimaryBool__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrimaryBool__Group_3__1__Impl
	rule__PrimaryBool__Group_3__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryBool__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryBoolAccess().getOrParserRuleCall_3_1()); }
	ruleOr
{ after(grammarAccess.getPrimaryBoolAccess().getOrParserRuleCall_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PrimaryBool__Group_3__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrimaryBool__Group_3__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryBool__Group_3__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryBoolAccess().getRightParenthesisKeyword_3_2()); }

	')' 

{ after(grammarAccess.getPrimaryBoolAccess().getRightParenthesisKeyword_3_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Comparison__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Comparison__Group__0__Impl
	rule__Comparison__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonAccess().getLeftAssignment_0()); }
(rule__Comparison__LeftAssignment_0)
{ after(grammarAccess.getComparisonAccess().getLeftAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Comparison__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Comparison__Group__1__Impl
	rule__Comparison__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonAccess().getOperatorAssignment_1()); }
(rule__Comparison__OperatorAssignment_1)
{ after(grammarAccess.getComparisonAccess().getOperatorAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Comparison__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Comparison__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonAccess().getRightAssignment_2()); }
(rule__Comparison__RightAssignment_2)
{ after(grammarAccess.getComparisonAccess().getRightAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__QualifiedName__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group__0__Impl
	rule__QualifiedName__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0()); }
	RULE_ID
{ after(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedName__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getGroup_1()); }
(rule__QualifiedName__Group_1__0)*
{ after(grammarAccess.getQualifiedNameAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__QualifiedName__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group_1__0__Impl
	rule__QualifiedName__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); }

	'.' 

{ after(grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedName__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1()); }
	RULE_ID
{ after(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__QualifiedNameWithWildCard__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedNameWithWildCard__Group__0__Impl
	rule__QualifiedNameWithWildCard__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedNameWithWildCard__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameWithWildCardAccess().getQualifiedNameParserRuleCall_0()); }
	ruleQualifiedName
{ after(grammarAccess.getQualifiedNameWithWildCardAccess().getQualifiedNameParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedNameWithWildCard__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedNameWithWildCard__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedNameWithWildCard__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameWithWildCardAccess().getFullStopAsteriskKeyword_1()); }
(
	'.*' 
)?
{ after(grammarAccess.getQualifiedNameWithWildCardAccess().getFullStopAsteriskKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__System__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSystemAccess().getNameQualifiedNameParserRuleCall_1_0()); }
	ruleQualifiedName{ after(grammarAccess.getSystemAccess().getNameQualifiedNameParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__System__VariablesAssignment_3_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSystemAccess().getVariablesVariableDeclarationParserRuleCall_3_0_0()); }
	ruleVariableDeclaration{ after(grammarAccess.getSystemAccess().getVariablesVariableDeclarationParserRuleCall_3_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__System__ArraysAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSystemAccess().getArraysArrayDeclarationParserRuleCall_3_1_0()); }
	ruleArrayDeclaration{ after(grammarAccess.getSystemAccess().getArraysArrayDeclarationParserRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__System__ListsAssignment_3_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSystemAccess().getListsListDeclarationParserRuleCall_3_2_0()); }
	ruleListDeclaration{ after(grammarAccess.getSystemAccess().getListsListDeclarationParserRuleCall_3_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__System__TransitionsAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSystemAccess().getTransitionsTransitionParserRuleCall_4_0()); }
	ruleTransition{ after(grammarAccess.getSystemAccess().getTransitionsTransitionParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclarationAccess().getNameQualifiedNameParserRuleCall_1_0()); }
	ruleQualifiedName{ after(grammarAccess.getVariableDeclarationAccess().getNameQualifiedNameParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__ValueAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclarationAccess().getValueINTTerminalRuleCall_3_0()); }
	RULE_INT{ after(grammarAccess.getVariableDeclarationAccess().getValueINTTerminalRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayDeclaration__SizeAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayDeclarationAccess().getSizeINTTerminalRuleCall_2_0()); }
	RULE_INT{ after(grammarAccess.getArrayDeclarationAccess().getSizeINTTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayDeclaration__NameAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayDeclarationAccess().getNameQualifiedNameParserRuleCall_4_0()); }
	ruleQualifiedName{ after(grammarAccess.getArrayDeclarationAccess().getNameQualifiedNameParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayDeclaration__ValuesAssignment_7
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayDeclarationAccess().getValuesInitValuesParserRuleCall_7_0()); }
	ruleInitValues{ after(grammarAccess.getArrayDeclarationAccess().getValuesInitValuesParserRuleCall_7_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ListDeclaration__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getListDeclarationAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getListDeclarationAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ListDeclaration__ValuesAssignment_2_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getListDeclarationAccess().getValuesInitValuesParserRuleCall_2_2_0()); }
	ruleInitValues{ after(grammarAccess.getListDeclarationAccess().getValuesInitValuesParserRuleCall_2_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InitValues__ValuesAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInitValuesAccess().getValuesINTTerminalRuleCall_0_0()); }
	RULE_INT{ after(grammarAccess.getInitValuesAccess().getValuesINTTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InitValues__ValuesAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInitValuesAccess().getValuesINTTerminalRuleCall_1_1_0()); }
	RULE_INT{ after(grammarAccess.getInitValuesAccess().getValuesINTTerminalRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getTransitionAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__GuardAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionAccess().getGuardOrParserRuleCall_3_0()); }
	ruleOr{ after(grammarAccess.getTransitionAccess().getGuardOrParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__LabelAssignment_5_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionAccess().getLabelSTRINGTerminalRuleCall_5_1_0()); }
	RULE_STRING{ after(grammarAccess.getTransitionAccess().getLabelSTRINGTerminalRuleCall_5_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__ActionsAssignment_7
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionAccess().getActionsActionsParserRuleCall_7_0()); }
	ruleActions{ after(grammarAccess.getTransitionAccess().getActionsActionsParserRuleCall_7_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Push__ListeAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPushAccess().getListeListCrossReference_0_0()); }
(
{ before(grammarAccess.getPushAccess().getListeListIDTerminalRuleCall_0_0_1()); }
	RULE_ID{ after(grammarAccess.getPushAccess().getListeListIDTerminalRuleCall_0_0_1()); }
)
{ after(grammarAccess.getPushAccess().getListeListCrossReference_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Push__ValueAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPushAccess().getValueBinaryIntExpressionParserRuleCall_3_0()); }
	ruleBinaryIntExpression{ after(grammarAccess.getPushAccess().getValueBinaryIntExpressionParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Pop__ListeAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPopAccess().getListeListCrossReference_0_0()); }
(
{ before(grammarAccess.getPopAccess().getListeListIDTerminalRuleCall_0_0_1()); }
	RULE_ID{ after(grammarAccess.getPopAccess().getListeListIDTerminalRuleCall_0_0_1()); }
)
{ after(grammarAccess.getPopAccess().getListeListCrossReference_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Peek__ListeAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPeekAccess().getListeListCrossReference_0_0()); }
(
{ before(grammarAccess.getPeekAccess().getListeListIDTerminalRuleCall_0_0_1()); }
	RULE_ID{ after(grammarAccess.getPeekAccess().getListeListIDTerminalRuleCall_0_0_1()); }
)
{ after(grammarAccess.getPeekAccess().getListeListCrossReference_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__LeftAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getLeftVarAccessParserRuleCall_0_0()); }
	ruleVarAccess{ after(grammarAccess.getAssignmentAccess().getLeftVarAccessParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__RightAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getRightBinaryIntExpressionParserRuleCall_2_0()); }
	ruleBinaryIntExpression{ after(grammarAccess.getAssignmentAccess().getRightBinaryIntExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VariableRef__VarAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableRefAccess().getVarVariableCrossReference_0()); }
(
{ before(grammarAccess.getVariableRefAccess().getVarVariableIDTerminalRuleCall_0_1()); }
	RULE_ID{ after(grammarAccess.getVariableRefAccess().getVarVariableIDTerminalRuleCall_0_1()); }
)
{ after(grammarAccess.getVariableRefAccess().getVarVariableCrossReference_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayVarAccess__PrefixAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayVarAccessAccess().getPrefixArrayPrefixCrossReference_0_0()); }
(
{ before(grammarAccess.getArrayVarAccessAccess().getPrefixArrayPrefixIDTerminalRuleCall_0_0_1()); }
	RULE_ID{ after(grammarAccess.getArrayVarAccessAccess().getPrefixArrayPrefixIDTerminalRuleCall_0_0_1()); }
)
{ after(grammarAccess.getArrayVarAccessAccess().getPrefixArrayPrefixCrossReference_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayVarAccess__IndexAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayVarAccessAccess().getIndexBinaryIntExpressionParserRuleCall_2_0()); }
	ruleBinaryIntExpression{ after(grammarAccess.getArrayVarAccessAccess().getIndexBinaryIntExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryIntExpression__OpAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBinaryIntExpressionAccess().getOpBinaryArithmeticOperationsEnumRuleCall_1_1_0()); }
	ruleBinaryArithmeticOperations{ after(grammarAccess.getBinaryIntExpressionAccess().getOpBinaryArithmeticOperationsEnumRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryIntExpression__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBinaryIntExpressionAccess().getRightUnaryIntExpressionParserRuleCall_1_2_0()); }
	ruleUnaryIntExpression{ after(grammarAccess.getBinaryIntExpressionAccess().getRightUnaryIntExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Constante__ValAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstanteAccess().getValINTTerminalRuleCall_0()); }
	RULE_INT{ after(grammarAccess.getConstanteAccess().getValINTTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Or__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrAccess().getRightAndParserRuleCall_1_2_0()); }
	ruleAnd{ after(grammarAccess.getOrAccess().getRightAndParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__And__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndAccess().getRightNotParserRuleCall_1_2_0()); }
	ruleNot{ after(grammarAccess.getAndAccess().getRightNotParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__LeftAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonAccess().getLeftBinaryIntExpressionParserRuleCall_0_0()); }
	ruleBinaryIntExpression{ after(grammarAccess.getComparisonAccess().getLeftBinaryIntExpressionParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__OperatorAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonAccess().getOperatorComparisonOperatorsEnumRuleCall_1_0()); }
	ruleComparisonOperators{ after(grammarAccess.getComparisonAccess().getOperatorComparisonOperatorsEnumRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__RightAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonAccess().getRightBinaryIntExpressionParserRuleCall_2_0()); }
	ruleBinaryIntExpression{ after(grammarAccess.getComparisonAccess().getRightBinaryIntExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__True__ValAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTrueAccess().getValTrueKeyword_0()); }
(
{ before(grammarAccess.getTrueAccess().getValTrueKeyword_0()); }

	'True' 

{ after(grammarAccess.getTrueAccess().getValTrueKeyword_0()); }
)

{ after(grammarAccess.getTrueAccess().getValTrueKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__False__ValAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFalseAccess().getValFalseKeyword_0()); }
(
{ before(grammarAccess.getFalseAccess().getValFalseKeyword_0()); }

	'False' 

{ after(grammarAccess.getFalseAccess().getValFalseKeyword_0()); }
)

{ after(grammarAccess.getFalseAccess().getValFalseKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


