/*
* generated by Xtext
*/
package fr.lip6.move.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import fr.lip6.move.services.GalGrammarAccess;

public class GalParser extends AbstractContentAssistParser {
	
	@Inject
	private GalGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected fr.lip6.move.ui.contentassist.antlr.internal.InternalGalParser createParser() {
		fr.lip6.move.ui.contentassist.antlr.internal.InternalGalParser result = new fr.lip6.move.ui.contentassist.antlr.internal.InternalGalParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getSystemAccess().getAlternatives_3(), "rule__System__Alternatives_3");
					put(grammarAccess.getActionsAccess().getAlternatives(), "rule__Actions__Alternatives");
					put(grammarAccess.getVarAccessAccess().getAlternatives(), "rule__VarAccess__Alternatives");
					put(grammarAccess.getPrimaryAccess().getAlternatives(), "rule__Primary__Alternatives");
					put(grammarAccess.getPrimaryBoolAccess().getAlternatives(), "rule__PrimaryBool__Alternatives");
					put(grammarAccess.getBinaryArithmeticOperationsAccess().getAlternatives(), "rule__BinaryArithmeticOperations__Alternatives");
					put(grammarAccess.getComparisonOperatorsAccess().getAlternatives(), "rule__ComparisonOperators__Alternatives");
					put(grammarAccess.getSystemAccess().getGroup(), "rule__System__Group__0");
					put(grammarAccess.getVariableDeclarationAccess().getGroup(), "rule__VariableDeclaration__Group__0");
					put(grammarAccess.getArrayDeclarationAccess().getGroup(), "rule__ArrayDeclaration__Group__0");
					put(grammarAccess.getListDeclarationAccess().getGroup(), "rule__ListDeclaration__Group__0");
					put(grammarAccess.getListDeclarationAccess().getGroup_2(), "rule__ListDeclaration__Group_2__0");
					put(grammarAccess.getInitValuesAccess().getGroup(), "rule__InitValues__Group__0");
					put(grammarAccess.getInitValuesAccess().getGroup_1(), "rule__InitValues__Group_1__0");
					put(grammarAccess.getTransitionAccess().getGroup(), "rule__Transition__Group__0");
					put(grammarAccess.getTransitionAccess().getGroup_5(), "rule__Transition__Group_5__0");
					put(grammarAccess.getPushAccess().getGroup(), "rule__Push__Group__0");
					put(grammarAccess.getPopAccess().getGroup(), "rule__Pop__Group__0");
					put(grammarAccess.getPeekAccess().getGroup(), "rule__Peek__Group__0");
					put(grammarAccess.getAssignmentAccess().getGroup(), "rule__Assignment__Group__0");
					put(grammarAccess.getArrayVarAccessAccess().getGroup(), "rule__ArrayVarAccess__Group__0");
					put(grammarAccess.getBinaryIntExpressionAccess().getGroup(), "rule__BinaryIntExpression__Group__0");
					put(grammarAccess.getBinaryIntExpressionAccess().getGroup_1(), "rule__BinaryIntExpression__Group_1__0");
					put(grammarAccess.getUnaryIntExpressionAccess().getGroup(), "rule__UnaryIntExpression__Group__0");
					put(grammarAccess.getPrimaryAccess().getGroup_3(), "rule__Primary__Group_3__0");
					put(grammarAccess.getOrAccess().getGroup(), "rule__Or__Group__0");
					put(grammarAccess.getOrAccess().getGroup_1(), "rule__Or__Group_1__0");
					put(grammarAccess.getAndAccess().getGroup(), "rule__And__Group__0");
					put(grammarAccess.getAndAccess().getGroup_1(), "rule__And__Group_1__0");
					put(grammarAccess.getNotAccess().getGroup(), "rule__Not__Group__0");
					put(grammarAccess.getPrimaryBoolAccess().getGroup_3(), "rule__PrimaryBool__Group_3__0");
					put(grammarAccess.getComparisonAccess().getGroup(), "rule__Comparison__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup(), "rule__QualifiedName__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup_1(), "rule__QualifiedName__Group_1__0");
					put(grammarAccess.getQualifiedNameWithWildCardAccess().getGroup(), "rule__QualifiedNameWithWildCard__Group__0");
					put(grammarAccess.getImportAccess().getGroup(), "rule__Import__Group__0");
					put(grammarAccess.getSystemAccess().getNameAssignment_1(), "rule__System__NameAssignment_1");
					put(grammarAccess.getSystemAccess().getVariablesAssignment_3_0(), "rule__System__VariablesAssignment_3_0");
					put(grammarAccess.getSystemAccess().getArraysAssignment_3_1(), "rule__System__ArraysAssignment_3_1");
					put(grammarAccess.getSystemAccess().getListsAssignment_3_2(), "rule__System__ListsAssignment_3_2");
					put(grammarAccess.getSystemAccess().getTransitionsAssignment_4(), "rule__System__TransitionsAssignment_4");
					put(grammarAccess.getVariableDeclarationAccess().getNameAssignment_1(), "rule__VariableDeclaration__NameAssignment_1");
					put(grammarAccess.getVariableDeclarationAccess().getValueAssignment_3(), "rule__VariableDeclaration__ValueAssignment_3");
					put(grammarAccess.getArrayDeclarationAccess().getSizeAssignment_2(), "rule__ArrayDeclaration__SizeAssignment_2");
					put(grammarAccess.getArrayDeclarationAccess().getNameAssignment_4(), "rule__ArrayDeclaration__NameAssignment_4");
					put(grammarAccess.getArrayDeclarationAccess().getValuesAssignment_7(), "rule__ArrayDeclaration__ValuesAssignment_7");
					put(grammarAccess.getListDeclarationAccess().getNameAssignment_1(), "rule__ListDeclaration__NameAssignment_1");
					put(grammarAccess.getListDeclarationAccess().getValuesAssignment_2_2(), "rule__ListDeclaration__ValuesAssignment_2_2");
					put(grammarAccess.getInitValuesAccess().getValuesAssignment_0(), "rule__InitValues__ValuesAssignment_0");
					put(grammarAccess.getInitValuesAccess().getValuesAssignment_1_1(), "rule__InitValues__ValuesAssignment_1_1");
					put(grammarAccess.getTransitionAccess().getNameAssignment_1(), "rule__Transition__NameAssignment_1");
					put(grammarAccess.getTransitionAccess().getGuardAssignment_3(), "rule__Transition__GuardAssignment_3");
					put(grammarAccess.getTransitionAccess().getLabelAssignment_5_1(), "rule__Transition__LabelAssignment_5_1");
					put(grammarAccess.getTransitionAccess().getActionsAssignment_7(), "rule__Transition__ActionsAssignment_7");
					put(grammarAccess.getPushAccess().getListeAssignment_0(), "rule__Push__ListeAssignment_0");
					put(grammarAccess.getPushAccess().getValueAssignment_3(), "rule__Push__ValueAssignment_3");
					put(grammarAccess.getPopAccess().getListeAssignment_0(), "rule__Pop__ListeAssignment_0");
					put(grammarAccess.getPeekAccess().getListeAssignment_0(), "rule__Peek__ListeAssignment_0");
					put(grammarAccess.getAssignmentAccess().getLeftAssignment_0(), "rule__Assignment__LeftAssignment_0");
					put(grammarAccess.getAssignmentAccess().getRightAssignment_2(), "rule__Assignment__RightAssignment_2");
					put(grammarAccess.getVariableRefAccess().getVarAssignment(), "rule__VariableRef__VarAssignment");
					put(grammarAccess.getArrayVarAccessAccess().getPrefixAssignment_0(), "rule__ArrayVarAccess__PrefixAssignment_0");
					put(grammarAccess.getArrayVarAccessAccess().getIndexAssignment_2(), "rule__ArrayVarAccess__IndexAssignment_2");
					put(grammarAccess.getBinaryIntExpressionAccess().getOpAssignment_1_1(), "rule__BinaryIntExpression__OpAssignment_1_1");
					put(grammarAccess.getBinaryIntExpressionAccess().getRightAssignment_1_2(), "rule__BinaryIntExpression__RightAssignment_1_2");
					put(grammarAccess.getConstanteAccess().getValAssignment(), "rule__Constante__ValAssignment");
					put(grammarAccess.getOrAccess().getRightAssignment_1_2(), "rule__Or__RightAssignment_1_2");
					put(grammarAccess.getAndAccess().getRightAssignment_1_2(), "rule__And__RightAssignment_1_2");
					put(grammarAccess.getComparisonAccess().getLeftAssignment_0(), "rule__Comparison__LeftAssignment_0");
					put(grammarAccess.getComparisonAccess().getOperatorAssignment_1(), "rule__Comparison__OperatorAssignment_1");
					put(grammarAccess.getComparisonAccess().getRightAssignment_2(), "rule__Comparison__RightAssignment_2");
					put(grammarAccess.getTrueAccess().getValAssignment(), "rule__True__ValAssignment");
					put(grammarAccess.getFalseAccess().getValAssignment(), "rule__False__ValAssignment");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			fr.lip6.move.ui.contentassist.antlr.internal.InternalGalParser typedParser = (fr.lip6.move.ui.contentassist.antlr.internal.InternalGalParser) parser;
			typedParser.entryRuleSystem();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public GalGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(GalGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
